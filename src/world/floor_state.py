"""
–°–æ—Å—Ç–æ—è–Ω–∏–µ —ç—Ç–∞–∂–∞
"""
from dataclasses import dataclass, field
from typing import Optional
import numpy as np


@dataclass
class FloorState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ —ç—Ç–∞–∂–∞ –ø–æ–¥–∑–µ–º–µ–ª—å—è"""
    
    floor_number: int
    seed: int
    is_stabilized: bool = False
    
    # –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è (–µ—Å–ª–∏ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
    saved_tiles: Optional[np.ndarray] = None
    entrance_pos: Optional[tuple] = None
    exit_pos: Optional[tuple] = None
    saved_fog_of_war: Optional[np.ndarray] = None  # –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏
    
    # –†—É–Ω–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ —Å–æ–±—Ä–∞–Ω–∞?
    stability_rune_collected: bool = False
    
    # –ó–∞–≥–∞–¥–∫–∞ –Ω–∞ —Å—Ç–µ–Ω–µ (–ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏)
    riddle_spawned: bool = False  # –ë—ã–ª–∞ –ª–∏ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–≥–∞–¥–∫–∞
    riddle_positions: list = field(default_factory=list)  # –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–≥–∞–¥–æ–∫ (x, y)
    
    def stabilize(
        self, 
        level_tiles: np.ndarray, 
        entrance: tuple, 
        exit: tuple,
        fog_of_war: np.ndarray = None
    ) -> None:
        """
        –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∞–∂
        
        Args:
            level_tiles: –¢–∞–π–ª—ã —É—Ä–æ–≤–Ω—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            entrance: –ü–æ–∑–∏—Ü–∏—è –≤—Ö–æ–¥–∞
            exit: –ü–æ–∑–∏—Ü–∏—è –≤—ã—Ö–æ–¥–∞
            fog_of_war: –ö–∞—Ä—Ç–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        self.is_stabilized = True
        self.saved_tiles = level_tiles.copy()
        self.entrance_pos = entrance
        self.exit_pos = exit
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º fog of war –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
        if fog_of_war is not None:
            self.saved_fog_of_war = fog_of_war.copy()
        
        print(f"üîí –≠—Ç–∞–∂ {self.floor_number} —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        print(f"   –ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞ –∏ —Ä–∞–∑–≤–µ–¥–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
    def get_saved_data(self) -> Optional[dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        """
        if not self.is_stabilized:
            return None
            
        return {
            'tiles': self.saved_tiles,
            'entrance_pos': self.entrance_pos,
            'exit_pos': self.exit_pos,
            'fog_of_war': self.saved_fog_of_war,
            'riddle_positions': self.riddle_positions
        }


class FloorStateManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π —ç—Ç–∞–∂–µ–π"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.floors: dict[int, FloorState] = {}
        print("üìö –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π —ç—Ç–∞–∂–µ–π —Å–æ–∑–¥–∞–Ω")
        
    def get_or_create_floor_state(self, floor_number: int, seed: int) -> FloorState:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç—Ç–∞–∂–∞
        
        Args:
            floor_number: –ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞
            seed: Seed –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            –°–æ—Å—Ç–æ—è–Ω–∏–µ —ç—Ç–∞–∂–∞
        """
        if floor_number not in self.floors:
            self.floors[floor_number] = FloorState(
                floor_number=floor_number,
                seed=seed
            )
            print(f"üìÑ –°–æ–∑–¥–∞–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç—Ç–∞–∂–∞ {floor_number}")
            
        return self.floors[floor_number]
        
    def is_floor_stabilized(self, floor_number: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —ç—Ç–∞–∂
        
        Args:
            floor_number: –ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞
            
        Returns:
            True –µ—Å–ª–∏ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        """
        if floor_number not in self.floors:
            return False
        return self.floors[floor_number].is_stabilized
        
    def stabilize_floor(
        self, 
        floor_number: int, 
        level_tiles: np.ndarray,
        entrance: tuple,
        exit: tuple,
        fog_of_war: np.ndarray = None
    ) -> None:
        """
        –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∞–∂
        
        Args:
            floor_number: –ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞
            level_tiles: –¢–∞–π–ª—ã —É—Ä–æ–≤–Ω—è
            entrance: –ü–æ–∑–∏—Ü–∏—è –≤—Ö–æ–¥–∞
            exit: –ü–æ–∑–∏—Ü–∏—è –≤—ã—Ö–æ–¥–∞
            fog_of_war: –ö–∞—Ä—Ç–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏
        """
        if floor_number in self.floors:
            self.floors[floor_number].stabilize(level_tiles, entrance, exit, fog_of_war)
        else:
            print(f"‚ö†Ô∏è  –≠—Ç–∞–∂ {floor_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ")
            
    def get_stabilized_count(self) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç—Ç–∞–∂–µ–π
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç—Ç–∞–∂–µ–π
        """
        return sum(1 for floor in self.floors.values() if floor.is_stabilized)
        
    def all_floors_stabilized(self, total_floors: int = 20) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—Å–µ –ª–∏ —ç—Ç–∞–∂–∏ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        
        Args:
            total_floors: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π
            
        Returns:
            True –µ—Å–ª–∏ –≤—Å–µ —ç—Ç–∞–∂–∏ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        """
        return self.get_stabilized_count() >= total_floors


if __name__ == "__main__":
    # –¢–µ—Å—Ç FloorStateManager
    manager = FloorStateManager()
    
    # –°–æ–∑–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç—Ç–∞–∂–µ–π
    floor1 = manager.get_or_create_floor_state(1, 12345)
    floor2 = manager.get_or_create_floor_state(2, 67890)
    
    print(f"\n–≠—Ç–∞–∂ 1 —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {floor1.is_stabilized}")
    print(f"–≠—Ç–∞–∂ 2 —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {floor2.is_stabilized}")
    
    # –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ–º —ç—Ç–∞–∂ 1
    test_tiles = np.zeros((40, 60), dtype=np.uint8)
    manager.stabilize_floor(1, test_tiles, (10, 10), (50, 30))
    
    print(f"\n–ü–æ—Å–ª–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏:")
    print(f"–≠—Ç–∞–∂ 1 —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {manager.is_floor_stabilized(1)}")
    print(f"–°—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —ç—Ç–∞–∂–µ–π: {manager.get_stabilized_count()}/20")
    print(f"–í—Å–µ —ç—Ç–∞–∂–∏ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {manager.all_floors_stabilized()}")
