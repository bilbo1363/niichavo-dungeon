"""
–ö–ª–∞—Å—Å —É—Ä–æ–≤–Ω—è
"""
import numpy as np
import pygame
from typing import Tuple
from .fog_of_war import FogOfWar
from ..items.rune import RuneManager
from ..puzzles.riddle import RiddleManager
from ..items.item_spawner import ItemSpawner
from ..entities.enemy_spawner import EnemySpawner


class Level:
    """–ö–ª–∞—Å—Å —É—Ä–æ–≤–Ω—è"""
    
    # –¢–∏–ø—ã —Ç–∞–π–ª–æ–≤
    TILE_FLOOR = 0
    TILE_WALL = 1
    
    # –¶–≤–µ—Ç–∞ —Ç–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –±—É–¥—É—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –±–∏–æ–º–æ–º)
    COLOR_FLOOR = (50, 50, 50)      # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π
    COLOR_WALL = (100, 100, 100)    # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
    
    def __init__(self, width: int = 60, height: int = 40, floor_number: int = 1):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è
        
        Args:
            width: –®–∏—Ä–∏–Ω–∞ –≤ –∫–ª–µ—Ç–∫–∞—Ö
            height: –í—ã—Å–æ—Ç–∞ –≤ –∫–ª–µ—Ç–∫–∞—Ö
            floor_number: –ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞ (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–∏–æ–º–∞)
        """
        self.width = width
        self.height = height
        self.tile_size = 32
        self.floor_number = floor_number
        
        # –°–æ–∑–¥–∞—ë–º —Å–µ—Ç–∫—É —É—Ä–æ–≤–Ω—è (NumPy –º–∞—Å—Å–∏–≤)
        self.tiles = np.zeros((height, width), dtype=np.uint8)
        
        # –ü–æ–∑–∏—Ü–∏–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞
        self.entrance_pos = None  # (x, y)
        self.exit_pos = None      # (x, y)
        
        # Fog of War
        self.fog_of_war = FogOfWar(width, height)
        
        # –ï—Å—Ç—å –ª–∏ —Å–≤–µ—Ç –Ω–∞ —ç—Ç–∞–∂–µ (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —ç—Ç–∞–∂–∏ —Ç–µ–º–Ω—ã–µ)
        self.has_light = True
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ –±–∏–æ–º–∞
        self._apply_biome_colors()
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä—É–Ω
        self.rune_manager = RuneManager()
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≥–∞–¥–æ–∫
        self.riddle_manager = RiddleManager()
        
        # –°–ø–∞–≤–Ω–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        self.item_spawner = ItemSpawner()
        
        # –°–ø–∞–≤–Ω–µ—Ä –≤—Ä–∞–≥–æ–≤
        self.enemy_spawner = EnemySpawner()
        
        # –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è (–±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º)
        self.obstacles = []
        
        # –õ–æ–≤—É—à–∫–∏ (–±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º)
        self.traps = []
        
        # –ó–∞–ø–∏—Å–∫–∏ (–±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º)
        self.notes = []
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (–±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º)
        self.containers = []
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (–¥–æ—Å–∫–∏ —Å –∑–∞–ø–∏—Å–∫–∞–º–∏, –∫–æ—Å—Ç–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤)
        self.interactive_objects = []
        
        print(f"üó∫Ô∏è  –£—Ä–æ–≤–µ–Ω—å —Å–æ–∑–¥–∞–Ω: {width}x{height}")
        
    def _generate_test_level(self) -> None:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å—ë –ø–æ–ª–æ–º
        self.tiles.fill(self.TILE_FLOOR)
        
        # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞–Ω–∏—Ü—ã (—Å—Ç–µ–Ω—ã)
        self.tiles[0, :] = self.TILE_WALL      # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        self.tiles[-1, :] = self.TILE_WALL     # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        self.tiles[:, 0] = self.TILE_WALL      # –õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
        self.tiles[:, -1] = self.TILE_WALL     # –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
        
        # –î–æ–±–∞–≤–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –¥–ª—è —Ç–µ—Å—Ç–∞
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Å—Ç–µ–Ω–∞
        for y in range(10, 20):
            self.tiles[y, 20] = self.TILE_WALL
            
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Å—Ç–µ–Ω–∞
        for x in range(30, 40):
            self.tiles[15, x] = self.TILE_WALL
            
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        
    def is_walkable(self, x: int, y: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–π—Ç–∏ –Ω–∞ –∫–ª–µ—Ç–∫—É
        
        Args:
            x: –ü–æ–∑–∏—Ü–∏—è X
            y: –ü–æ–∑–∏—Ü–∏—è Y
            
        Returns:
            True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü
        if not (0 <= x < self.width and 0 <= y < self.height):
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ç–∞–π–ª–∞
        if self.tiles[y, x] != self.TILE_FLOOR:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
        for obstacle in self.obstacles:
            if obstacle.x == x and obstacle.y == y and obstacle.blocks_movement:
                return False
        
        return True
        
    def get_tile(self, x: int, y: int) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø —Ç–∞–π–ª–∞
        
        Args:
            x: –ü–æ–∑–∏—Ü–∏—è X
            y: –ü–æ–∑–∏—Ü–∏—è Y
            x: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
            y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
            
        Returns:
            –¢–∏–ø —Ç–∞–π–ª–∞
        """
        if x < 0 or x >= self.width or y < 0 or y >= self.height:
            return self.TILE_WALL
        return self.tiles[y, x]
        
    def update_fog_of_war(self, player_x: int, player_y: int) -> None:
        """
        –û–±–Ω–æ–≤–∏—Ç—å —Ç—É–º–∞–Ω –≤–æ–π–Ω—ã
        
        Args:
            player_x: –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ X
            player_y: –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ Y
        """
        self.fog_of_war.update_vision(player_x, player_y, self.tiles)
        
    def render(self, screen: pygame.Surface, camera_x: int = 0, camera_y: int = 0) -> None:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è
        
        Args:
            screen: –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            camera_x: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ X
            camera_y: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ Y
        """
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–∏–¥–∏–º—É—é –æ–±–ª–∞—Å—Ç—å
        screen_width, screen_height = screen.get_size()
        
        start_x = max(0, camera_x // self.tile_size)
        start_y = max(0, camera_y // self.tile_size)
        end_x = min(self.width, (camera_x + screen_width) // self.tile_size + 1)
        end_y = min(self.height, (camera_y + screen_height) // self.tile_size + 1)
        
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ —Ç–∞–π–ª—ã
        for y in range(start_y, end_y):
            for x in range(start_x, end_x):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
                visibility = self.fog_of_war.get_visibility(x, y)
                
                # –ï—Å–ª–∏ –Ω–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–æ - –Ω–µ —Ä–∏—Å—É–µ–º
                if visibility == FogOfWar.UNEXPLORED:
                    continue
                
                tile_type = self.tiles[y, x]
                
                # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —ç–∫—Ä–∞–Ω–µ
                screen_x = x * self.tile_size - camera_x
                screen_y = y * self.tile_size - camera_y
                
                # –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç
                if tile_type == self.TILE_WALL:
                    base_color = self.COLOR_WALL
                else:
                    base_color = self.COLOR_FLOOR
                
                # –ó–∞—Ç–µ–º–Ω—è–µ–º –µ—Å–ª–∏ –Ω–µ –≤–∏–¥–∏–º–æ —Å–µ–π—á–∞—Å
                if visibility == FogOfWar.EXPLORED:
                    # –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–æ, –Ω–æ –Ω–µ –≤–∏–¥–∏–º–æ - –∑–∞—Ç–µ–º–Ω—è–µ–º
                    color = tuple(c // 2 for c in base_color)
                else:
                    # –í–∏–¥–∏–º–æ —Å–µ–π—á–∞—Å - –ø–æ–ª–Ω—ã–π —Ü–≤–µ—Ç
                    color = base_color
                    
                # –†–∏—Å—É–µ–º —Ç–∞–π–ª
                pygame.draw.rect(
                    screen,
                    color,
                    (screen_x, screen_y, self.tile_size, self.tile_size)
                )
                
                # –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
                if visibility == FogOfWar.VISIBLE:
                    pygame.draw.rect(
                        screen,
                        (30, 30, 30),
                        (screen_x, screen_y, self.tile_size, self.tile_size),
                        1
                    )
                
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Ö–æ–¥ (–∑–µ–ª—ë–Ω—ã–π) - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∏–¥–∏–º–æ
        if self.entrance_pos:
            ent_x, ent_y = self.entrance_pos
            if self.fog_of_war.is_visible(ent_x, ent_y):
                screen_x = ent_x * self.tile_size - camera_x
                screen_y = ent_y * self.tile_size - camera_y
                pygame.draw.circle(
                    screen,
                    (0, 255, 0),
                    (screen_x + self.tile_size // 2, screen_y + self.tile_size // 2),
                    self.tile_size // 3
                )
            
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—ã—Ö–æ–¥ (–∫—Ä–∞—Å–Ω—ã–π) - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∏–¥–∏–º–æ
        if self.exit_pos:
            exit_x, exit_y = self.exit_pos
            if self.fog_of_war.is_visible(exit_x, exit_y):
                screen_x = exit_x * self.tile_size - camera_x
                screen_y = exit_y * self.tile_size - camera_y
                pygame.draw.circle(
                    screen,
                    (255, 0, 0),
                    (screen_x + self.tile_size // 2, screen_y + self.tile_size // 2),
                    self.tile_size // 3
                )
                
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π fog of war)
        self._render_obstacles(screen, camera_x, camera_y)
        
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ª–æ–≤—É—à–∫–∏ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π fog of war)
        self._render_traps(screen, camera_x, camera_y)
        
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∫–∏ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π fog of war)
        self._render_notes(screen, camera_x, camera_y)
        
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π fog of war)
        self._render_containers(screen, camera_x, camera_y)
        
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (–¥–æ—Å–∫–∏ –∏ –∫–æ—Å—Ç–∏)
        self._render_interactive_objects(screen, camera_x, camera_y)
        
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ä—É–Ω—ã (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π fog of war)
        self.rune_manager.render(screen, camera_x, camera_y, self.fog_of_war)
        
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∑–∞–≥–∞–¥–∫–∏ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π fog of war)
        self.riddle_manager.render(screen, camera_x, camera_y, self.fog_of_war)
        
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π fog of war)
        self.item_spawner.render_all(screen, camera_x, camera_y, self.fog_of_war)
        
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Ä–∞–≥–æ–≤ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π fog of war)
        self.enemy_spawner.render_all(screen, camera_x, camera_y, self.fog_of_war)
    
    def _render_obstacles(self, screen, camera_x: int, camera_y: int) -> None:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
        
        Args:
            screen: –≠–∫—Ä–∞–Ω –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            camera_x: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ X
            camera_y: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ Y
        """
        from .obstacles import ObstacleType
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
        obstacle_colors = {
            ObstacleType.PILLAR: (120, 120, 120),  # –°–µ—Ä—ã–π
            ObstacleType.TABLE: (139, 69, 19),  # –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π
            ObstacleType.STATUE: (160, 160, 160),  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
            ObstacleType.RUBBLE: (100, 100, 100),  # –¢—ë–º–Ω–æ-—Å–µ—Ä—ã–π
            ObstacleType.PIT: (20, 20, 20),  # –ü–æ—á—Ç–∏ —á—ë—Ä–Ω—ã–π
            ObstacleType.WATER: (0, 100, 200),  # –°–∏–Ω–∏–π
            ObstacleType.LAVA: (255, 100, 0),  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        }
        
        for obstacle in self.obstacles:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
            if not self.fog_of_war.is_visible(obstacle.x, obstacle.y):
                continue
            
            screen_x = obstacle.x * self.tile_size - camera_x
            screen_y = obstacle.y * self.tile_size - camera_y
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
            color = obstacle_colors.get(obstacle.obstacle_type, (100, 100, 100))
            
            # –†–∏—Å—É–µ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ
            if obstacle.obstacle_type == ObstacleType.PILLAR:
                # –ö–æ–ª–æ–Ω–Ω–∞ - –∫—Ä—É–≥
                pygame.draw.circle(
                    screen,
                    color,
                    (screen_x + self.tile_size // 2, screen_y + self.tile_size // 2),
                    self.tile_size // 3
                )
            elif obstacle.obstacle_type in [ObstacleType.WATER, ObstacleType.LAVA]:
                # –í–æ–¥–∞/–ª–∞–≤–∞ - –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç
                pygame.draw.rect(
                    screen,
                    color,
                    (screen_x, screen_y, self.tile_size, self.tile_size)
                )
            else:
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ - –∫–≤–∞–¥—Ä–∞—Ç
                pygame.draw.rect(
                    screen,
                    color,
                    (screen_x + 4, screen_y + 4, self.tile_size - 8, self.tile_size - 8)
                )
    
    def _render_notes(self, screen, camera_x: int, camera_y: int) -> None:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–ø–∏—Å–æ–∫
        
        Args:
            screen: –≠–∫—Ä–∞–Ω –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            camera_x: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ X
            camera_y: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ Y
        """
        for note in self.notes:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
            if not self.fog_of_war.is_visible(note.x, note.y):
                continue
            
            screen_x = note.x * self.tile_size - camera_x
            screen_y = note.y * self.tile_size - camera_y
            
            # –¶–≤–µ—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∫–∏
            if note.read:
                color = (150, 150, 150)  # –°–µ—Ä—ã–π –µ—Å–ª–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω–∞
            else:
                color = (255, 220, 150)  # –ñ—ë–ª—Ç—ã–π –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–∞
            
            # –†–∏—Å—É–µ–º –∑–∞–ø–∏—Å–∫—É –∫–∞–∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å —Å–∏–º–≤–æ–ª–æ–º
            pygame.draw.rect(
                screen,
                color,
                (screen_x + 8, screen_y + 8, self.tile_size - 16, self.tile_size - 16)
            )
            
            # –†–∏—Å—É–µ–º —Ä–∞–º–∫—É
            pygame.draw.rect(
                screen,
                (100, 100, 100),
                (screen_x + 8, screen_y + 8, self.tile_size - 16, self.tile_size - 16),
                2
            )
            
            # –†–∏—Å—É–µ–º —Å–∏–º–≤–æ–ª "üìú" (—É–ø—Ä–æ—â—ë–Ω–Ω–æ - –ª–∏–Ω–∏–∏)
            pygame.draw.line(
                screen,
                (50, 50, 50),
                (screen_x + 12, screen_y + 14),
                (screen_x + self.tile_size - 12, screen_y + 14),
                2
            )
            pygame.draw.line(
                screen,
                (50, 50, 50),
                (screen_x + 12, screen_y + 18),
                (screen_x + self.tile_size - 12, screen_y + 18),
                2
            )
    
    def _render_traps(self, screen, camera_x: int, camera_y: int) -> None:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ª–æ–≤—É—à–µ–∫
        
        Args:
            screen: –≠–∫—Ä–∞–Ω –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            camera_x: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ X
            camera_y: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ Y
        """
        from .traps import TrapType
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ª–æ–≤—É—à–µ–∫
        trap_colors = {
            TrapType.SPIKES: (150, 150, 150),  # –°–µ—Ä—ã–π
            TrapType.ARROW: (139, 69, 19),  # –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π
            TrapType.FIRE: (255, 100, 0),  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            TrapType.ICE: (100, 200, 255),  # –ì–æ–ª—É–±–æ–π
            TrapType.TELEPORT: (200, 100, 255),  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            TrapType.POISON: (100, 200, 100),  # –ó–µ–ª—ë–Ω—ã–π
            TrapType.COLLAPSE: (100, 100, 100),  # –¢—ë–º–Ω–æ-—Å–µ—Ä—ã–π
            TrapType.EXPLOSIVE: (255, 50, 50),  # –ö—Ä–∞—Å–Ω—ã–π
        }
        
        for trap in self.traps:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –≤ fog of war
            if not self.fog_of_war.is_visible(trap.x, trap.y):
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–∞ –ª–∏ –ª–æ–≤—É—à–∫–∞ (—Å–∫—Ä—ã—Ç—ã–µ –Ω–µ–≤–∏–¥–∏–º—ã –¥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è)
            if not trap.is_visible():
                continue
            
            # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –ª–æ–≤—É—à–∫–∏
            if trap.triggered and trap.trap_type not in [TrapType.FIRE, TrapType.ICE, TrapType.POISON]:
                continue
            
            screen_x = trap.x * self.tile_size - camera_x
            screen_y = trap.y * self.tile_size - camera_y
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –ª–æ–≤—É—à–∫–∏
            color = trap_colors.get(trap.trap_type, (200, 200, 0))
            
            # –ï—Å–ª–∏ –ª–æ–≤—É—à–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ - –¥–µ–ª–∞–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π
            if trap.triggered:
                color = tuple(c // 2 for c in color)
            
            # –ï—Å–ª–∏ –ª–æ–≤—É—à–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ - –¥–µ–ª–∞–µ–º —Ç—É—Å–∫–ª–æ–π
            if trap.detected and not trap.triggered:
                color = tuple(c * 2 // 3 for c in color)
            
            center_x = screen_x + self.tile_size // 2
            center_y = screen_y + self.tile_size // 2
            
            # –í–ò–î–ò–ú–´–ï –ú–ï–•–ê–ù–ò–ó–ú–´ - —Ä–∏—Å—É–µ–º –∫–∞–∫ –∫–≤–∞–¥—Ä–∞—Ç—ã
            if not trap.is_hidden:
                size = 12
                pygame.draw.rect(
                    screen,
                    color,
                    (center_x - size, center_y - size, size * 2, size * 2)
                )
                pygame.draw.rect(
                    screen,
                    (255, 255, 0),
                    (center_x - size, center_y - size, size * 2, size * 2),
                    2
                )
            # –°–ö–†–´–¢–´–ï –õ–û–í–£–®–ö–ò (–æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ) - —Ä–∏—Å—É–µ–º –∫–∞–∫ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏
            else:
                size = 10
                # –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                points = [
                    (center_x, center_y - size),  # –í–µ—Ä—Ö
                    (center_x - size, center_y + size),  # –õ–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π
                    (center_x + size, center_y + size),  # –ü—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π
                ]
                
                pygame.draw.polygon(screen, color, points)
                pygame.draw.polygon(screen, (255, 255, 0), points, 2)  # –ñ—ë–ª—Ç–∞—è –æ–±–≤–æ–¥–∫–∞
                
                # –í–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ –≤ —Ü–µ–Ω—Ç—Ä–µ
                pygame.draw.line(
                    screen,
                    (0, 0, 0),
                    (center_x, center_y - 4),
                    (center_x, center_y + 2),
                    2
                )
                pygame.draw.circle(screen, (0, 0, 0), (center_x, center_y + 5), 1)
    
    def _render_containers(self, screen, camera_x: int, camera_y: int) -> None:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        
        Args:
            screen: –≠–∫—Ä–∞–Ω –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            camera_x: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ X
            camera_y: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ Y
        """
        for container in self.containers:
            container.render(screen, camera_x, camera_y, self.tile_size, self.fog_of_war)
    
    def _apply_biome_colors(self) -> None:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç–∞ –±–∏–æ–º–∞ –∫ —É—Ä–æ–≤–Ω—é"""
        try:
            from .biomes import BiomeManager
            
            biome = BiomeManager.get_biome_for_floor(self.floor_number)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–∞–π–ª–æ–≤
            Level.COLOR_FLOOR = biome.floor_color
            Level.COLOR_WALL = biome.wall_color
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Å–≤–µ—â–µ–Ω–∏—è
            if biome.fog_density > 0.3:
                self.has_light = False  # –¢–µ–º–Ω–µ–µ –Ω–∞ –≥–ª—É–±–æ–∫–∏—Ö —ç—Ç–∞–∂–∞—Ö
                
        except ImportError:
            # –ï—Å–ª–∏ –º–æ–¥—É–ª—å –±–∏–æ–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
            pass
    
    def _render_interactive_objects(self, screen: pygame.Surface, camera_x: int, camera_y: int) -> None:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–¥–æ—Å–∫–∏ –∏ –∫–æ—Å—Ç–∏)
        
        Args:
            screen: –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            camera_x: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ X
            camera_y: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ Y
        """
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–ø—Ä–∞–π—Ç–æ–≤
        from ..graphics.sprite_manager import SpriteManager
        sprite_manager = SpriteManager()
        
        for obj in self.interactive_objects:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –≤ fog of war
            if not self.fog_of_war.is_visible(obj.x, obj.y):
                continue
            
            screen_x = obj.x * self.tile_size - camera_x
            screen_y = obj.y * self.tile_size - camera_y
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø—Ä–∞–π—Ç –æ–±—ä–µ–∫—Ç–∞
            sprite = obj.get_sprite(sprite_manager)
            
            if sprite:
                # –†–∏—Å—É–µ–º —Å–ø—Ä–∞–π—Ç
                screen.blit(sprite, (screen_x, screen_y))
            else:
                # Fallback - —Ä–∏—Å—É–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
                color = obj.get_color()
                pygame.draw.rect(
                    screen,
                    color,
                    (screen_x + 4, screen_y + 4, self.tile_size - 8, self.tile_size - 8)
                )
                
                font = pygame.font.Font(None, 28)
                symbol = obj.get_display_char()
                text = font.render(symbol, True, (255, 255, 255))
                text_rect = text.get_rect(center=(screen_x + self.tile_size // 2, screen_y + self.tile_size // 2))
                screen.blit(text, text_rect)


if __name__ == "__main__":
    # –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∞ Level
    level = Level(60, 40)
    print(f"–†–∞–∑–º–µ—Ä: {level.width}x{level.height}")
    print(f"–ö–ª–µ—Ç–∫–∞ (10, 10) –ø—Ä–æ—Ö–æ–¥–∏–º–∞: {level.is_walkable(10, 10)}")
    print(f"–ö–ª–µ—Ç–∫–∞ (0, 0) –ø—Ä–æ—Ö–æ–¥–∏–º–∞: {level.is_walkable(0, 0)}")
