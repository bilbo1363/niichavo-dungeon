"""
–°–∏—Å—Ç–µ–º–∞ —Ç—É–º–∞–Ω–∞ –≤–æ–π–Ω—ã (Fog of War)
"""
import numpy as np
from typing import Set, Tuple


class FogOfWar:
    """–°–∏—Å—Ç–µ–º–∞ —Ç—É–º–∞–Ω–∞ –≤–æ–π–Ω—ã"""
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
    UNEXPLORED = 0  # –ù–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–æ (—á–µ—Ä–Ω—ã–π)
    EXPLORED = 1    # –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–æ —Ä–∞–Ω–µ–µ (—Å–µ—Ä—ã–π)
    VISIBLE = 2     # –í–∏–¥–∏–º–æ —Å–µ–π—á–∞—Å (–ø–æ–ª–Ω—ã–π —Ü–≤–µ—Ç)
    
    def __init__(self, width: int, height: int):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É–º–∞–Ω–∞ –≤–æ–π–Ω—ã
        
        Args:
            width: –®–∏—Ä–∏–Ω–∞ –∫–∞—Ä—Ç—ã
            height: –í—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç—ã
        """
        self.width = width
        self.height = height
        
        # –ö–∞—Ä—Ç–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ (0 = –Ω–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–æ, 1 = –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–æ, 2 = –≤–∏–¥–∏–º–æ)
        self.visibility = np.zeros((height, width), dtype=np.uint8)
        
        # –†–∞–¥–∏—É—Å –æ–±–∑–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞
        self.vision_radius = 5
        
        print(f"üå´Ô∏è  Fog of War —Å–æ–∑–¥–∞–Ω ({width}x{height})")
        
    def update_vision(self, player_x: int, player_y: int, level_tiles: np.ndarray) -> None:
        """
        –û–±–Ω–æ–≤–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –≤–æ–∫—Ä—É–≥ –∏–≥—Ä–æ–∫–∞
        
        Args:
            player_x: –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ X
            player_y: –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ Y
            level_tiles: –¢–∞–π–ª—ã —É—Ä–æ–≤–Ω—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–µ–Ω
        """
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–∏–¥–∏–º–æ—Å—Ç—å (VISIBLE ‚Üí EXPLORED)
        self.visibility[self.visibility == self.VISIBLE] = self.EXPLORED
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–∏–¥–∏–º—É—é –æ–±–ª–∞—Å—Ç—å (–ø—Ä–æ—Å—Ç–æ–π –∫—Ä—É–≥)
        for dy in range(-self.vision_radius, self.vision_radius + 1):
            for dx in range(-self.vision_radius, self.vision_radius + 1):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫—Ä—É–≥)
                distance = (dx * dx + dy * dy) ** 0.5
                if distance > self.vision_radius:
                    continue
                    
                x = player_x + dx
                y = player_y + dy
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
                if x < 0 or x >= self.width or y < 0 or y >= self.height:
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º line of sight (—É–ø—Ä–æ—â–µ–Ω–Ω–æ - –±–µ–∑ ray casting –ø–æ–∫–∞)
                if self._has_line_of_sight(player_x, player_y, x, y, level_tiles):
                    self.visibility[y, x] = self.VISIBLE
                    
    def _has_line_of_sight(
        self, 
        x0: int, 
        y0: int, 
        x1: int, 
        y1: int, 
        level_tiles: np.ndarray
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—è–º–æ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
        
        Args:
            x0, y0: –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
            x1, y1: –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞
            level_tiles: –¢–∞–π–ª—ã —É—Ä–æ–≤–Ω—è
            
        Returns:
            True –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä—è–º–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å
        """
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π ray casting –ø–æ–∑–∂–µ
        if 0 <= x1 < self.width and 0 <= y1 < self.height:
            # –ï—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ - —Å—Ç–µ–Ω–∞, –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë
            return True
        return False
        
    def is_visible(self, x: int, y: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–∏–¥–∏–º–∞ –ª–∏ –∫–ª–µ—Ç–∫–∞ —Å–µ–π—á–∞—Å
        
        Args:
            x, y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            
        Returns:
            True –µ—Å–ª–∏ –≤–∏–¥–∏–º–∞
        """
        if x < 0 or x >= self.width or y < 0 or y >= self.height:
            return False
        return self.visibility[y, x] == self.VISIBLE
        
    def is_explored(self, x: int, y: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∞ –ª–∏ –∫–ª–µ—Ç–∫–∞
        
        Args:
            x, y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            
        Returns:
            True –µ—Å–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∞ (—Ö–æ—Ç—è –±—ã —Ä–∞–∑ –±—ã–ª–∞ –≤–∏–¥–Ω–∞)
        """
        if x < 0 or x >= self.width or y < 0 or y >= self.height:
            return False
        return self.visibility[y, x] >= self.EXPLORED
        
    def get_visibility(self, x: int, y: int) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–ª–µ—Ç–∫–∏
        
        Args:
            x, y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            
        Returns:
            –£—Ä–æ–≤–µ–Ω—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ (0, 1, –∏–ª–∏ 2)
        """
        if x < 0 or x >= self.width or y < 0 or y >= self.height:
            return self.UNEXPLORED
        return self.visibility[y, x]
        
    def reveal_all(self) -> None:
        """–û—Ç–∫—Ä—ã—Ç—å –≤—Å—é –∫–∞—Ä—Ç—É (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
        self.visibility.fill(self.VISIBLE)
        
    def reset(self) -> None:
        """–°–±—Ä–æ—Å–∏—Ç—å –≤—Å—é –≤–∏–¥–∏–º–æ—Å—Ç—å"""
        self.visibility.fill(self.UNEXPLORED)


if __name__ == "__main__":
    # –¢–µ—Å—Ç FogOfWar
    fog = FogOfWar(60, 40)
    print(f"–†–∞–∑–º–µ—Ä: {fog.width}x{fog.height}")
    print(f"–†–∞–¥–∏—É—Å –æ–±–∑–æ—Ä–∞: {fog.vision_radius}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–∞–π–ª—ã
    test_tiles = np.zeros((40, 60), dtype=np.uint8)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
    fog.update_vision(30, 20, test_tiles)
    
    print(f"–ö–ª–µ—Ç–∫–∞ (30, 20) –≤–∏–¥–∏–º–∞: {fog.is_visible(30, 20)}")
    print(f"–ö–ª–µ—Ç–∫–∞ (0, 0) –≤–∏–¥–∏–º–∞: {fog.is_visible(0, 0)}")
