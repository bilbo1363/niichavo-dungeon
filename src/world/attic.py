"""
–ß–µ—Ä–¥–∞–∫ - —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è
"""
import numpy as np
import pygame
from typing import Tuple, Optional
from .storage import Storage


class Attic:
    """–ö–ª–∞—Å—Å —á–µ—Ä–¥–∞–∫–∞ (—Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è)"""
    
    # –¢–∏–ø—ã —Ç–∞–π–ª–æ–≤
    TILE_FLOOR = 0
    TILE_WALL = 1
    TILE_ENTRANCE = 2  # –í—Ö–æ–¥ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ
    TILE_STORAGE = 3   # –•—Ä–∞–Ω–∏–ª–∏—â–µ
    
    # –¶–≤–µ—Ç–∞
    COLOR_FLOOR = (139, 90, 43)      # –î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ø–æ–ª
    COLOR_WALL = (101, 67, 33)       # –î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ —Å—Ç–µ–Ω—ã
    COLOR_ENTRANCE = (200, 50, 50)   # –ö—Ä–∞—Å–Ω—ã–π –ª—é–∫
    COLOR_STORAGE = (150, 150, 50)   # –ñ–µ–ª—Ç—ã–π —Å—É–Ω–¥—É–∫
    
    def __init__(self, width: int = 30, height: int = 20):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–¥–∞–∫–∞
        
        Args:
            width: –®–∏—Ä–∏–Ω–∞ —á–µ—Ä–¥–∞–∫–∞
            height: –í—ã—Å–æ—Ç–∞ —á–µ—Ä–¥–∞–∫–∞
        """
        self.width = width
        self.height = height
        self.tile_size = 32
        
        # –°–æ–∑–¥–∞—ë–º —Å–µ—Ç–∫—É —á–µ—Ä–¥–∞–∫–∞
        self.tiles = np.zeros((height, width), dtype=np.uint8)
        
        # –ü–æ–∑–∏—Ü–∏–∏
        self.entrance_pos: Optional[Tuple[int, int]] = None  # –í—Ö–æ–¥ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ
        self.storage_pos: Optional[Tuple[int, int]] = None   # –•—Ä–∞–Ω–∏–ª–∏—â–µ
        self.spawn_pos: Optional[Tuple[int, int]] = None     # –¢–æ—á–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ (—Å—É–Ω–¥—É–∫)
        self.storage = Storage(max_slots=50)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–¥–∞–∫
        self._generate()
        
        print(f"üè† –ß–µ—Ä–¥–∞–∫ —Å–æ–∑–¥–∞–Ω: {width}x{height}")
        
    def _generate(self) -> None:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–¥–∞–∫–∞"""
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–æ–º
        self.tiles.fill(self.TILE_FLOOR)
        
        # –°–æ–∑–¥–∞—ë–º —Å—Ç–µ–Ω—ã –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É
        self.tiles[0, :] = self.TILE_WALL
        self.tiles[-1, :] = self.TILE_WALL
        self.tiles[:, 0] = self.TILE_WALL
        self.tiles[:, -1] = self.TILE_WALL
        
        # –í—Ö–æ–¥ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ (–ª—é–∫ –≤ —Ü–µ–Ω—Ç—Ä–µ)
        entrance_x = self.width // 2
        entrance_y = self.height // 2 + 3
        self.tiles[entrance_y, entrance_x] = self.TILE_ENTRANCE
        self.entrance_pos = (entrance_x, entrance_y)
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ (—Å—É–Ω–¥—É–∫ –≤ —É–≥–ª—É)
        storage_x = self.width - 3
        storage_y = 2
        self.tiles[storage_y, storage_x] = self.TILE_STORAGE
        self.storage_pos = (storage_x, storage_y)
        
        # –¢–æ—á–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ (–ø–µ—Ä–µ–¥ –ª—é–∫–æ–º)
        self.spawn_pos = (entrance_x, entrance_y - 2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (—Å—Ç–æ–ª–±—ã)
        for x in [5, self.width - 6]:
            for y in [5, self.height - 6]:
                if 0 < x < self.width - 1 and 0 < y < self.height - 1:
                    self.tiles[y, x] = self.TILE_WALL
                    
        print(f"   –í—Ö–æ–¥ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ: {self.entrance_pos}")
        print(f"   –•—Ä–∞–Ω–∏–ª–∏—â–µ: {self.storage_pos}")
        print(f"   –¢–æ—á–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è: {self.spawn_pos}")
        
    def is_walkable(self, x: int, y: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –∫–ª–µ—Ç–∫—É
        
        Args:
            x: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
            y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
            
        Returns:
            True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏
        """
        if x < 0 or x >= self.width or y < 0 or y >= self.height:
            return False
            
        tile = self.tiles[y, x]
        return tile in [self.TILE_FLOOR, self.TILE_ENTRANCE, self.TILE_STORAGE]
        
    def get_tile(self, x: int, y: int) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø —Ç–∞–π–ª–∞
        
        Args:
            x: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
            y: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
            
        Returns:
            –¢–∏–ø —Ç–∞–π–ª–∞
        """
        if x < 0 or x >= self.width or y < 0 or y >= self.height:
            return self.TILE_WALL
        return self.tiles[y, x]
        
    def render(self, screen: pygame.Surface, camera_x: int = 0, camera_y: int = 0) -> None:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —á–µ—Ä–¥–∞–∫–∞
        
        Args:
            screen: –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            camera_x: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ X
            camera_y: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ Y
        """
        screen_width, screen_height = screen.get_size()
        
        start_x = max(0, camera_x // self.tile_size)
        start_y = max(0, camera_y // self.tile_size)
        end_x = min(self.width, (camera_x + screen_width) // self.tile_size + 1)
        end_y = min(self.height, (camera_y + screen_height) // self.tile_size + 1)
        
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–∞–π–ª—ã
        for y in range(start_y, end_y):
            for x in range(start_x, end_x):
                tile_type = self.tiles[y, x]
                
                screen_x = x * self.tile_size - camera_x
                screen_y = y * self.tile_size - camera_y
                
                # –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç
                if tile_type == self.TILE_WALL:
                    color = self.COLOR_WALL
                elif tile_type == self.TILE_ENTRANCE:
                    color = self.COLOR_ENTRANCE
                elif tile_type == self.TILE_STORAGE:
                    color = self.COLOR_STORAGE
                else:
                    color = self.COLOR_FLOOR
                    
                # –†–∏—Å—É–µ–º —Ç–∞–π–ª
                pygame.draw.rect(
                    screen,
                    color,
                    (screen_x, screen_y, self.tile_size, self.tile_size)
                )
                
                # –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É
                pygame.draw.rect(
                    screen,
                    (30, 30, 30),
                    (screen_x, screen_y, self.tile_size, self.tile_size),
                    1
                )
                
        # –†–∏—Å—É–µ–º –∏–∫–æ–Ω–∫–∏
        self._render_icons(screen, camera_x, camera_y)
        
    def _render_icons(self, screen: pygame.Surface, camera_x: int, camera_y: int) -> None:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–∫–æ–Ω–æ–∫ –Ω–∞ —á–µ—Ä–¥–∞–∫–µ
        
        Args:
            screen: –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            camera_x: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ X
            camera_y: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ Y
        """
        # –ò–∫–æ–Ω–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ (—Å—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑)
        if self.entrance_pos:
            ent_x, ent_y = self.entrance_pos
            screen_x = ent_x * self.tile_size - camera_x + self.tile_size // 2
            screen_y = ent_y * self.tile_size - camera_y + self.tile_size // 2
            
            # –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –≤–Ω–∏–∑
            points = [
                (screen_x, screen_y + 10),      # –ù–∏–∑
                (screen_x - 8, screen_y - 10),  # –í–µ—Ä—Ö-–ª–µ–≤–æ
                (screen_x + 8, screen_y - 10)   # –í–µ—Ä—Ö-–ø—Ä–∞–≤–æ
            ]
            pygame.draw.polygon(screen, (255, 255, 255), points)
            
        # –ò–∫–æ–Ω–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (—Å—É–Ω–¥—É–∫)
        if self.storage_pos:
            stor_x, stor_y = self.storage_pos
            screen_x = stor_x * self.tile_size - camera_x
            screen_y = stor_y * self.tile_size - camera_y
            
            # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å—É–Ω–¥—É–∫
            pygame.draw.rect(
                screen,
                (101, 67, 33),
                (screen_x + 6, screen_y + 10, 20, 14)
            )
            pygame.draw.rect(
                screen,
                (139, 90, 43),
                (screen_x + 6, screen_y + 6, 20, 8)
            )
            # –ó–∞–º–æ–∫
            pygame.draw.circle(
                screen,
                (255, 215, 0),
                (screen_x + 16, screen_y + 16),
                3
            )


if __name__ == "__main__":
    # –¢–µ—Å—Ç —á–µ—Ä–¥–∞–∫–∞
    attic = Attic()
    print(f"–†–∞–∑–º–µ—Ä: {attic.width}x{attic.height}")
    print(f"–ö–ª–µ—Ç–∫–∞ (15, 10) –ø—Ä–æ—Ö–æ–¥–∏–º–∞: {attic.is_walkable(15, 10)}")
    print(f"–ö–ª–µ—Ç–∫–∞ (0, 0) –ø—Ä–æ—Ö–æ–¥–∏–º–∞: {attic.is_walkable(0, 0)}")
