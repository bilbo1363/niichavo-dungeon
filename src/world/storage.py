"""
–°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –Ω–∞ —á–µ—Ä–¥–∞–∫–µ
"""
from typing import List
from ..items.inventory import InventorySlot
from ..items.item import Item


class Storage:
    """–•—Ä–∞–Ω–∏–ª–∏—â–µ (—Å—É–Ω–¥—É–∫ –Ω–∞ —á–µ—Ä–¥–∞–∫–µ)"""
    
    def __init__(self, max_slots: int = 50):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        
        Args:
            max_slots: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤
        """
        self.max_slots = max_slots
        self.slots: List[InventorySlot] = [InventorySlot() for _ in range(max_slots)]
        
        print(f"üì¶ –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–∑–¥–∞–Ω–æ: {max_slots} —Å–ª–æ—Ç–æ–≤")
        
    def add_item(self, item: Item, quantity: int = 1) -> bool:
        """
        –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        
        Args:
            item: –ü—Ä–µ–¥–º–µ—Ç
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            
        Returns:
            True –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        remaining = quantity
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ø–∫–∏
        if item.stackable:
            for slot in self.slots:
                if not slot.is_empty() and slot.item.id == item.id:
                    added = slot.add(item, remaining)
                    remaining -= added
                    if remaining <= 0:
                        print(f"‚úÖ –í —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {item.name} x{quantity}")
                        return True
                        
        # –ó–∞—Ç–µ–º –∏—â–µ–º –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã
        for slot in self.slots:
            if slot.is_empty():
                added = slot.add(item, remaining)
                remaining -= added
                if remaining <= 0:
                    print(f"‚úÖ –í —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {item.name} x{quantity}")
                    return True
                    
        if remaining < quantity:
            print(f"‚ö†Ô∏è  –î–æ–±–∞–≤–ª–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ: {item.name} x{quantity - remaining}")
            return False
        else:
            print(f"‚ùå –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª–Ω–æ!")
            return False
            
    def remove_item(self, slot_index: int, quantity: int = 1) -> tuple[Item, int]:
        """
        –í–∑—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        
        Args:
            slot_index: –ò–Ω–¥–µ–∫—Å —Å–ª–æ—Ç–∞
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            
        Returns:
            (–ø—Ä–µ–¥–º–µ—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
        """
        if slot_index < 0 or slot_index >= self.max_slots:
            return None, 0
            
        slot = self.slots[slot_index]
        if slot.is_empty():
            return None, 0
            
        item = slot.item
        removed = slot.remove(quantity)
        
        if removed > 0:
            print(f"‚úÖ –í–∑—è—Ç–æ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {item.name} x{removed}")
            
        return item, removed
        
    def get_item_count(self, item_id: str) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        
        Args:
            item_id: ID –ø—Ä–µ–¥–º–µ—Ç–∞
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        """
        count = 0
        for slot in self.slots:
            if not slot.is_empty() and slot.item.id == item_id:
                count += slot.quantity
        return count
        
    def print_storage(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        print("\nüì¶ –•–†–ê–ù–ò–õ–ò–©–ï (–°–£–ù–î–£–ö):")
        
        has_items = False
        for i, slot in enumerate(self.slots):
            if not slot.is_empty():
                has_items = True
                quantity_str = f" x{slot.quantity}" if slot.quantity > 1 else ""
                print(f"  [{i}] {slot.item.name}{quantity_str}")
                
        if not has_items:
            print("  (–ø—É—Å—Ç–æ)")
            
    def get_used_slots(self) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
        """
        return sum(1 for slot in self.slots if not slot.is_empty())


if __name__ == "__main__":
    # –¢–µ—Å—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    from ..items.item import ItemDatabase
    
    db = ItemDatabase()
    storage = Storage(max_slots=20)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
    storage.add_item(db.get_item("crowbar"))
    storage.add_item(db.get_item("medkit"), 10)
    storage.add_item(db.get_item("coffee"), 5)
    
    # –í—ã–≤–æ–¥–∏–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    storage.print_storage()
    
    print(f"\n–ó–∞–Ω—è—Ç–æ —Å–ª–æ—Ç–æ–≤: {storage.get_used_slots()}/{storage.max_slots}")
