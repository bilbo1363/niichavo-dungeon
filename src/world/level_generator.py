"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω–µ–π —Å –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º seed
"""
import numpy as np
import hashlib
import random
from typing import List, Tuple, Optional
from .level import Level
from .floor_state import FloorStateManager
from .room_types import RoomType, get_random_room_type, get_room_template
from .obstacles import ObstacleGenerator, Obstacle
from .traps import TrapGenerator, Trap
from .special_rooms import SpecialRoomGenerator, SpecialRoomType, SpecialRoom
from .loot_tables import LootTableGenerator, LootSpot, LootPlacement, LootRarity
from .lore_system import LoreGenerator, Note
from .biomes import BiomeManager, BiomeDecorator
from .containers import Container, ContainerType


class Room:
    """–ö–ª–∞—Å—Å –∫–æ–º–Ω–∞—Ç—ã"""
    
    def __init__(
        self, 
        x: int, 
        y: int, 
        width: int, 
        height: int,
        room_type: RoomType = RoomType.NORMAL
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–Ω–∞—Ç—ã
        
        Args:
            x: –ü–æ–∑–∏—Ü–∏—è X (–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
            y: –ü–æ–∑–∏—Ü–∏—è Y (–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
            width: –®–∏—Ä–∏–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã
            height: –í—ã—Å–æ—Ç–∞ –∫–æ–º–Ω–∞—Ç—ã
            room_type: –¢–∏–ø –∫–æ–º–Ω–∞—Ç—ã
        """
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.room_type = room_type
        self.obstacles: List[Obstacle] = []
        self.is_special = False
        
    @property
    def center(self) -> Tuple[int, int]:
        """–¶–µ–Ω—Ç—Ä –∫–æ–º–Ω–∞—Ç—ã"""
        return (self.x + self.width // 2, self.y + self.height // 2)
        
    def intersects(self, other: 'Room') -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å –¥—Ä—É–≥–æ–π –∫–æ–º–Ω–∞—Ç–æ–π
        
        Args:
            other: –î—Ä—É–≥–∞—è –∫–æ–º–Ω–∞—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ –∫–æ–º–Ω–∞—Ç—ã –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è
        """
        return (self.x < other.x + other.width and
                self.x + self.width > other.x and
                self.y < other.y + other.height and
                self.y + self.height > other.y)


class LevelGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω–µ–π"""
    
    def __init__(self, game_id: str = "default"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        
        Args:
            game_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–≥—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ seed
        """
        self.game_id = game_id
        self.floor_state_manager = FloorStateManager()
        
        print(f"üé≤ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω (game_id: {game_id})")
        
    def generate_seed(self, floor: int) -> int:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ seed –¥–ª—è —ç—Ç–∞–∂–∞
        
        Args:
            floor: –ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞
            
        Returns:
            Seed –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        # –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π seed –Ω–∞ –æ—Å–Ω–æ–≤–µ game_id –∏ –Ω–æ–º–µ—Ä–∞ —ç—Ç–∞–∂–∞
        data = f"{self.game_id}_{floor}".encode()
        hash_obj = hashlib.sha256(data)
        seed = int.from_bytes(hash_obj.digest()[:4], 'big')
        return seed
        
    def generate(self, floor: int, width: int = 60, height: int = 40) -> Level:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è
        
        Args:
            floor: –ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞
            width: –®–∏—Ä–∏–Ω–∞ —É—Ä–æ–≤–Ω—è
            height: –í—ã—Å–æ—Ç–∞ —É—Ä–æ–≤–Ω—è
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º seed
        seed = self.generate_seed(floor)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç—Ç–∞–∂–∞
        floor_state = self.floor_state_manager.get_or_create_floor_state(floor, seed)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —ç—Ç–∞–∂
        if floor_state.is_stabilized:
            print(f"\nüîí –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —ç—Ç–∞–∂–∞ {floor}")
            return self._load_stabilized_floor(floor_state, width, height)
        
        # –ï—Å–ª–∏ –Ω–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –°–õ–£–ß–ê–ô–ù–û (–±–µ–∑ seed!)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        import time
        random_seed = int(time.time() * 1000) % 2**32
        np.random.seed(random_seed)
        random.seed(random_seed)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∏–æ–º –¥–ª—è —ç—Ç–∞–∂–∞
        biome = BiomeManager.get_biome_for_floor(floor)
        
        print(f"\nüèóÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç—Ç–∞–∂–∞ {floor} (—Å–ª—É—á–∞–π–Ω–∞—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞, seed: {random_seed})")
        print(f"   üé® –ë–∏–æ–º: {biome.name} - {biome.description}")
        print(f"   ‚ö†Ô∏è  –≠—Ç–∞–∂ –ù–ï —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ!")
        
        # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —É—Ä–æ–≤–µ–Ω—å —Å –Ω–æ–º–µ—Ä–æ–º —ç—Ç–∞–∂–∞ (–¥–ª—è –±–∏–æ–º–∞)
        level = Level(width, height, floor_number=floor)
        level.tiles.fill(Level.TILE_WALL)  # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–µ–Ω–∞–º–∏
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–Ω–∞—Ç—ã (BSP –∞–ª–≥–æ—Ä–∏—Ç–º)
        rooms = self._generate_rooms_bsp(width, height, floor)
        
        # –í—ã—Ä–µ–∑–∞–µ–º –∫–æ–º–Ω–∞—Ç—ã –≤ —É—Ä–æ–≤–Ω–µ
        for room in rooms:
            self._carve_room(level, room)
            
        # –°–æ–µ–¥–∏–Ω—è–µ–º –∫–æ–º–Ω–∞—Ç—ã –∫–æ—Ä–∏–¥–æ—Ä–∞–º–∏
        self._connect_rooms(level, rooms)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–Ω–∞—Ç—ã
        self._generate_obstacles(rooms, floor)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —É—Ä–æ–≤–µ–Ω—å
        all_obstacles = []
        for room in rooms:
            all_obstacles.extend(room.obstacles)
        level.obstacles = all_obstacles
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–æ–≤—É—à–∫–∏ –¥–ª—è —ç—Ç–∞–∂–∞
        traps = TrapGenerator.generate_traps_for_floor(rooms, floor)
        level.traps = traps
        print(f"   ü™§ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ª–æ–≤—É—à–µ–∫: {len(traps)}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–æ–±—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        special_rooms = self._generate_special_rooms(rooms, floor)
        if special_rooms:
            print(f"   ‚ú® –û—Å–æ–±—ã—Ö –∫–æ–º–Ω–∞—Ç: {len(special_rooms)}")
            for sr in special_rooms:
                print(f"      - {sr.get_description()}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Å—Ç–∞ –¥–ª—è –ª—É—Ç–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)
        loot_spots = LootTableGenerator.generate_loot_spots(rooms, floor, special_rooms)
        print(f"   üéÅ –ú–µ—Å—Ç —Å –ª—É—Ç–æ–º: {len(loot_spots)}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∫–∏ –∏ –ª–æ—Ä
        notes = LoreGenerator.generate_notes_for_floor(rooms, floor, special_rooms)
        level.notes = notes
        print(f"   üìú –ó–∞–ø–∏—Å–æ–∫: {len(notes)}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (–¥–æ—Å–∫–∏ –∏ –∫–æ—Å—Ç–∏)
        from .interactive_objects import InteractiveObjectManager
        walkable_tiles = []
        for room in rooms:
            for x in range(room.x + 1, room.x + room.width - 1):
                for y in range(room.y + 1, room.y + room.height - 1):
                    if level.tiles[y, x] == Level.TILE_FLOOR:
                        walkable_tiles.append((x, y))
        
        interactive_objects = InteractiveObjectManager.generate_objects_for_floor(
            floor, width, height, walkable_tiles
        )
        level.interactive_objects = interactive_objects
        print(f"   üìã –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {len(interactive_objects)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –±–∏–æ–º–∞
        BiomeDecorator.add_biome_decorations(level, rooms, floor)
        print(f"   üé® –î–µ–∫–æ—Ä–∞—Ü–∏–∏ –±–∏–æ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ö–æ–¥ –∏ –≤—ã—Ö–æ–¥
        if len(rooms) > 0:
            # –í—Ö–æ–¥ –≤ –ø–µ—Ä–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ
            entrance_room = rooms[0]
            level.entrance_pos = entrance_room.center
            
            # –í—ã—Ö–æ–¥ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–Ω–∞—Ç–µ
            exit_room = rooms[-1]
            level.exit_pos = exit_room.center
            
            # –°–ø–∞–≤–Ω–∏–º —Ä—É–Ω—É —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –≤ —Å–ª—É—á–∞–π–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ (–Ω–µ –ø–µ—Ä–≤–∞—è –∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è)
            if len(rooms) > 2:
                rune_room_idx = random.randint(1, len(rooms) - 2)
                rune_room = rooms[rune_room_idx]
                rune_x, rune_y = rune_room.center
                level.rune_manager.spawn_stability_rune(rune_x, rune_y)
                
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Å—Ç–∞ –¥–ª—è –ª—É—Ç–∞ (LootSpots)
            loot_spots = LootTableGenerator.generate_loot_spots(rooms, floor, special_rooms)
            print(f"   üíé –ú–µ—Å—Ç –¥–ª—è –ª—É—Ç–∞: {len(loot_spots)}")
            
            # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ LootSpots
            self._generate_loot_from_spots(level, loot_spots, floor)
            
            # –°–ø–∞–≤–Ω–∏–º –≤—Ä–∞–≥–æ–≤
            level.enemy_spawner.spawn_enemies(level, floor)
            
            # –°–ø–∞–≤–Ω–∏–º –∑–∞–≥–∞–¥–∫—É –û–î–ò–ù –†–ê–ó –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if not floor_state.riddle_spawned and len(rooms) > 0:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–æ–º–Ω–∞—Ç—É (–Ω–µ –ø–µ—Ä–≤–∞—è –∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è)
                if len(rooms) > 2:
                    riddle_room_idx = random.randint(1, len(rooms) - 2)
                    riddle_room = rooms[riddle_room_idx]
                    riddle_x, riddle_y = riddle_room.center
                    level.riddle_manager.spawn_riddle(riddle_x, riddle_y, floor)
                    floor_state.riddle_spawned = True
                    floor_state.riddle_positions.append((riddle_x, riddle_y))
                    print(f"   ‚ùì –ó–∞–≥–∞–¥–∫–∞ –∑–∞—Å–ø–∞–≤–Ω–µ–Ω–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç—Ç–∞–∂–∞ –Ω–∞ ({riddle_x}, {riddle_y})")
            
        print(f"‚úÖ –≠—Ç–∞–∂ {floor} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {len(rooms)} –∫–æ–º–Ω–∞—Ç")
        
        return level
        
    def _load_stabilized_floor(
        self, 
        floor_state, 
        width: int, 
        height: int
    ) -> Level:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç—Ç–∞–∂
        
        Args:
            floor_state: –°–æ—Å—Ç–æ—è–Ω–∏–µ —ç—Ç–∞–∂–∞
            width: –®–∏—Ä–∏–Ω–∞ —É—Ä–æ–≤–Ω—è
            height: –í—ã—Å–æ—Ç–∞ —É—Ä–æ–≤–Ω—è
            
        Returns:
            –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        """
        saved_data = floor_state.get_saved_data()
        
        if saved_data is None:
            print("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —ç—Ç–∞–∂–∞")
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ –∫–∞–∫ fallback
            return self.generate(floor_state.floor_number, width, height)
            
        # –°–æ–∑–¥–∞—ë–º —É—Ä–æ–≤–µ–Ω—å —Å –Ω–æ–º–µ—Ä–æ–º —ç—Ç–∞–∂–∞ (–¥–ª—è –±–∏–æ–º–∞)
        level = Level(width, height, floor_number=floor_state.floor_number)
        level.tiles = saved_data['tiles'].copy()
        level.entrance_pos = saved_data['entrance_pos']
        level.exit_pos = saved_data['exit_pos']
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fog of war
        if saved_data['fog_of_war'] is not None:
            level.fog_of_war.visibility = saved_data['fog_of_war'].copy()
            print(f"   üå´Ô∏è  –†–∞–∑–≤–µ–¥–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–∞–¥–∫–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        if 'riddle_positions' in saved_data and saved_data['riddle_positions']:
            for riddle_x, riddle_y in saved_data['riddle_positions']:
                level.riddle_manager.spawn_riddle(riddle_x, riddle_y, floor_state.floor_number)
            print(f"   ‚ùì –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–≥–∞–¥–æ–∫: {len(saved_data['riddle_positions'])}")
        
        print(f"‚úÖ –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç—Ç–∞–∂ {floor_state.floor_number} –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        return level
        
    def _generate_rooms_bsp(
        self, 
        width: int, 
        height: int, 
        floor: int
    ) -> List[Room]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–Ω–∞—Ç —Å –ø–æ–º–æ—â—å—é BSP (Binary Space Partitioning)
        
        Args:
            width: –®–∏—Ä–∏–Ω–∞ —É—Ä–æ–≤–Ω—è
            height: –í—ã—Å–æ—Ç–∞ —É—Ä–æ–≤–Ω—è
            floor: –ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞ (–≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
        """
        rooms = []
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —ç—Ç–∞–∂–∞
        num_rooms = min(5 + floor // 2, 15)  # –û—Ç 5 –¥–æ 15 –∫–æ–º–Ω–∞—Ç
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—ã
        for _ in range(num_rooms * 3):  # –ë–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            # –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã
            room_width = random.randint(5, 12)
            room_height = random.randint(5, 10)
            
            # –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
            x = random.randint(1, width - room_width - 1)
            y = random.randint(1, height - room_height - 1)
            
            # –°–æ–∑–¥–∞—ë–º –∫–æ–º–Ω–∞—Ç—É
            new_room = Room(x, y, room_width, room_height)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
            if not any(new_room.intersects(other) for other in rooms):
                rooms.append(new_room)
                
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ - –≤—ã—Ö–æ–¥–∏–º
            if len(rooms) >= num_rooms:
                break
                
        return rooms
        
    def _carve_room(self, level: Level, room: Room) -> None:
        """
        –í—ã—Ä–µ–∑–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –≤ —É—Ä–æ–≤–Ω–µ
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å
            room: –ö–æ–º–Ω–∞—Ç–∞
        """
        for y in range(room.y, room.y + room.height):
            for x in range(room.x, room.x + room.width):
                if 0 <= x < level.width and 0 <= y < level.height:
                    level.tiles[y, x] = Level.TILE_FLOOR
                    
    def _connect_rooms(self, level: Level, rooms: List[Room]) -> None:
        """
        –°–æ–µ–¥–∏–Ω–∏—Ç—å –∫–æ–º–Ω–∞—Ç—ã –∫–æ—Ä–∏–¥–æ—Ä–∞–º–∏
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å
            rooms: –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
        """
        # –°–æ–µ–¥–∏–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–Ω–∞—Ç—É —Å–æ —Å–ª–µ–¥—É—é—â–µ–π
        for i in range(len(rooms) - 1):
            room1 = rooms[i]
            room2 = rooms[i + 1]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—Ç—Ä—ã –∫–æ–º–Ω–∞—Ç
            x1, y1 = room1.center
            x2, y2 = room2.center
            
            # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º: —Å–Ω–∞—á–∞–ª–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å –∏–ª–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å
            if random.random() < 0.5:
                # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å, –ø–æ—Ç–æ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å
                self._carve_h_corridor(level, x1, x2, y1)
                self._carve_v_corridor(level, y1, y2, x2)
            else:
                # –í–µ—Ä—Ç–∏–∫–∞–ª—å, –ø–æ—Ç–æ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å
                self._carve_v_corridor(level, y1, y2, x1)
                self._carve_h_corridor(level, x1, x2, y2)
                
    def _carve_h_corridor(self, level: Level, x1: int, x2: int, y: int) -> None:
        """
        –í—ã—Ä–µ–∑–∞—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –∫–æ—Ä–∏–¥–æ—Ä
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å
            x1: –ù–∞—á–∞–ª—å–Ω–∞—è X
            x2: –ö–æ–Ω–µ—á–Ω–∞—è X
            y: Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
        """
        for x in range(min(x1, x2), max(x1, x2) + 1):
            if 0 <= x < level.width and 0 <= y < level.height:
                level.tiles[y, x] = Level.TILE_FLOOR
                
    def _carve_v_corridor(self, level: Level, y1: int, y2: int, x: int) -> None:
        """
        –í—ã—Ä–µ–∑–∞—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –∫–æ—Ä–∏–¥–æ—Ä
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å
            y1: –ù–∞—á–∞–ª—å–Ω–∞—è Y
            y2: –ö–æ–Ω–µ—á–Ω–∞—è Y
            x: X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
        """
        for y in range(min(y1, y2), max(y1, y2) + 1):
            if 0 <= x < level.width and 0 <= y < level.height:
                level.tiles[y, x] = Level.TILE_FLOOR
    
    def _generate_obstacles(self, rooms: List[Room], floor: int) -> None:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –¥–ª—è –∫–æ–º–Ω–∞—Ç
        
        Args:
            rooms: –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
            floor: –ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞
        """
        total_obstacles = 0
        
        for room in rooms:
            # –ù–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –≤ –ø–µ—Ä–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ (–≤—Ö–æ–¥)
            if room == rooms[0]:
                continue
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
            obstacles = ObstacleGenerator.generate_obstacles_for_room(
                room.x, room.y, room.width, room.height, floor
            )
            room.obstacles = obstacles
            total_obstacles += len(obstacles)
        
        print(f"   üóø –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π: {total_obstacles}")
    
    def _generate_special_rooms(
        self, 
        rooms: List[Room], 
        floor: int
    ) -> List[SpecialRoom]:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–æ–±—ã—Ö –∫–æ–º–Ω–∞—Ç
        
        Args:
            rooms: –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
            floor: –ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ—Å–æ–±—ã—Ö –∫–æ–º–Ω–∞—Ç
        """
        special_rooms = []
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–º–Ω–∞—Ç—É
        if len(rooms) < 3:
            return special_rooms
        
        available_rooms = rooms[1:-1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –æ—Å–æ–±–æ–π –∫–æ–º–Ω–∞—Ç—ã
        for room_type in SpecialRoomType:
            if SpecialRoomGenerator.should_generate_special_room(floor, room_type):
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
                if not available_rooms:
                    break
                
                room = random.choice(available_rooms)
                special_room = SpecialRoomGenerator.create_special_room(room_type, room)
                
                if special_room:
                    special_rooms.append(special_room)
                    room.is_special = True
                    available_rooms.remove(room)  # –£–±–∏—Ä–∞–µ–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        
        return special_rooms
    
    def _generate_loot_from_spots(self, level: Level, loot_spots: List[LootSpot], floor: int) -> None:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ LootSpots
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å
            loot_spots: –°–ø–∏—Å–æ–∫ –º–µ—Å—Ç –¥–ª—è –ª—É—Ç–∞
            floor: –ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞
        """
        for loot_spot in loot_spots:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–æ—Å–æ–±–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            if loot_spot.placement == LootPlacement.CHEST:
                # –ó–æ–ª–æ—Ç–æ–π —Å—É–Ω–¥—É–∫ –¥–ª—è —Ä–µ–¥–∫–æ–≥–æ –ª—É—Ç–∞
                if loot_spot.rarity in [LootRarity.EPIC, LootRarity.LEGENDARY]:
                    container_type = ContainerType.GOLDEN_CHEST
                else:
                    container_type = ContainerType.CHEST
                    
            elif loot_spot.placement == LootPlacement.HIDDEN:
                container_type = ContainerType.HIDDEN_STASH
                
            elif loot_spot.placement == LootPlacement.CORPSE:
                container_type = ContainerType.CORPSE
                
            elif loot_spot.placement == LootPlacement.TRAPPED:
                # –ó–∞ –ª–æ–≤—É—à–∫–æ–π - –æ–±—ã—á–Ω–æ —Å—É–Ω–¥—É–∫
                container_type = ContainerType.CHEST
                
            else:  # FLOOR
                # –ù–∞ –ø–æ–ª—É - –ø—Ä–æ—Å—Ç–æ —Å–ø–∞–≤–Ω–∏–º –ø—Ä–µ–¥–º–µ—Ç—ã –±–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                for _ in range(loot_spot.item_count):
                    level.item_spawner.spawn_random_items(level, floor, 1)
                continue
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            items = []
            for _ in range(loot_spot.item_count):
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç —Å —É—á—ë—Ç–æ–º —Ä–µ–¥–∫–æ—Å—Ç–∏
                item = self._get_random_item_by_rarity(loot_spot.rarity, floor)
                if item:
                    items.append(item)
            
            # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            container = Container(loot_spot.x, loot_spot.y, container_type, items)
            level.containers.append(container)
        
        print(f"   üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {len(level.containers)}")
    
    def _get_random_item_by_rarity(self, rarity: 'LootRarity', floor: int):
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç —Å —É—á—ë—Ç–æ–º —Ä–µ–¥–∫–æ—Å—Ç–∏
        
        Args:
            rarity: –ñ–µ–ª–∞–µ–º–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å
            floor: –ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞
            
        Returns:
            –ü—Ä–µ–¥–º–µ—Ç –∏–ª–∏ None
        """
        from ..items.item import ItemDatabase, ItemRarity
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Ä–µ–¥–∫–æ—Å—Ç–∏ –ª—É—Ç–∞ –Ω–∞ —Ä–µ–¥–∫–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        rarity_map = {
            LootRarity.COMMON: ItemRarity.COMMON,
            LootRarity.UNCOMMON: ItemRarity.UNCOMMON,
            LootRarity.RARE: ItemRarity.RARE,
            LootRarity.EPIC: ItemRarity.EPIC,
            LootRarity.LEGENDARY: ItemRarity.LEGENDARY,
        }
        
        item_rarity = rarity_map.get(rarity, ItemRarity.COMMON)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        item_db = ItemDatabase()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
        matching_items = [
            item_id for item_id, item in item_db.items.items()
            if item.rarity == item_rarity
        ]
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω—É–∂–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏, –±–µ—Ä—ë–º –ª—é–±–æ–π
        if not matching_items:
            matching_items = list(item_db.items.keys())
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
        if matching_items:
            item_id = random.choice(matching_items)
            return item_db.get_item(item_id)
        
        return None


if __name__ == "__main__":
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    generator = LevelGenerator("test_game")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–∂–µ–π
    for floor in [1, 5, 10]:
        level = generator.generate(floor)
        print(f"–≠—Ç–∞–∂ {floor}: {level.width}x{level.height}")
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏:")
    seed1 = generator.generate_seed(1)
    seed2 = generator.generate_seed(1)
    print(f"Seed –¥–ª—è —ç—Ç–∞–∂–∞ 1 (–ø–µ—Ä–≤—ã–π —Ä–∞–∑): {seed1}")
    print(f"Seed –¥–ª—è —ç—Ç–∞–∂–∞ 1 (–≤—Ç–æ—Ä–æ–π —Ä–∞–∑): {seed2}")
    print(f"–û–¥–∏–Ω–∞–∫–æ–≤—ã–µ: {seed1 == seed2}")
