"""
–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã
"""
import pygame
import os
from typing import Optional
from ..entities.player import Player
from ..world.level import Level
from ..world.level_generator import LevelGenerator
from ..world.attic import Attic
from ..input.input_manager import InputManager
from ..save.save_manager import SaveManager, GameStateSerializer
from ..ui.inventory_ui import InventoryUI
from ..ui.storage_ui import StorageUI
from ..ui.riddle_ui import RiddleUI
from ..ui.message_log import MessageLog
from ..ui.main_menu import MainMenu
from ..combat.combat_system import CombatSystem
from ..graphics.sprite_manager import SpriteManager
from ..graphics.particle_system import ParticleSystem
from ..story.story_manager import StoryManager
from ..story.dialogue_system import DialogueUI


class Game:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã"""
    
    def __init__(self, width: int = 1200, height: int = 800, fullscreen: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
        
        Args:
            width: –®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞
            height: –í—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞
            fullscreen: –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pygame
        pygame.init()
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫–Ω–∞
        self.fullscreen = fullscreen
        self.windowed_size = (width, height)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        display_info = pygame.display.Info()
        self.screen_width = display_info.current_w
        self.screen_height = display_info.current_h
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if fullscreen:
            self.width = self.screen_width
            self.height = self.screen_height
            self.screen = pygame.display.set_mode((self.width, self.height), pygame.FULLSCREEN)
        else:
            self.width = width
            self.height = height
            self.screen = pygame.display.set_mode((width, height), pygame.RESIZABLE)
        
        pygame.display.set_caption("–ü–æ–¥–∑–µ–º–µ–ª—å–µ –ù–ò–ò–ß–ê–í–û")
        
        # –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
        self.clock = pygame.time.Clock()
        self.running = False
        self.fps = 60
        
        # FPS —Å—á—ë—Ç—á–∏–∫
        self.show_fps = False  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ FPS (F3 –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è)
        self.fps_update_time = 0.0  # –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è FPS
        self.fps_frames = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.current_fps = 0  # –¢–µ–∫—É—â–∏–π FPS –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        # –°–æ–∑–¥–∞—ë–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω–µ–π
        self.level_generator = LevelGenerator(game_id="game_001")
        
        # –°–æ–∑–¥–∞—ë–º —á–µ—Ä–¥–∞–∫
        self.attic = Attic()
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
        self.save_manager = SaveManager()
        self.serializer = GameStateSerializer()
        
        # UI (–∏—Å–ø–æ–ª—å–∑—É–µ–º self.width –∏ self.height - –æ–Ω–∏ —É–∂–µ —É—á–∏—Ç—ã–≤–∞—é—Ç fullscreen)
        self.inventory_ui = InventoryUI(self.width, self.height)
        self.storage_ui = StorageUI(self.width, self.height)
        self.riddle_ui = RiddleUI(self.width, self.height)
        self.message_log = MessageLog(self.width, self.height)
        
        from ..ui.settings_ui import SettingsUI
        self.settings_ui = SettingsUI(self.width, self.height)
        
        from ..ui.splash_screen import SplashScreen
        self.splash_screen = SplashScreen(self.width, self.height)
        
        self.show_inventory_ui = False
        self.show_storage_ui = False
        self.show_riddle_ui = False
        self.show_settings_ui = False
        self.show_splash = True  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—Å—Ç–∞–≤–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.current_riddle = None
        
        # –ë–æ–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
        self.combat = CombatSystem()
        
        # –ì—Ä–∞—Ñ–∏–∫–∞
        self.sprite_manager = SpriteManager()
        self.particle_system = ParticleSystem()
        
        # –ó–≤—É–∫
        from ..audio.sound_manager import SoundManager
        self.sound_manager = SoundManager()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–ª–±—ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–≤—É–∫–æ–≤–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É
        self.settings_ui.on_music_toggle = self._on_music_toggle
        self.settings_ui.on_sfx_toggle = self._on_sfx_toggle
        self.settings_ui.on_music_volume_change = self._on_music_volume_change
        self.settings_ui.on_sfx_volume_change = self._on_sfx_volume_change
        self.settings_ui.on_back = self._on_settings_back
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É —á–∞—Å—Ç–∏—Ü –∏ –ª–æ–≥ –∫ –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
        self.combat.particle_system = self.particle_system
        self.combat.message_log = self.message_log
        
        # –°—é–∂–µ—Ç
        self.story_manager = StoryManager()
        self.dialogue_ui = DialogueUI(width, height)
        self.current_dialogue = None
        self.show_dialogue = False
        
        # –§–ª–∞–≥ —Å–º–µ—Ä—Ç–∏ –∏–≥—Ä–æ–∫–∞
        self.player_dead = False
        self.death_timer = 0.0
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.main_menu = MainMenu(width, height)
        self.show_main_menu = True
        self.current_profile = None
        
        # –î–∏–∞–ª–æ–≥ –≤—ã—Ö–æ–¥–∞
        self.show_exit_dialog = False
        
        # –¢—Ä–µ–∫–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
        self.session_start_time = 0.0
        self.total_play_time = 0.0
        
        # –¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è: "attic" –∏–ª–∏ –Ω–æ–º–µ—Ä —ç—Ç–∞–∂–∞ (1-20)
        self.current_location = "attic"
        self.current_floor = 0  # 0 = —á–µ—Ä–¥–∞–∫, 1-20 = —ç—Ç–∞–∂–∏ –ø–æ–¥–∑–µ–º–µ–ª—å—è
        
        # –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å (None –µ—Å–ª–∏ –Ω–∞ —á–µ—Ä–¥–∞–∫–µ)
        self.current_level = None
        
        # –°–æ–∑–¥–∞—ë–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ —á–µ—Ä–¥–∞–∫–µ
        if self.attic.spawn_pos:
            spawn_x, spawn_y = self.attic.spawn_pos
            self.player = Player(x=spawn_x, y=spawn_y)
        else:
            self.player = Player(x=15, y=10)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º message_log –¥–ª—è –∏–≥—Ä–æ–∫–∞
        self.player.message_log = self.message_log
            
        self.input_manager = InputManager()
        
        # –ö–∞–º–µ—Ä–∞
        self.camera_x = 0
        self.camera_y = 0
        
        # –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        self.can_transition = True
        
        # –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–æ–∫ –ù–ò–ò–ß–ê–í–û
        self.current_note = None  # –¢–µ–∫—É—â–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º–∞—è –∑–∞–ø–∏—Å–∫–∞
        self.show_note = False  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∫—É
        
        # –°–∏—Å—Ç–µ–º–∞ –¥–≤–∏–∂–µ–Ω–∏—è
        self.move_timer = 0.0
        self.move_delay = 0.08  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã) - –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        self.run_move_delay = 0.05  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –±–µ–≥–µ (–±—ã—Å—Ç—Ä–µ–µ)
        self.run_endurance_cost = 2  # –°—Ç–æ–∏–º–æ—Å—Ç—å –±–µ–≥–∞ –≤ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏ –∑–∞ —à–∞–≥
        
        print("‚úÖ –ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        print(f"üì∫ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {width}x{height}")
        print(f"‚öôÔ∏è  FPS: {self.fps}")
        print(f"üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: WASD –∏–ª–∏ —Å—Ç—Ä–µ–ª–∫–∏ (—É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è)")
        print(f"üèÉ –ë–µ–≥: Shift + –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—Ç—Ä–∞—Ç–∏—Ç –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å)")
        
    def run(self) -> None:
        """–ì–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª"""
        self.running = True
        print("\nüéÆ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
        print("–ù–∞–∂–º–∏—Ç–µ ESC –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É (—Ç–µ–º–∞ —á–µ—Ä–¥–∞–∫–∞ –µ—Å–ª–∏ –Ω–∞ —á–µ—Ä–¥–∞–∫–µ)
        if self.current_location == "attic":
            self.sound_manager.start_music("attic")
        else:
            self.sound_manager.start_music()
        
        while self.running:
            # Delta time
            dt = self.clock.tick(self.fps) / 1000.0
            
            # –û–±–Ω–æ–≤–ª—è–µ–º FPS —Å—á—ë—Ç—á–∏–∫
            self._update_fps_counter(dt)
            
            # –ï—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—Å—Ç–∞–≤–∫—É - —Ç–æ–ª—å–∫–æ –µ—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            if self.show_splash:
                events = pygame.event.get()
                for event in events:
                    if event.type == pygame.QUIT:
                        self.running = False
                    self.splash_screen.handle_input(event)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—Å—Ç–∞–≤–∫—É
                if self.splash_screen.update(dt):
                    self.show_splash = False
                
                # –†–∏—Å—É–µ–º –∑–∞—Å—Ç–∞–≤–∫—É
                self.splash_screen.render(self.screen)
                pygame.display.flip()
                continue
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
            self._handle_events()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –æ—Ç–∫—Ä—ã—Ç UI)
            if not self.show_main_menu and not self._any_ui_open():
                self._update(dt)
                # –¢—Ä–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–≥—Ä—ã
                if self.current_profile:
                    self.total_play_time += dt
            
            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞
            self._render()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
            pygame.display.flip()
            
        self._quit()
        
    def _handle_events(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
        events = pygame.event.get()
        
        # –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≤–≤–æ–¥–∞ –ü–ï–†–ï–î –≤—Å–µ–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç "–∑–∞–ª–∏–ø–∞–Ω–∏–µ" –∫–ª–∞–≤–∏—à –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏/–∑–∞–∫—Ä—ã—Ç–∏–∏ UI
        self.input_manager.update(events)
        
        # –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –∏—Ö –≤–≤–æ–¥ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!)
        if self.show_settings_ui:
            for event in events:
                if event.type == pygame.QUIT:
                    self.running = False
                self.settings_ui.handle_input(event)
            return
        
        # –ï—Å–ª–∏ –ø–æ–∫–∞–∑–∞–Ω–∞ –∑–∞–ø–∏—Å–∫–∞ –ù–ò–ò–ß–ê–í–û - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë –∑–∞–∫—Ä—ã—Ç–∏–µ
        if self.show_note:
            for event in events:
                if event.type == pygame.QUIT:
                    self.running = False
                if event.type == pygame.KEYDOWN:
                    if event.key in [pygame.K_SPACE, pygame.K_RETURN, pygame.K_ESCAPE]:
                        self.show_note = False
            return
        
        # –ï—Å–ª–∏ –ø–æ–∫–∞–∑–∞–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –≤–≤–æ–¥
        if self.show_main_menu:
            for event in events:
                if event.type == pygame.QUIT:
                    self.running = False
                result = self.main_menu.handle_event(event)
                if result:
                    action, profile_name = result
                    if action == "quit":
                        self.running = False
                    elif action == "start":
                        self.current_profile = profile_name
                        self.show_main_menu = False
                        self._start_game_with_profile(profile_name)
                    elif action == "settings":
                        self.show_settings_ui = True
            return
        
        # –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –≤–≤–æ–¥
        if self.show_inventory_ui:
            for event in events:
                if event.type == pygame.QUIT:
                    self.running = False
                if self.inventory_ui.handle_input(event, self.player.inventory, self.player):
                    self.show_inventory_ui = False
                    self.inventory_ui.selected_slot = None
            return
        
        # –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –≤–≤–æ–¥
        if self.show_storage_ui:
            for event in events:
                if event.type == pygame.QUIT:
                    self.running = False
                if self.storage_ui.handle_input(event, self.player.inventory, self.attic.storage):
                    self.show_storage_ui = False
                    self.storage_ui.selected_inventory_slot = None
                    self.storage_ui.selected_storage_slot = None
            return
        
        # –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –∑–∞–≥–∞–¥–∫–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë –≤–≤–æ–¥
        if self.show_riddle_ui and self.current_riddle:
            for event in events:
                if event.type == pygame.QUIT:
                    self.running = False
                close, answer = self.riddle_ui.handle_input(event, self.current_riddle)
                if close:
                    if answer:
                        self.current_riddle.check_answer(answer)
                    self.show_riddle_ui = False
                    self.current_riddle = None
            return
        
        # –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç –¥–∏–∞–ª–æ–≥ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –≤–≤–æ–¥
        if self.show_dialogue and self.current_dialogue:
            for event in events:
                if event.type == pygame.QUIT:
                    self.running = False
                if self.dialogue_ui.handle_input(event, self.current_dialogue):
                    self.show_dialogue = False
                    self.current_dialogue = None
            return
        
        # –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç –¥–∏–∞–ª–æ–≥ –≤—ã—Ö–æ–¥–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
        if self.show_exit_dialog:
            for event in events:
                if event.type == pygame.QUIT:
                    self.running = False
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_y:
                        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ - –≤—ã—Ö–æ–¥ –≤ –º–µ–Ω—é
                        self.show_exit_dialog = False
                        self.show_main_menu = True
                        self.message_log.clear()
                    elif event.key == pygame.K_n or event.key == pygame.K_ESCAPE:
                        # –û—Ç–º–µ–Ω–µ–Ω–æ
                        self.show_exit_dialog = False
            return
        
        for event in events:
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞
            if event.type == pygame.QUIT:
                self.running = False
                
            # –ù–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞
                    self.show_exit_dialog = True
                    
                # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (F11)
                if event.key == pygame.K_F11:
                    self._toggle_fullscreen()
                
                # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è FPS (F3)
                if event.key == pygame.K_F3:
                    self.show_fps = not self.show_fps
                    
                # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ (E) - –ø—Ä–µ–¥–º–µ—Ç—ã, –∑–∞–≥–∞–¥–∫–∏, –∑–∞–ø–∏—Å–∫–∏
                if event.key == pygame.K_e:
                    self._handle_e_interaction()
                    
                # –ê—Ç–∞–∫–∞ (–ø—Ä–æ–±–µ–ª –∏–ª–∏ A)
                if event.key in [pygame.K_SPACE, pygame.K_a]:
                    if self.current_location != "attic":
                        self.combat.player_attack(self.player, self.current_level)
                    
                # –ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (F5)
                if event.key == pygame.K_F5:
                    self._quick_save()
                    
                # –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (F9)
                if event.key == pygame.K_F9:
                    self._quick_load()
                    
                # –û—Ç–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (I)
                if event.key == pygame.K_i:
                    self.show_inventory_ui = not self.show_inventory_ui
                    if not self.show_inventory_ui:
                        self.inventory_ui.selected_slot = None
                    
                # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º (T)
                if event.key == pygame.K_t:
                    self._open_storage_ui()
                    
    def _update(self, dt: float) -> None:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
        
        Args:
            dt: Delta time (–≤—Ä–µ–º—è –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –¥–≤–∏–∂–µ–Ω–∏—è
        self.move_timer += dt
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –¥–≤–∏–∂–µ–Ω–∏—è
        dx, dy = self.input_manager.get_movement_input()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∂–∞—Ç –ª–∏ Shift (–±–µ–≥)
        keys = pygame.key.get_pressed()
        is_running = keys[pygame.K_LSHIFT] or keys[pygame.K_RSHIFT]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–≤–∏–∂–µ–Ω–∏—è
        current_delay = self.run_move_delay if is_running else self.move_delay
        
        # –î–≤–∏–≥–∞–µ–º –∏–≥—Ä–æ–∫–∞ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
        if (dx != 0 or dy != 0) and self.move_timer >= current_delay:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –¥–ª—è –±–µ–≥–∞
            can_run = True
            if is_running:
                if self.player.stats.endurance >= self.run_endurance_cost:
                    self.player.stats.endurance -= self.run_endurance_cost
                else:
                    can_run = False
                    is_running = False  # –ù–µ –º–æ–∂–µ–º –±–µ–∂–∞—Ç—å - –∏–¥—ë–º –æ–±—ã—á–Ω—ã–º —à–∞–≥–æ–º
            
            # –î–≤–∏–≥–∞–µ–º –∏–≥—Ä–æ–∫–∞
            if self.current_location == "attic":
                moved = self.player.move(dx, dy, self.attic)
            else:
                moved = self.player.move(dx, dy, self.current_level)
            
            # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —Å–¥–≤–∏–Ω—É–ª—Å—è
            if moved:
                self.can_transition = True
                self.move_timer = 0.0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ –¥–≤–∏–∂–µ–Ω–∏—è
                
                # –ó–≤—É–∫ —à–∞–≥–∞
                self.sound_manager.play_sound("step")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—ã–ª –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ –±–µ–≥–æ–º (–¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ª–æ–≤—É—à–µ–∫)
                self._last_move_was_running = is_running
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≤—É—à–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ)
                if self.current_location != "attic":
                    self._check_traps()
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏
        self._check_location_transition()
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ (–ø–µ—Ä–µ–¥–∞—ë–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–≤–∏–∂–µ–Ω–∏–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏)
        is_moving = (dx != 0 or dy != 0) and self.move_timer >= current_delay
        self.player.update(dt, is_moving)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–æ–µ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        self.combat.update(dt)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É —á–∞—Å—Ç–∏—Ü
        self.particle_system.update(dt)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.message_log.update(dt)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±–æ—Ä —Ä—É–Ω –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ)
        if self.current_location != "attic":
            self._check_rune_collection()
            self._check_dropped_items()
            self._show_interaction_hints()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–∞–≥–æ–≤
            attacking_enemies = self.current_level.enemy_spawner.update_all(
                dt, 
                self.player.x, 
                self.player.y, 
                self.current_level
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ç–∞–∫–∏ –≤—Ä–∞–≥–æ–≤
            for enemy in attacking_enemies:
                self.combat.enemy_attack(enemy, self.player)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—Ä—Ç—å –∏–≥—Ä–æ–∫–∞
            if self.player.stats.health <= 0 and not self.player_dead:
                self._handle_player_death()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—É–º–∞–Ω –≤–æ–π–Ω—ã
            self.current_level.update_fog_of_war(self.player.x, self.player.y)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä —Å–º–µ—Ä—Ç–∏
        if self.player_dead:
            self.death_timer += dt
            if self.death_timer >= 3.0:  # 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —Å–º–µ—Ä—Ç–∏
                self._respawn_player()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—é–∂–µ—Ç–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
        self._check_story_triggers()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–º–µ—Ä—É (—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ –∏–≥—Ä–æ–∫–µ)
        self._update_camera()
        
    def _update_camera(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä—ã"""
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É –Ω–∞ –∏–≥—Ä–æ–∫–µ
        player_screen_x = self.player.x * self.player.size
        player_screen_y = self.player.y * self.player.size
        
        self.camera_x = player_screen_x - self.width // 2
        self.camera_y = player_screen_y - self.height // 2
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ —É—Ä–æ–≤–Ω—è
        if self.current_location == "attic":
            max_camera_x = self.attic.width * self.attic.tile_size - self.width
            max_camera_y = self.attic.height * self.attic.tile_size - self.height
        else:
            max_camera_x = self.current_level.width * self.current_level.tile_size - self.width
            max_camera_y = self.current_level.height * self.current_level.tile_size - self.height
        
        self.camera_x = max(0, min(self.camera_x, max_camera_x))
        self.camera_y = max(0, min(self.camera_y, max_camera_y))
        
    def _check_location_transition(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É –ª–æ–∫–∞—Ü–∏—è–º–∏"""
        if not self.can_transition:
            return
            
        player_pos = (self.player.x, self.player.y)
        
        # –ù–∞ —á–µ—Ä–¥–∞–∫–µ
        if self.current_location == "attic":
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ
            if self.attic.entrance_pos and player_pos == self.attic.entrance_pos:
                self.message_log.info("–°–ø—É—Å–∫–∞–µ—Ç–µ—Å—å –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ...")
                self._go_to_floor(1)
                self.can_transition = False
                
        # –í –ø–æ–¥–∑–µ–º–µ–ª—å–µ
        else:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ (–≤–Ω–∏–∑)
            if self.current_level.exit_pos and player_pos == self.current_level.exit_pos:
                self.message_log.info(f"–°–ø—É—Å–∫–∞–µ—Ç–µ—Å—å –Ω–∞ —ç—Ç–∞–∂ {self.current_floor + 1}...")
                self._go_to_floor(self.current_floor + 1)
                self.can_transition = False
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞ (–≤–≤–µ—Ä—Ö)
            elif self.current_level.entrance_pos and player_pos == self.current_level.entrance_pos:
                if self.current_floor > 1:
                    self.message_log.info(f"–ü–æ–¥–Ω–∏–º–∞–µ—Ç–µ—Å—å –Ω–∞ —ç—Ç–∞–∂ {self.current_floor - 1}...")
                    self._go_to_floor(self.current_floor - 1)
                else:
                    # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —á–µ—Ä–¥–∞–∫
                    self.message_log.success("–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ—Å—å –Ω–∞ —á–µ—Ä–¥–∞–∫")
                    self._go_to_attic()
                self.can_transition = False
                
    def _go_to_floor(self, floor: int) -> None:
        """
        –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥–æ–π —ç—Ç–∞–∂
        
        Args:
            floor: –ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞
        """
        if floor < 1 or floor > 20:
            print(f"‚ö†Ô∏è  –≠—Ç–∞–∂ {floor} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        old_location = self.current_location
        going_down = old_location == "attic" or (isinstance(old_location, int) and floor > old_location)
        
        print(f"\nüö™ –ü–µ—Ä–µ—Ö–æ–¥: {old_location} ‚Üí —ç—Ç–∞–∂ {floor}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é
        self.current_location = floor
        self.current_floor = floor
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å (–∑–∞–≥–∞–¥–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ level_generator)
        self.current_level = self.level_generator.generate(floor)
        
        # –ú–µ–Ω—è–µ–º –º—É–∑—ã–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∏–æ–º–∞
        biome = self._get_biome_for_floor(floor)
        self.sound_manager.start_music(biome)
        
        # –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞
        if going_down:  # –°–ø—É—Å–∫–∞–µ–º—Å—è –≤–Ω–∏–∑
            # –ü–æ—è–≤–ª—è–µ–º—Å—è –Ω–∞ –≤—Ö–æ–¥–µ (–∑–µ–ª—ë–Ω—ã–π –∫—Ä—É–≥) –Ω–æ–≤–æ–≥–æ —ç—Ç–∞–∂–∞
            if self.current_level.entrance_pos:
                self.player.x, self.player.y = self.current_level.entrance_pos
                print(f"‚Üì –°–ø—É—Å—Ç–∏–ª–∏—Å—å –Ω–∞ —ç—Ç–∞–∂ {floor} (–ø–æ—è–≤–∏–ª–∏—Å—å —É –≤—Ö–æ–¥–∞)")
        else:  # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –≤–≤–µ—Ä—Ö
            # –ü–æ—è–≤–ª—è–µ–º—Å—è –Ω–∞ –≤—ã—Ö–æ–¥–µ (–∫—Ä–∞—Å–Ω—ã–π –∫—Ä—É–≥) –Ω–æ–≤–æ–≥–æ —ç—Ç–∞–∂–∞
            if self.current_level.exit_pos:
                self.player.x, self.player.y = self.current_level.exit_pos
                print(f"‚Üë –ü–æ–¥–Ω—è–ª–∏—Å—å –Ω–∞ —ç—Ç–∞–∂ {floor} (–ø–æ—è–≤–∏–ª–∏—Å—å —É –≤—ã—Ö–æ–¥–∞)")
                
    def _go_to_attic(self) -> None:
        """–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —á–µ—Ä–¥–∞–∫"""
        print(f"\nüè† –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —á–µ—Ä–¥–∞–∫")
        
        self.current_location = "attic"
        self.current_floor = 0
        self.current_level = None
        
        # –ú–µ–Ω—è–µ–º –º—É–∑—ã–∫—É –Ω–∞ —Ç–µ–º—É —á–µ—Ä–¥–∞–∫–∞
        self.sound_manager.start_music("attic")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ –±–∞–∑—É
        old_endurance = self.player.stats.endurance
        self.player.stats.endurance = self.player.stats.max_endurance
        restored = self.player.stats.endurance - old_endurance
        
        if restored > 0:
            print(f"üí™ –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: +{restored}")
            self.message_log.info(f"–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: +{restored}")
        
        # –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ —á–µ—Ä–¥–∞–∫ (—É –ª—é–∫–∞)
        if self.attic.entrance_pos:
            self.player.x, self.player.y = self.attic.entrance_pos
            print(f"‚Üë –í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ —á–µ—Ä–¥–∞–∫")
                
    def _test_stabilize_floor(self) -> None:
        """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–∞–∂–∞ (SPACE) - –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        print("\n‚ö†Ô∏è  [–¢–ï–°–¢] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è —ç—Ç–∞–∂–∞")
        self._stabilize_current_floor()
            
    def _check_rune_collection(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∞ —Ä—É–Ω"""
        collected_runes = self.current_level.rune_manager.check_collection(
            self.player.x, 
            self.player.y
        )
        
        # –ï—Å–ª–∏ —Å–æ–±—Ä–∞–ª–∏ —Ä—É–Ω—É —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ–º —ç—Ç–∞–∂
        for rune in collected_runes:
            from ..items.rune import RuneType
            if rune.rune_type == RuneType.STABILITY:
                # –≠—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü
                effect_x = self.player.x * 32 + 16
                effect_y = self.player.y * 32 + 16
                self.particle_system.emit(effect_x, effect_y, 40, "sparkle")
                
                # –°–æ–æ–±—â–µ–Ω–∏–µ
                self.message_log.success("–°–æ–±—Ä–∞–ª–∏ –†—É–Ω—É —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏!")
                
                print("\nüîÆ –†—É–Ω–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
                self._stabilize_current_floor()
                
    def _stabilize_current_floor(self) -> None:
        """–°—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–∂"""
        floor_state_manager = self.level_generator.floor_state_manager
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
        if floor_state_manager.is_floor_stabilized(self.current_floor):
            return
            
        # –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ–º
        floor_state_manager.stabilize_floor(
            self.current_floor,
            self.current_level.tiles,
            self.current_level.entrance_pos,
            self.current_level.exit_pos,
            self.current_level.fog_of_war.visibility
        )
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–≥–∞–¥–∫—É –Ω–∞ —Å—Ç–µ–Ω–µ –ø–æ—Å–ª–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        self._spawn_riddle_after_stabilization()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        stabilized = floor_state_manager.get_stabilized_count()
        self.message_log.success(f"–≠—Ç–∞–∂ {self.current_floor} —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! ({stabilized}/20)")
        print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏: {stabilized}/20 —ç—Ç–∞–∂–µ–π")
        
        if floor_state_manager.all_floors_stabilized():
            self.message_log.success("–í–°–ï –≠–¢–ê–ñ–ò –°–¢–ê–ë–ò–õ–ò–ó–ò–†–û–í–ê–ù–´!")
            print("üéâ –í–°–ï –≠–¢–ê–ñ–ò –°–¢–ê–ë–ò–õ–ò–ó–ò–†–û–í–ê–ù–´! –ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –≥–ª–∞–≤–Ω—ã–π —Ç–∞–π–Ω–∏–∫!")
            
    def _spawn_riddle_after_stabilization(self) -> None:
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–≥–∞–¥–∫—É –ø–æ—Å–ª–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–∞–∂–∞"""
        floor_state_manager = self.level_generator.floor_state_manager
        floor_state = floor_state_manager.floors.get(self.current_floor)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –ª–∏ —É–∂–µ –∑–∞–≥–∞–¥–∫–∞
        if floor_state and floor_state.riddle_spawned:
            print("‚ö†Ô∏è  –ó–∞–≥–∞–¥–∫–∞ —É–∂–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–∂–µ")
            return
            
        # –ò—â–µ–º —Å—Ç–µ–Ω—É —Ä—è–¥–æ–º —Å –≤—ã—Ö–æ–¥–æ–º –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞–≥–∞–¥–∫–∏
        if self.current_level.exit_pos:
            exit_x, exit_y = self.current_level.exit_pos
            print(f"üîç –ò—â—É —Å—Ç–µ–Ω—É —Ä—è–¥–æ–º —Å –≤—ã—Ö–æ–¥–æ–º ({exit_x}, {exit_y})")
            
            # –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Å—Ç–µ–Ω—É (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫)
            found = False
            for radius in range(1, 10):  # –ò—â–µ–º –≤ —Ä–∞–¥–∏—É—Å–µ –¥–æ 10 –∫–ª–µ—Ç–æ–∫
                if found:
                    break
                    
                for dx in range(-radius, radius + 1):
                    if found:
                        break
                    for dy in range(-radius, radius + 1):
                        if abs(dx) != radius and abs(dy) != radius:
                            continue  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–∏–º–µ—Ç—Ä
                            
                        wall_x = exit_x + dx
                        wall_y = exit_y + dy
                        
                        if self.current_level.get_tile(wall_x, wall_y) == self.current_level.TILE_WALL:
                            # –°–æ–∑–¥–∞—ë–º –∑–∞–≥–∞–¥–∫—É –Ω–∞ —Å—Ç–µ–Ω–µ
                            seed = self.level_generator.generate_seed(self.current_floor) + 1000
                            self.current_level.riddle_manager.spawn_riddle(wall_x, wall_y, seed)
                            
                            # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –∑–∞–≥–∞–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞
                            if floor_state:
                                floor_state.riddle_spawned = True
                                
                            print(f"üìú –ù–∞ —Å—Ç–µ–Ω–µ ({wall_x}, {wall_y}) –ø–æ—è–≤–∏–ª–∞—Å—å –∑–∞–≥–∞–¥–∫–∞!")
                            found = True
                            break
                            
            if not found:
                print("‚ö†Ô∏è  –ù–µ –Ω–∞—à—ë–ª —Å—Ç–µ–Ω—É —Ä—è–¥–æ–º —Å –≤—ã—Ö–æ–¥–æ–º!")
                    
    def _interact_with_riddle(self) -> bool:
        """
        –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∑–∞–≥–∞–¥–∫–æ–π
        
        Returns:
            True –µ—Å–ª–∏ –∑–∞–≥–∞–¥–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
        for dx, dy in [(0, -1), (0, 1), (-1, 0), (1, 0)]:
            check_x = self.player.x + dx
            check_y = self.player.y + dy
            
            riddle = self.current_level.riddle_manager.get_riddle_at(check_x, check_y)
            
            if riddle:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º GUI –∑–∞–≥–∞–¥–∫–∏
                self.current_riddle = riddle
                self.show_riddle_ui = True
                return True
        
        return False
        
    def _quick_save(self) -> None:
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (F5)"""
        # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —á–µ—Ä–¥–∞–∫–µ
        if self.current_location != "attic":
            print("‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ —á–µ—Ä–¥–∞–∫–µ!")
            self.message_log.warning("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —á–µ—Ä–¥–∞–∫–µ!")
            return
        
        if not self.current_profile:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è!")
            return
            
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è {self.current_profile}...")
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        game_data = {
            "player": self.serializer.serialize_player(self.player),
            "current_location": self.current_location,
            "current_floor": self.current_floor,
            "floor_states": self.serializer.serialize_floor_states(
                self.level_generator.floor_state_manager
            ),
            "attic_storage": self._serialize_attic_storage(),
            "story_flags": self.story_manager.story_flags
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è
        profile_dir = f"saves/profiles/{self.current_profile}"
        os.makedirs(profile_dir, exist_ok=True)
        
        save_file = os.path.join(profile_dir, "save.json")
        
        try:
            import json
            with open(save_file, 'w', encoding='utf-8') as f:
                json.dump(game_data, f, ensure_ascii=False, indent=2)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
            self._update_profile_metadata()
            
            print(f"‚úÖ –ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {save_file}")
            self.message_log.success("–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            self.message_log.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
            
    def _quick_load(self) -> None:
        """–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (F9)"""
        if not self.current_profile:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è!")
            return
        
        profile_dir = f"saves/profiles/{self.current_profile}"
        save_file = os.path.join(profile_dir, "save.json")
        self._quick_load_from_file(save_file)
        
    def _quick_load_from_file(self, save_file: str) -> None:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞
        
        Args:
            save_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        print(f"\nüìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ {save_file}...")
        
        if not os.path.exists(save_file):
            print("‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        import json
        with open(save_file, 'r', encoding='utf-8') as f:
            game_data = json.load(f)
        
        if game_data is None:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏!")
            return
            
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞
        self.serializer.deserialize_player(self.player, game_data["player"])
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
        self.current_location = game_data["current_location"]
        self.current_floor = game_data["current_floor"]
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç—Ç–∞–∂–µ–π
        self.serializer.deserialize_floor_states(
            self.level_generator.floor_state_manager,
            game_data["floor_states"]
        )
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞ —á–µ—Ä–¥–∞–∫–µ
        if "attic_storage" in game_data:
            self._deserialize_attic_storage(game_data["attic_storage"])
            print("   üì¶ –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ —Å—é–∂–µ—Ç–∞
        if "story_flags" in game_data:
            self.story_manager.story_flags = game_data["story_flags"]
            print("   üìñ –§–ª–∞–≥–∏ —Å—é–∂–µ—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é
        if self.current_location == "attic":
            self.current_level = None
        else:
            self.current_level = self.level_generator.generate(self.current_floor)
            
        print("‚úÖ –ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        print(f"   –õ–æ–∫–∞—Ü–∏—è: {self.current_location}")
        print(f"   –ó–¥–æ—Ä–æ–≤—å–µ: {self.player.stats.health}/{self.player.stats.max_health}")
        print(f"   –®–∞–≥–æ–≤: {self.player.steps}")
        
    def _show_inventory(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (I)"""
        self.player.inventory.print_inventory()
    
    def _handle_e_interaction(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–ª–∞–≤–∏—à–µ E (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã -> –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã -> –ø—Ä–µ–¥–º–µ—Ç—ã -> –∑–∞–≥–∞–¥–∫–∏ -> –∑–∞–ø–∏—Å–∫–∏)"""
        if self.current_location == "attic":
            return
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (–¥–æ—Å–∫–∏ –∏ –∫–æ—Å—Ç–∏) - –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if self._check_interactive_object():
            return
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        if self._check_container_opening():
            return
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
        if self.current_level.item_spawner.has_item_at(self.player.x, self.player.y):
            self._check_item_pickup()
            return
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–∞–¥–∫–∏
        if self._interact_with_riddle():
            return
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∫–∏
        self._check_note_reading()
        
    def _check_interactive_object(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ (–¥–æ—Å–∫–∏, –∫–æ—Å—Ç–∏)
        
        Returns:
            True –µ—Å–ª–∏ –±—ã–ª–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
        """
        # –ò—â–µ–º –æ–±—ä–µ–∫—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
        for obj in self.current_level.interactive_objects:
            if obj.x == self.player.x and obj.y == self.player.y:
                # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ–º —Å –æ–±—ä–µ–∫—Ç–æ–º
                result = obj.interact()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∫—É
                self.current_note = type('Note', (), {
                    'title': result['note_title'],
                    'text': result['note_text']
                })()
                self.show_note = True
                
                # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Å—Ç–∏ - –≤—ã–¥–∞—ë–º –ª—É—Ç
                if result['type'] == 'skeleton' and result['loot'] and not result['already_used']:
                    self.sound_manager.play_sound("pickup")
                    self.message_log.success(f"‚ò†Ô∏è –û–±—ã—Å–∫–∞–ª–∏ –æ—Å—Ç–∞–Ω–∫–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞")
                    
                    for loot_item in result['loot']:
                        self.message_log.item(f"  + {loot_item}")
                        print(f"  + {loot_item}")
                    
                    # –≠—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü
                    self.particle_system.emit(
                        self.player.x * 32 + 16,
                        self.player.y * 32 + 16,
                        count=15,
                        effect_type="sparkle"
                    )
                elif result['type'] == 'notice_board':
                    self.sound_manager.play_sound("page_turn")
                    self.message_log.info(f"üìã –ü—Ä–æ—á–∏—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∫—É –Ω–∞ –¥–æ—Å–∫–µ")
                
                return True
        
        return False
    
    def _check_container_opening(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        
        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±—ã–ª –æ—Ç–∫—Ä—ã—Ç
        """
        # –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
        for container in self.current_level.containers:
            if container.x == self.player.x and container.y == self.player.y:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (—Ç–∞–π–Ω–∏–∫–∏)
                if not container.is_visible():
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ—Ç–∫—Ä—ã—Ç –ª–∏ —É–∂–µ
                if container.opened:
                    self.message_log.info(f"{container.get_name()} —É–∂–µ –ø—É—Å—Ç")
                    return True
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                items = container.open()
                
                if items:
                    # –ó–≤—É–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—É–Ω–¥—É–∫–∞
                    self.sound_manager.play_sound("chest_open")
                    
                    self.message_log.success(f"üì¶ –û—Ç–∫—Ä—ã–ª–∏ {container.get_name()}!")
                    print(f"\nüì¶ –û—Ç–∫—Ä—ã–ª–∏ {container.get_name()}!")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
                    for item in items:
                        if self.player.inventory.add_item(item):
                            from ..items.item import ItemRarity
                            rarity_names = {
                                ItemRarity.COMMON: "",
                                ItemRarity.UNCOMMON: "–ù–µ–æ–±—ã—á–Ω—ã–π ",
                                ItemRarity.RARE: "–†–µ–¥–∫–∏–π ",
                                ItemRarity.EPIC: "–≠–ø–∏—á–µ—Å–∫–∏–π ",
                                ItemRarity.LEGENDARY: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π "
                            }
                            rarity_prefix = rarity_names.get(item.rarity, "")
                            self.message_log.item(f"  + {rarity_prefix}{item.name}")
                            print(f"  + {rarity_prefix}{item.name}")
                        else:
                            self.message_log.warning("‚ùå –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω!")
                            print("‚ùå –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω!")
                            break
                    
                    # –≠—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü
                    self.particle_system.emit(
                        self.player.x * 32 + 16,
                        self.player.y * 32 + 16,
                        count=20,
                        effect_type="sparkle"
                    )
                else:
                    self.message_log.info(f"{container.get_name()} –ø—É—Å—Ç")
                
                return True
        
        return False
    
    def _check_item_pickup(self) -> None:
        """–ü–æ–¥–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ _handle_e_interaction)"""
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
        item = self.current_level.item_spawner.check_pickup(
            self.player.x,
            self.player.y,
            self.player,
            manual=True  # –ü–æ–¥–±–æ—Ä –ø–æ –∫–ª–∞–≤–∏—à–µ
        )
        
        if item:
            # –ó–≤—É–∫ –ø–æ–¥–±–æ—Ä–∞
            self.sound_manager.play_sound("pickup")
            
            # –≠—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü
            effect_x = self.player.x * 32 + 16
            effect_y = self.player.y * 32 + 16
            self.particle_system.emit(effect_x, effect_y, 15, "sparkle")
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ
            from ..items.item import ItemRarity
            rarity_names = {
                ItemRarity.COMMON: "",
                ItemRarity.UNCOMMON: "–ù–µ–æ–±—ã—á–Ω—ã–π ",
                ItemRarity.RARE: "–†–µ–¥–∫–∏–π ",
                ItemRarity.EPIC: "–≠–ø–∏—á–µ—Å–∫–∏–π ",
                ItemRarity.LEGENDARY: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π "
            }
            rarity_prefix = rarity_names.get(item.rarity, "")
            self.message_log.item(f"–ü–æ–¥–æ–±—Ä–∞–ª–∏: {rarity_prefix}{item.name}")
    
    def _check_note_reading(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–ø–∏—Å–æ–∫ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ _handle_e_interaction)"""
        # –ò—â–µ–º –∑–∞–ø–∏—Å–∫—É –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
        for note in self.current_level.notes:
            if note.x == self.player.x and note.y == self.player.y:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–ø–∏—Å–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
                print(f"\nüìú {note.title}")
                print(f"   {note.content}")
                print()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –ª–æ–≥–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                self.message_log.info(f"üìú {note.title}")
                self.message_log.info(f"   {note.content}")
                
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—É—é
                if not note.read:
                    note.read = True
                
                return
        
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∫–∏ –Ω–µ—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            check_x = self.player.x + dx
            check_y = self.player.y + dy
            
            for note in self.current_level.notes:
                if note.x == check_x and note.y == check_y:
                    self.message_log.info("–ü–æ–¥–æ–π–¥–∏—Ç–µ –±–ª–∏–∂–µ –∫ –∑–∞–ø–∏—Å–∫–µ –∏ –Ω–∞–∂–º–∏—Ç–µ E")
                    return
    
    def _check_dropped_items(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±—Ä–æ—à–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∏—Ö –Ω–∞ –∫–∞—Ä—Ç–µ"""
        if hasattr(self.player, '_dropped_items') and self.player._dropped_items:
            for item, quantity in self.player._dropped_items:
                # –†–∞–∑–º–µ—â–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
                self.current_level.item_spawner.spawn_dropped_item(
                    item,
                    self.player.x,
                    self.player.y,
                    quantity
                )
                
                # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥
                self.message_log.info(f"–í—ã–±—Ä–æ—à–µ–Ω–æ: {item.name} x{quantity}")
            
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–æ—à–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            self.player._dropped_items.clear()
    
    def _check_traps(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≤—É—à–µ–∫ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞"""
        if not self.current_level:
            return
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –ª–æ–≤—É—à–∫–∏ –∏ —Ç–∞–π–Ω–∏–∫–∏ –≤ —Ä–∞–¥–∏—É—Å–µ 2 –∫–ª–µ—Ç–æ–∫
        self._try_detect_nearby_traps()
        self._try_detect_nearby_containers()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–æ–≤—É—à–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ
        for trap in self.current_level.traps:
            if trap.x == self.player.x and trap.y == self.player.y:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ª–æ–≤—É—à–∫—É
                effect = trap.trigger()
                
                if effect["triggered"]:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    self.message_log.warning(f"‚ö†Ô∏è {effect['message']}")
                    print(f"‚ö†Ô∏è {effect['message']}")
                    
                    # –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –∏–≥—Ä–æ–∫—É
                    damage = effect.get("damage", 0)
                    if damage > 0:
                        # –ó–≤—É–∫ —É—Ä–æ–Ω–∞
                        self.sound_manager.play_sound("damage")
                        
                        self.player.take_damage(damage)
                        self.message_log.combat(f"üí• –ü–æ–ª—É—á–µ–Ω–æ {damage} —É—Ä–æ–Ω–∞!")
                        print(f"üí• –ü–æ–ª—É—á–µ–Ω–æ {damage} —É—Ä–æ–Ω–∞! HP: {self.player.stats.health}/{self.player.stats.max_health}")
                    
                    # –°–æ–∑–¥–∞—ë–º —ç—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü
                    from ..world.traps import TrapType
                    if trap.trap_type == TrapType.FIRE:
                        effect_type = "explosion"
                    elif trap.trap_type == TrapType.ICE:
                        effect_type = "sparkle"
                    elif trap.trap_type == TrapType.POISON:
                        effect_type = "smoke"
                    elif trap.trap_type == TrapType.EXPLOSIVE:
                        effect_type = "explosion"
                    else:
                        effect_type = "sparkle"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏—Ü—ã –≤ –ø–æ–∑–∏—Ü–∏–∏ –ª–æ–≤—É—à–∫–∏
                    self.particle_system.emit(
                        self.player.x * 32 + 16,
                        self.player.y * 32 + 16,
                        count=15,
                        effect_type=effect_type
                    )
                    
                    break  # –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ª–æ–≤—É—à–∫–∞ –∑–∞ —Ä–∞–∑
    
    def _try_detect_nearby_traps(self) -> None:
        """–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –ª–æ–≤—É—à–∫–∏ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º"""
        if not self.current_level:
            return
        
        # –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        base_chance = 0.20  # 20%
        
        # –ë–æ–Ω—É—Å –∑–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (–Ω–µ –±–µ–≥)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ –±–µ–≥–æ–º
        is_running = hasattr(self, '_last_move_was_running') and self._last_move_was_running
        if not is_running:
            base_chance += 0.30  # +30% –ø—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏
        
        # –†–∞–¥–∏—É—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è (2 –∫–ª–µ—Ç–∫–∏)
        detection_radius = 2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–æ–≤—É—à–∫–∏ –≤ —Ä–∞–¥–∏—É—Å–µ
        for trap in self.current_level.traps:
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            dx = abs(trap.x - self.player.x)
            dy = abs(trap.y - self.player.y)
            distance = max(dx, dy)  # –ß–µ–±—ã—à—ë–≤—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            
            if distance <= detection_radius:
                # –®–∞–Ω—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º
                distance_penalty = distance * 0.15
                detection_chance = max(0.05, base_chance - distance_penalty)
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å
                if trap.try_detect(detection_chance):
                    # –ó–≤—É–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
                    self.sound_manager.play_sound("discover")
                    
                    self.message_log.info(f"üîç –í—ã –∑–∞–º–µ—Ç–∏–ª–∏ –ª–æ–≤—É—à–∫—É!")
                    print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ª–æ–≤—É—à–∫–∞ –Ω–∞ ({trap.x}, {trap.y})")
    
    def _try_detect_nearby_containers(self) -> None:
        """–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å —Ç–∞–π–Ω–∏–∫–∏ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º"""
        if not self.current_level:
            return
        
        # –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è (—Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ —É –ª–æ–≤—É—à–µ–∫)
        base_chance = 0.20  # 20%
        
        # –ë–æ–Ω—É—Å –∑–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        is_running = hasattr(self, '_last_move_was_running') and self._last_move_was_running
        if not is_running:
            base_chance += 0.30  # +30% –ø—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏
        
        # –†–∞–¥–∏—É—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        detection_radius = 2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≤ —Ä–∞–¥–∏—É—Å–µ
        for container in self.current_level.containers:
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            dx = abs(container.x - self.player.x)
            dy = abs(container.y - self.player.y)
            distance = max(dx, dy)
            
            if distance <= detection_radius:
                # –®–∞–Ω—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º
                distance_penalty = distance * 0.15
                detection_chance = max(0.05, base_chance - distance_penalty)
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å —Ç–∞–π–Ω–∏–∫
                if container.try_discover(detection_chance):
                    # –ó–≤—É–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
                    self.sound_manager.play_sound("discover")
                    
                    self.message_log.info(f"üîç –í—ã –Ω–∞—à–ª–∏ —Ç–∞–π–Ω–∏–∫!")
                    print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–∞–π–Ω–∏–∫ –Ω–∞ ({container.x}, {container.y})")
    
    def _show_interaction_hints(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö –∏ –∑–∞–ø–∏—Å–∫–∞—Ö –ø–æ–¥ –∏–≥—Ä–æ–∫–æ–º"""
        # –°–æ–∑–¥–∞—ë–º –∫–ª—é—á —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        current_pos = (self.player.x, self.player.y)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Ç—Ä–∏–±—É—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not hasattr(self, '_last_hint_pos'):
            self._last_hint_pos = None
        
        # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —Å–Ω–æ–≤–∞
        if self._last_hint_pos == current_pos:
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é
        self._last_hint_pos = current_pos
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        for container in self.current_level.containers:
            if container.x == self.player.x and container.y == self.player.y:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                if not container.is_visible():
                    continue
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
                if container.opened:
                    self.message_log.info(f"{container.get_name()} [–ø—É—Å—Ç]")
                else:
                    self.message_log.info(f"{container.get_name()} (–Ω–∞–∂–º–∏—Ç–µ E)")
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
        for item_spawn in self.current_level.item_spawner.spawned_items:
            if item_spawn.picked_up:
                continue
            
            if item_spawn.x == self.player.x and item_spawn.y == self.player.y:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
                from ..items.item import ItemRarity
                rarity_names = {
                    ItemRarity.COMMON: "",
                    ItemRarity.UNCOMMON: "–ù–µ–æ–±—ã—á–Ω—ã–π ",
                    ItemRarity.RARE: "–†–µ–¥–∫–∏–π ",
                    ItemRarity.EPIC: "–≠–ø–∏—á–µ—Å–∫–∏–π ",
                    ItemRarity.LEGENDARY: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π "
                }
                rarity_prefix = rarity_names.get(item_spawn.item.rarity, "")
                self.message_log.info(f"–ü—Ä–µ–¥–º–µ—Ç: {rarity_prefix}{item_spawn.item.name} (–Ω–∞–∂–º–∏—Ç–µ E)")
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∫–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
        for note in self.current_level.notes:
            if note.x == self.player.x and note.y == self.player.y:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø–∏—Å–∫–∏
                status = " [–ø—Ä–æ—á–∏—Ç–∞–Ω–∞]" if note.read else ""
                self.message_log.info(f"–ó–∞–ø–∏—Å–∫–∞: {note.title}{status} (–Ω–∞–∂–º–∏—Ç–µ E)")
                return
        
    def _open_storage_ui(self) -> None:
        """–û—Ç–∫—Ä—ã—Ç—å GUI —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –Ω–∞ —á–µ—Ä–¥–∞–∫–µ
        if self.current_location != "attic":
            print("‚ùå –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ —á–µ—Ä–¥–∞–∫–µ!")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã —Ä—è–¥–æ–º —Å —Å—É–Ω–¥—É–∫–æ–º
        if self.attic.storage_pos:
            storage_x, storage_y = self.attic.storage_pos
            distance = abs(self.player.x - storage_x) + abs(self.player.y - storage_y)
            
            if distance > 1:
                print("‚ùå –ü–æ–¥–æ–π–¥–∏—Ç–µ –±–ª–∏–∂–µ –∫ —Å—É–Ω–¥—É–∫—É!")
                return
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º GUI
        self.show_storage_ui = True
    
    def _interact_with_storage(self) -> None:
        """–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º (T)"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –Ω–∞ —á–µ—Ä–¥–∞–∫–µ
        if self.current_location != "attic":
            print("‚ùå –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ —á–µ—Ä–¥–∞–∫–µ!")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã —Ä—è–¥–æ–º —Å —Å—É–Ω–¥—É–∫–æ–º
        if self.attic.storage_pos:
            storage_x, storage_y = self.attic.storage_pos
            distance = abs(self.player.x - storage_x) + abs(self.player.y - storage_y)
            
            if distance > 1:
                print("‚ùå –ü–æ–¥–æ–π–¥–∏—Ç–µ –±–ª–∏–∂–µ –∫ —Å—É–Ω–¥—É–∫—É!")
                return
        
        # –¶–∏–∫–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
        while True:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            print("\n" + "="*60)
            print("üì¶ –•–†–ê–ù–ò–õ–ò–©–ï (–°–£–ù–î–£–ö)")
            print("="*60)
            self.attic.storage.print_storage()
            print("\nüéí –í–ê–® –ò–ù–í–ï–ù–¢–ê–†–¨:")
            self.player.inventory.print_inventory()
            print("\n" + "="*60)
            print("–ö–æ–º–∞–Ω–¥—ã:")
            print("  1 - –ü–æ–ª–æ–∂–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ —Å—É–Ω–¥—É–∫")
            print("  2 - –í–∑—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å—É–Ω–¥—É–∫–∞")
            print("  0 - –í—ã–π—Ç–∏")
            print("="*60)
            
            try:
                choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-2): ").strip()
                
                if choice == "0":
                    print("‚úÖ –ó–∞–∫—Ä—ã—Ç–æ")
                    break
                elif choice == "1":
                    # –ü–æ–ª–æ–∂–∏—Ç—å –≤ —Å—É–Ω–¥—É–∫
                    slot = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–∏–ª–∏ Enter –¥–ª—è –æ—Ç–º–µ–Ω—ã): ").strip()
                    if slot:
                        try:
                            self._store_item(int(slot))
                        except ValueError:
                            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞!")
                elif choice == "2":
                    # –í–∑—è—Ç—å –∏–∑ —Å—É–Ω–¥—É–∫–∞
                    slot = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–∏–ª–∏ Enter –¥–ª—è –æ—Ç–º–µ–Ω—ã): ").strip()
                    if slot:
                        try:
                            self._take_item(int(slot))
                        except ValueError:
                            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞!")
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –í–≤–µ–¥–∏—Ç–µ 0, 1 –∏–ª–∏ 2")
                    
            except KeyboardInterrupt:
                print("\n‚úÖ –ó–∞–∫—Ä—ã—Ç–æ")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
    def _store_item(self, inventory_slot: int) -> None:
        """
        –ü–æ–ª–æ–∂–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        
        Args:
            inventory_slot: –ù–æ–º–µ—Ä —Å–ª–æ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        """
        if inventory_slot < 0 or inventory_slot >= self.player.inventory.max_slots:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞!")
            return
            
        slot = self.player.inventory.slots[inventory_slot]
        if slot.is_empty():
            print("‚ùå –°–ª–æ—Ç –ø—É—Å—Ç!")
            return
            
        item = slot.item
        quantity = slot.quantity
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if self.attic.storage.add_item(item, quantity):
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            self.player.inventory.remove_item(item.id, quantity)
            
    def _take_item(self, storage_slot: int) -> None:
        """
        –í–∑—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        
        Args:
            storage_slot: –ù–æ–º–µ—Ä —Å–ª–æ—Ç–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        """
        item, quantity = self.attic.storage.remove_item(storage_slot, 1)
        
        if item:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            self.player.inventory.add_item(item, quantity)
        
    def _render(self) -> None:
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–¥—Ä–∞"""
        # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ (—á–µ—Ä–Ω—ã–π —Ñ–æ–Ω)
        self.screen.fill((0, 0, 0))
        
        # –ï—Å–ª–∏ –ø–æ–∫–∞–∑–∞–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - —Ä–∏—Å—É–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
        if self.show_main_menu:
            self.main_menu.render(self.screen)
            # –ï—Å–ª–∏ –ø–æ–≤–µ—Ä—Ö –º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if self.show_settings_ui:
                self.settings_ui.render(self.screen)
            return
        
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é
        if self.current_location == "attic":
            self.attic.render(self.screen, self.camera_x, self.camera_y)
        else:
            self.current_level.render(self.screen, self.camera_x, self.camera_y)
        
        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞
        self.player.render(self.screen, self.camera_x, self.camera_y)
        
        # HUD (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ)
        self._render_hud()
        
        # –õ–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.message_log.render(self.screen)
        
        # –≠—Ñ—Ñ–µ–∫—Ç—ã –±–æ—è (—á–∏—Å–ª–∞ —É—Ä–æ–Ω–∞)
        self.combat.render_damage_numbers(self.screen, self.camera_x, self.camera_y)
        
        # –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—Ü
        self.particle_system.render(self.screen, self.camera_x, self.camera_y)
        
        # GUI (–ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ)
        if self.player_dead:
            self._render_death_screen()
        elif self.show_note and self.current_note:
            self._render_note()
        elif self.show_exit_dialog:
            self._render_exit_dialog()
        elif self.show_dialogue and self.current_dialogue:
            self.dialogue_ui.render(self.screen, self.current_dialogue)
        elif self.show_inventory_ui:
            self.inventory_ui.render_inventory(self.screen, self.player.inventory)
        elif self.show_storage_ui:
            self.storage_ui.render(self.screen, self.player.inventory, self.attic.storage)
        elif self.show_riddle_ui and self.current_riddle:
            self.riddle_ui.render(self.screen, self.current_riddle)
        
        # FPS —Å—á—ë—Ç—á–∏–∫ (–ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ)
        self._render_fps()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
        pygame.display.flip()
        
    def _render_hud(self) -> None:
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ HUD"""
        font = pygame.font.Font(None, 24)
        
        # –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞
        pos_text = font.render(
            f"–ü–æ–∑–∏—Ü–∏—è: ({self.player.x}, {self.player.y})",
            True,
            (255, 255, 255)
        )
        self.screen.blit(pos_text, (10, 10))
        
        # –ó–¥–æ—Ä–æ–≤—å–µ
        hp_text = font.render(
            f"HP: {self.player.stats.health}/{self.player.stats.max_health}",
            True,
            (255, 0, 0)
        )
        self.screen.blit(hp_text, (10, 35))
        
        # –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å (—Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π –±–µ–≥–∞)
        keys = pygame.key.get_pressed()
        is_running = keys[pygame.K_LSHIFT] or keys[pygame.K_RSHIFT]
        
        stamina_color = (255, 165, 0) if is_running else (0, 255, 255)  # –û—Ä–∞–Ω–∂–µ–≤—ã–π –ø—Ä–∏ –±–µ–≥–µ
        stamina_prefix = "üèÉ " if is_running else ""
        
        stamina_text = font.render(
            f"{stamina_prefix}–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {self.player.stats.endurance}/{self.player.stats.max_endurance}",
            True,
            stamina_color
        )
        self.screen.blit(stamina_text, (10, 60))
        
        # –®–∞–≥–∏
        steps_text = font.render(
            f"–®–∞–≥–æ–≤: {self.player.steps}",
            True,
            (200, 200, 200)
        )
        self.screen.blit(steps_text, (10, 85))
        
        # –õ–æ–∫–∞—Ü–∏—è
        if self.current_location == "attic":
            location_text = "–ß–µ—Ä–¥–∞–∫"
            biome_text = ""
        else:
            location_text = f"–≠—Ç–∞–∂: {self.current_floor}"
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–æ–º–∞
            from src.world.biomes import BiomeManager
            biome = BiomeManager.get_biome_for_floor(self.current_floor)
            biome_text = biome.name
            
        floor_text = font.render(
            location_text,
            True,
            (255, 255, 255)
        )
        self.screen.blit(floor_text, (10, 110))
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–æ–º–∞ (–µ—Å–ª–∏ –Ω–µ –Ω–∞ —á–µ—Ä–¥–∞–∫–µ)
        if biome_text:
            biome_font = pygame.font.Font(None, 20)
            biome_render = biome_font.render(
                f"üìç {biome_text}",
                True,
                (150, 200, 255)  # –ì–æ–ª—É–±–æ–≤–∞—Ç—ã–π —Ü–≤–µ—Ç
            )
            self.screen.blit(biome_render, (10, 135))
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        hint_font = pygame.font.Font(None, 20)
        hint_text = hint_font.render(
            "–ö—Ä–∞—Å–Ω—ã–π –∫—Ä—É–≥ = –í–ù–ò–ó (–≥–ª—É–±–∂–µ), –ó–µ–ª—ë–Ω—ã–π –∫—Ä—É–≥ = –í–í–ï–†–• (–Ω–∞–∑–∞–¥)",
            True,
            (150, 150, 150)
        )
        self.screen.blit(hint_text, (10, self.height - 30))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
        hint2_text = hint_font.render(
            "–≠—Ç–∞–∂ 1 = –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å, –≠—Ç–∞–∂ 20 = —Å–∞–º–æ–µ –¥–Ω–æ –ø–æ–¥–∑–µ–º–µ–ª—å—è",
            True,
            (150, 150, 150)
        )
        self.screen.blit(hint2_text, (10, self.height - 50))
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        if self.current_location != "attic":
            for obj in self.current_level.interactive_objects:
                if obj.x == self.player.x and obj.y == self.player.y:
                    hint_text = hint_font.render(
                        obj.get_interaction_hint(),
                        True,
                        (255, 255, 100)  # –Ø—Ä–∫–∏–π –∂—ë–ª—Ç—ã–π
                    )
                    self.screen.blit(hint_text, (10, self.height - 70))
                    break
        
        # –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
        hint3_text = hint_font.render(
            "SHIFT = –±–µ–≥ | SPACE/A = –∞—Ç–∞–∫–∞ | E = –ø–æ–¥–æ–±—Ä–∞—Ç—å/–∑–∞–≥–∞–¥–∫–∞/–∑–∞–ø–∏—Å–∫–∞ | I = –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å | T = —Å—É–Ω–¥—É–∫",
            True,
            (255, 255, 0)
        )
        self.screen.blit(hint3_text, (10, self.height - 70))
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
        hint4_text = hint_font.render(
            "F5 = —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å (–Ω–∞ —á–µ—Ä–¥–∞–∫–µ) | F9 = –∑–∞–≥—Ä—É–∑–∏—Ç—å | F11 = –ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω",
            True,
            (255, 255, 0)
        )
        self.screen.blit(hint4_text, (10, self.height - 90))
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        hint5_text = hint_font.render(
            "–ü—Ä–µ–¥–º–µ—Ç—ã –ø–æ–¥–±–∏—Ä–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
            True,
            (150, 150, 150)
        )
        self.screen.blit(hint5_text, (10, self.height - 110))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ)
        if self.current_location != "attic":
            stabilized = self.level_generator.floor_state_manager.get_stabilized_count()
            progress_text = font.render(
                f"–°—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {stabilized}/20",
                True,
                (0, 255, 255)
            )
            self.screen.blit(progress_text, (10, 135))
            
            # –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–∂–∞
            is_stabilized = self.level_generator.floor_state_manager.is_floor_stabilized(self.current_floor)
            status_color = (0, 255, 0) if is_stabilized else (255, 100, 100)
            status_text = "–°–¢–ê–ë–ò–õ–ò–ó–ò–†–û–í–ê–ù" if is_stabilized else "–ù–ï –°–¢–ê–ë–ò–õ–ò–ó–ò–†–û–í–ê–ù"
            floor_status = font.render(
                f"–≠—Ç–∞–∂ {self.current_floor}: {status_text}",
                True,
                status_color
            )
            self.screen.blit(floor_status, (10, 160))
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–∞–≥–æ–≤
            alive_enemies = self.current_level.enemy_spawner.get_alive_count()
            enemies_text = font.render(
                f"–í—Ä–∞–≥–æ–≤: {alive_enemies}",
                True,
                (255, 100, 100)
            )
            self.screen.blit(enemies_text, (10, 185))
        
    def _render_exit_dialog(self) -> None:
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –≤—ã—Ö–æ–¥–∞"""
        # –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞
        overlay = pygame.Surface((self.width, self.height))
        overlay.set_alpha(200)
        overlay.fill((0, 0, 0))
        self.screen.blit(overlay, (0, 0))
        
        # –û–∫–Ω–æ –¥–∏–∞–ª–æ–≥–∞
        box_width = 700
        box_height = 300
        box_x = (self.width - box_width) // 2
        box_y = (self.height - box_height) // 2
        
        pygame.draw.rect(self.screen, (40, 40, 50), (box_x, box_y, box_width, box_height))
        pygame.draw.rect(self.screen, (255, 200, 100), (box_x, box_y, box_width, box_height), 3)
        
        # –¢–µ–∫—Å—Ç
        title_font = pygame.font.Font(None, 48)
        text_font = pygame.font.Font(None, 32)
        hint_font = pygame.font.Font(None, 28)
        
        title = title_font.render("–í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é?", True, (255, 200, 100))
        title_rect = title.get_rect(center=(self.width // 2, box_y + 70))
        self.screen.blit(title, title_rect)
        
        warning = text_font.render("–ù–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç —É—Ç–µ—Ä—è–Ω!", True, (255, 100, 100))
        warning_rect = warning.get_rect(center=(self.width // 2, box_y + 140))
        self.screen.blit(warning, warning_rect)
        
        hint = hint_font.render("Y - –î–∞, –≤—ã–π—Ç–∏ | N/ESC - –ù–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", True, (200, 200, 200))
        hint_rect = hint.get_rect(center=(self.width // 2, box_y + 220))
        self.screen.blit(hint, hint_rect)
    
    def _render_note(self) -> None:
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∫–∏ –ù–ò–ò–ß–ê–í–û"""
        # –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞
        overlay = pygame.Surface((self.width, self.height))
        overlay.set_alpha(180)
        overlay.fill((0, 0, 0))
        self.screen.blit(overlay, (0, 0))
        
        # –†–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ –∑–∞–ø–∏—Å–∫–∏
        box_width = min(700, self.width - 100)
        box_height = min(500, self.height - 100)
        box_x = (self.width - box_width) // 2
        box_y = (self.height - box_height) // 2
        
        # –§–æ–Ω –∑–∞–ø–∏—Å–∫–∏ (—Å—Ç–∞—Ä–∞—è –±—É–º–∞–≥–∞)
        pygame.draw.rect(self.screen, (240, 230, 200), (box_x, box_y, box_width, box_height))
        pygame.draw.rect(self.screen, (150, 120, 80), (box_x, box_y, box_width, box_height), 3)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_font = pygame.font.Font(None, 42)
        title = title_font.render(f"üìú {self.current_note.title}", True, (80, 50, 20))
        title_rect = title.get_rect(center=(self.width // 2, box_y + 50))
        self.screen.blit(title, title_rect)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        pygame.draw.line(
            self.screen,
            (150, 120, 80),
            (box_x + 50, box_y + 85),
            (box_x + box_width - 50, box_y + 85),
            2
        )
        
        # –¢–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∫–∏ (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π)
        text_font = pygame.font.Font(None, 28)
        lines = self.current_note.text.split('\n')
        y_offset = box_y + 120
        
        for line in lines:
            text = text_font.render(line, True, (60, 40, 10))
            text_rect = text.get_rect(center=(self.width // 2, y_offset))
            self.screen.blit(text, text_rect)
            y_offset += 35
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        hint_font = pygame.font.Font(None, 24)
        hint = hint_font.render("–ù–∞–∂–º–∏—Ç–µ –ü–†–û–ë–ï–õ, ENTER –∏–ª–∏ ESC —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å", True, (120, 100, 60))
        hint_rect = hint.get_rect(center=(self.width // 2, box_y + box_height - 30))
        self.screen.blit(hint, hint_rect)
    
    def _render_death_screen(self) -> None:
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞ —Å–º–µ—Ä—Ç–∏"""
        # –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π –æ–≤–µ—Ä–ª–µ–π
        overlay = pygame.Surface((self.width, self.height))
        overlay.set_alpha(200)
        overlay.fill((100, 0, 0))
        self.screen.blit(overlay, (0, 0))
        
        # –¢–µ–∫—Å—Ç "–í–´ –ü–û–ì–ò–ë–õ–ò"
        death_font = pygame.font.Font(None, 72)
        death_text = death_font.render("üíÄ –í–´ –ü–û–ì–ò–ë–õ–ò üíÄ", True, (255, 255, 255))
        death_rect = death_text.get_rect(center=(self.width // 2, self.height // 2 - 50))
        self.screen.blit(death_text, death_rect)
        
        # –¢–∞–π–º–µ—Ä –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è
        timer_font = pygame.font.Font(None, 36)
        remaining = max(0, 3.0 - self.death_timer)
        timer_text = timer_font.render(
            f"–í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {remaining:.1f} —Å–µ–∫...",
            True,
            (255, 255, 255)
        )
        timer_rect = timer_text.get_rect(center=(self.width // 2, self.height // 2 + 20))
        self.screen.blit(timer_text, timer_rect)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        hint_font = pygame.font.Font(None, 24)
        hint_text = hint_font.render(
            "–í—ã –≤–æ–∑—Ä–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —á–µ—Ä–¥–∞–∫–µ —Å –ø–æ–ª–Ω—ã–º –∑–¥–æ—Ä–æ–≤—å–µ–º",
            True,
            (200, 200, 200)
        )
        hint_rect = hint_text.get_rect(center=(self.width // 2, self.height // 2 + 70))
        self.screen.blit(hint_text, hint_rect)
    
    def _handle_player_death(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ—Ä—Ç–∏ –∏–≥—Ä–æ–∫–∞"""
        self.player_dead = True
        self.death_timer = 0.0
        print("\nüíÄ –í–´ –ü–û–ì–ò–ë–õ–ò!")
        print("‚è≥ –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...")
        
    def _check_story_triggers(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—é–∂–µ—Ç–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ –µ—Å–ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç –∫–∞–∫–æ–π-—Ç–æ UI
        if self.show_dialogue or self.show_inventory_ui or self.show_storage_ui or self.show_riddle_ui:
            return
            
        # –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥ (–Ω–∞ —á–µ—Ä–¥–∞–∫–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)
        if self.current_location == "attic":
            if self.story_manager.should_show_dialogue("intro", 0):
                self._show_story_dialogue("intro")
                self.story_manager.set_flag("intro_shown", True)
                return
                
        # –î–∏–∞–ª–æ–≥ –Ω–∞ 10 —ç—Ç–∞–∂–µ
        if self.current_location != "attic" and self.current_floor == 10:
            if self.story_manager.should_show_dialogue("midpoint", 10):
                self._show_story_dialogue("midpoint")
                self.story_manager.set_flag("midpoint_shown", True)
                return
                
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥ –Ω–∞ 20 —ç—Ç–∞–∂–µ
        if self.current_location != "attic" and self.current_floor == 20:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–∞–∂ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if self.level_generator.floor_state_manager.is_floor_stabilized(20):
                if self.story_manager.should_show_dialogue("ending", 20):
                    self._show_story_dialogue("ending")
                    self.story_manager.set_flag("ending_shown", True)
                    return
    
    def _show_story_dialogue(self, dialogue_id: str) -> None:
        """
        –ü–æ–∫–∞–∑–∞—Ç—å —Å—é–∂–µ—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥
        
        Args:
            dialogue_id: ID –¥–∏–∞–ª–æ–≥–∞
        """
        dialogue = self.story_manager.get_dialogue(dialogue_id)
        if dialogue:
            dialogue.reset()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ
            self.current_dialogue = dialogue
            self.show_dialogue = True
            print(f"\nüìñ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–∏–∞–ª–æ–≥: {dialogue_id}")
    
    def _respawn_player(self) -> None:
        """–í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞"""
        print("\n‚ú® –í—ã –≤–æ–∑—Ä–æ–¥–∏–ª–∏—Å—å –Ω–∞ —á–µ—Ä–¥–∞–∫–µ!")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        self.player.stats.health = self.player.stats.max_health
        self.player.stats.endurance = self.player.stats.max_endurance
        
        # –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞ —á–µ—Ä–¥–∞–∫
        if self.attic.spawn_pos:
            spawn_x, spawn_y = self.attic.spawn_pos
            self.player.x = spawn_x
            self.player.y = spawn_y
            
        self.current_location = "attic"
        self.current_floor = 0
        self.current_level = None
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
        self.player_dead = False
        self.death_timer = 0.0
        
        # –®—Ç—Ä–∞—Ñ: —Ç–µ—Ä—è–µ–º —á–∞—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Ç–µ—Ä—é —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    
    def _toggle_fullscreen(self) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        self.fullscreen = not self.fullscreen
        
        if self.fullscreen:
            # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
            self.width = self.screen_width
            self.height = self.screen_height
            self.screen = pygame.display.set_mode((self.width, self.height), pygame.FULLSCREEN)
            print(f"üñ•Ô∏è  –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º: {self.width}x{self.height}")
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –æ–∫–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
            self.width, self.height = self.windowed_size
            self.screen = pygame.display.set_mode((self.width, self.height), pygame.RESIZABLE)
            print(f"ü™ü –û–∫–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: {self.width}x{self.height}")
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º UI —Å –Ω–æ–≤—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        self.inventory_ui = InventoryUI(self.width, self.height)
        self.storage_ui = StorageUI(self.width, self.height)
        self.riddle_ui = RiddleUI(self.width, self.height)
        self.dialogue_ui = DialogueUI(self.width, self.height)
        self.message_log = MessageLog(self.width, self.height)
    
    def _serialize_attic_storage(self) -> list:
        """–°–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—É–Ω–¥—É–∫–∞ –Ω–∞ —á–µ—Ä–¥–∞–∫–µ"""
        from ..items.item import Item
        
        storage_data = []
        for slot in self.attic.storage.slots:
            if slot.item:
                item_data = {
                    "id": slot.item.id,
                    "name": slot.item.name,
                    "item_type": slot.item.item_type.value,
                    "rarity": slot.item.rarity.value,
                    "description": slot.item.description,
                    "damage": slot.item.damage,
                    "durability": slot.item.durability,
                    "max_durability": slot.item.max_durability,
                    "heal_amount": slot.item.heal_amount,
                    "endurance_amount": slot.item.endurance_amount,
                    "clarity_amount": slot.item.clarity_amount,
                    "stackable": slot.item.stackable,
                    "max_stack": slot.item.max_stack,
                    "weight": slot.item.weight,
                    "value": slot.item.value,
                    "quantity": slot.quantity
                }
                storage_data.append(item_data)
            else:
                storage_data.append(None)
        return storage_data
    
    def _deserialize_attic_storage(self, storage_data: list) -> None:
        """–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—É–Ω–¥—É–∫–∞ –Ω–∞ —á–µ—Ä–¥–∞–∫–µ"""
        from ..items.item import Item, ItemType, ItemRarity
        from ..items.inventory import InventorySlot
        
        if not storage_data:
            return
        
        self.attic.storage.slots = []
        for slot_data in storage_data:
            if slot_data:
                item = Item(
                    id=slot_data["id"],
                    name=slot_data["name"],
                    item_type=ItemType(slot_data["item_type"]),
                    rarity=ItemRarity(slot_data["rarity"]),
                    description=slot_data["description"],
                    damage=slot_data.get("damage", 0),
                    durability=slot_data.get("durability", 100),
                    max_durability=slot_data.get("max_durability", 100),
                    heal_amount=slot_data.get("heal_amount", 0),
                    endurance_amount=slot_data.get("endurance_amount", 0),
                    clarity_amount=slot_data.get("clarity_amount", 0),
                    stackable=slot_data.get("stackable", False),
                    max_stack=slot_data.get("max_stack", 1),
                    weight=slot_data.get("weight", 1.0),
                    value=slot_data.get("value", 0)
                )
                self.attic.storage.slots.append(InventorySlot(item, slot_data["quantity"]))
            else:
                self.attic.storage.slots.append(InventorySlot())
    
    def _update_profile_metadata(self) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è"""
        if not self.current_profile:
            return
        
        from datetime import datetime
        import json
        
        # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Ñ–∞–π–ª—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        profile_dir = f"saves/profiles/{self.current_profile}"
        profile_file = os.path.join(profile_dir, "profile.json")
        os.makedirs(profile_dir, exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
        if os.path.exists(profile_file):
            try:
                with open(profile_file, 'r', encoding='utf-8') as f:
                    profile_data = json.load(f)
            except:
                profile_data = {}
        else:
            profile_data = {
                "name": self.current_profile,
                "created_at": datetime.now().isoformat()
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        profile_data["last_played"] = datetime.now().isoformat()
        profile_data["play_time"] = profile_data.get("play_time", 0.0) + self.total_play_time
        profile_data["current_floor"] = self.current_floor
        profile_data["health"] = self.player.stats.health
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        try:
            with open(profile_file, 'w', encoding='utf-8') as f:
                json.dump(profile_data, f, ensure_ascii=False, indent=2)
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏
            self.total_play_time = 0.0
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è: {e}")
    
    def _start_game_with_profile(self, profile_name: str) -> None:
        """
        –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º
        
        Args:
            profile_name: –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è
        """
        print(f"\nüéÆ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º: {profile_name}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è (–≤—Ä–µ–º—è –∏–≥—Ä—ã)
        profile_dir = f"saves/profiles/{profile_name}"
        profile_file = os.path.join(profile_dir, "profile.json")
        if os.path.exists(profile_file):
            try:
                import json
                with open(profile_file, 'r', encoding='utf-8') as f:
                    profile_data = json.load(f)
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã
                    self.total_play_time = 0.0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        save_file = os.path.join(profile_dir, "save.json")
        has_save = os.path.exists(save_file)
        
        if has_save:
            try:
                self._quick_load_from_file(save_file)
                self.message_log.success(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {profile_name}!")
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {e}")
                print("–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É")
                self.message_log.info(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {profile_name}!")
                has_save = False
        else:
            print("–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É")
            self.message_log.info(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {profile_name}!")
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¢–û–õ–¨–ö–û –¥–ª—è –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
        if not has_save and self.current_floor == 0:
            self._check_story_triggers()
    
    def _quit(self) -> None:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã"""
        pygame.quit()
        print("\nüëã –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print("‚úÖ –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!")
    
    # –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    def _on_music_toggle(self, enabled: bool) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º—É–∑—ã–∫–∏"""
        self.sound_manager.music_enabled = enabled
        if enabled:
            self.sound_manager.start_music()
        else:
            self.sound_manager.stop_music()
        print(f"üéµ –ú—É–∑—ã–∫–∞: {'–í–ö–õ' if enabled else '–í–´–ö–õ'}")
    
    def _on_sfx_toggle(self, enabled: bool) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        self.sound_manager.sfx_enabled = enabled
        print(f"üîä –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã: {'–í–ö–õ' if enabled else '–í–´–ö–õ'}")
    
    def _on_music_volume_change(self, volume: float) -> None:
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –º—É–∑—ã–∫–∏"""
        self.sound_manager.music_volume = volume
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –º—É–∑—ã–∫–µ
        if self.sound_manager.music_playing:
            pygame.mixer.music.set_volume(volume)
    
    def _on_sfx_volume_change(self, volume: float) -> None:
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        self.sound_manager.sfx_volume = volume
    
    def _on_settings_back(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.show_settings_ui = False
    
    def _get_biome_for_floor(self, floor: int) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–∏–æ–º –¥–ª—è —ç—Ç–∞–∂–∞
        
        Args:
            floor: –ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞ (1-20+)
            
        Returns:
            –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–æ–º–∞ –¥–ª—è –º—É–∑—ã–∫–∏
        """
        if floor <= 5:
            return "dungeon"  # –≠—Ç–∞–∂–∏ 1-5: –°—Ç–∞—Ä—ã–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
        elif floor <= 10:
            return "catacombs"  # –≠—Ç–∞–∂–∏ 6-10: –ê—Ä—Ö–∏–≤—ã –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        elif floor <= 15:
            return "caves"  # –≠—Ç–∞–∂–∏ 11-15: –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã
        else:
            return "abyss"  # –≠—Ç–∞–∂–∏ 16-20+: –ó–æ–Ω–∞ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã/–ë–µ–∑–¥–Ω–∞
    
    def _any_ui_open(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç –ª–∏ –∫–∞–∫–æ–π-–ª–∏–±–æ UI
        
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç –ª—é–±–æ–π UI (–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, –¥–∏–∞–ª–æ–≥, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç.–¥.)
        """
        return (
            self.show_inventory_ui or
            self.show_storage_ui or
            self.show_riddle_ui or
            self.show_dialogue or
            self.show_settings_ui or
            self.show_exit_dialog or
            self.show_note
        )
    
    def _update_fps_counter(self, dt: float) -> None:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ FPS
        
        Args:
            dt: Delta time
        """
        self.fps_update_time += dt
        self.fps_frames += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º FPS –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
        if self.fps_update_time >= 0.5:
            self.current_fps = int(self.fps_frames / self.fps_update_time)
            self.fps_update_time = 0.0
            self.fps_frames = 0
    
    def _render_fps(self) -> None:
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ FPS —Å—á—ë—Ç—á–∏–∫–∞"""
        if not self.show_fps:
            return
        
        # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
        fps_bg = pygame.Surface((100, 30))
        fps_bg.set_alpha(180)
        fps_bg.fill((0, 0, 0))
        
        # –†–∏—Å—É–µ–º —Ñ–æ–Ω –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
        self.screen.blit(fps_bg, (self.width - 110, 10))
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç FPS
        if self.current_fps >= 55:
            color = (0, 255, 0)  # –ó–µ–ª—ë–Ω—ã–π - –æ—Ç–ª–∏—á–Ω–æ
        elif self.current_fps >= 30:
            color = (255, 255, 0)  # –ñ—ë–ª—Ç—ã–π - –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        else:
            color = (255, 0, 0)  # –ö—Ä–∞—Å–Ω—ã–π - –ø–ª–æ—Ö–æ
        
        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç FPS
        font = pygame.font.Font(None, 24)
        fps_text = font.render(f"FPS: {self.current_fps}", True, color)
        self.screen.blit(fps_text, (self.width - 100, 15))


if __name__ == "__main__":
    # –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∞ Game
    game = Game()
    game.run()
