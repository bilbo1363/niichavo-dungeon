"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤—É–∫–æ–≤ –∏ –º—É–∑—ã–∫–∏
"""
import pygame
import numpy as np
from typing import Dict, Optional


class SoundManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤—É–∫–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–≤—É–∫–æ–≤"""
        pygame.mixer.init(frequency=22050, size=-16, channels=2, buffer=512)
        
        self.sounds: Dict[str, pygame.mixer.Sound] = {}
        self.music_playing = False
        self.sfx_enabled = True
        self.music_enabled = True
        self.sfx_volume = 0.5
        self.music_volume = 0.3
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–≤—É–∫–∏
        self._generate_sounds()
        
        print("üîä –ó–≤—É–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _generate_sounds(self) -> None:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 8-–±–∏—Ç–Ω—ã—Ö –∑–≤—É–∫–æ–≤"""
        # –®–∞–≥–∏
        self.sounds["step"] = self._generate_step_sound()
        
        # –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—É–Ω–¥—É–∫–∞
        self.sounds["chest_open"] = self._generate_chest_sound()
        
        # –ü–æ–¥–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
        self.sounds["pickup"] = self._generate_pickup_sound()
        
        # –£—Ä–æ–Ω
        self.sounds["damage"] = self._generate_damage_sound()
        
        # –õ–µ—á–µ–Ω–∏–µ
        self.sounds["heal"] = self._generate_heal_sound()
        
        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ
        self.sounds["discover"] = self._generate_discover_sound()
        
        # –õ–æ–≤—É—à–∫–∞
        self.sounds["trap"] = self._generate_trap_sound()
        
        print(f"   üéµ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–≤—É–∫–æ–≤: {len(self.sounds)}")
    
    def _generate_step_sound(self) -> pygame.mixer.Sound:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–≤—É–∫–∞ —à–∞–≥–∞"""
        sample_rate = 22050
        duration = 0.1
        frequency = 150
        
        samples = int(sample_rate * duration)
        wave = np.sin(2 * np.pi * frequency * np.linspace(0, duration, samples))
        
        # –ó–∞—Ç—É—Ö–∞–Ω–∏–µ
        envelope = np.linspace(1, 0, samples)
        wave = wave * envelope * 0.3
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ 16-–±–∏—Ç
        wave = np.int16(wave * 32767)
        stereo_wave = np.column_stack((wave, wave))
        
        return pygame.sndarray.make_sound(stereo_wave)
    
    def _generate_chest_sound(self) -> pygame.mixer.Sound:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–≤—É–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—É–Ω–¥—É–∫–∞"""
        sample_rate = 22050
        duration = 0.4
        
        # –î–≤–µ –Ω–æ—Ç—ã (–æ—Ç–∫—Ä—ã—Ç–∏–µ)
        freq1 = 200
        freq2 = 400
        
        samples = int(sample_rate * duration)
        t = np.linspace(0, duration, samples)
        
        # –ü–µ—Ä–≤–∞—è –Ω–æ—Ç–∞
        wave1 = np.sin(2 * np.pi * freq1 * t[:samples//2])
        # –í—Ç–æ—Ä–∞—è –Ω–æ—Ç–∞
        wave2 = np.sin(2 * np.pi * freq2 * t[samples//2:])
        
        wave = np.concatenate([wave1, wave2])
        
        # –ó–∞—Ç—É—Ö–∞–Ω–∏–µ
        envelope = np.linspace(1, 0, samples)
        wave = wave * envelope * 0.4
        
        wave = np.int16(wave * 32767)
        stereo_wave = np.column_stack((wave, wave))
        
        return pygame.sndarray.make_sound(stereo_wave)
    
    def _generate_pickup_sound(self) -> pygame.mixer.Sound:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–≤—É–∫–∞ –ø–æ–¥–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞"""
        sample_rate = 22050
        duration = 0.2
        
        # –í–æ—Å—Ö–æ–¥—è—â–∞—è –∞—Ä–ø–µ–¥–∂–∏–æ
        freqs = [400, 500, 600]
        samples_per_note = int(sample_rate * duration / len(freqs))
        
        wave = np.array([])
        for freq in freqs:
            t = np.linspace(0, duration / len(freqs), samples_per_note)
            note = np.sin(2 * np.pi * freq * t)
            wave = np.concatenate([wave, note])
        
        # –ó–∞—Ç—É—Ö–∞–Ω–∏–µ
        envelope = np.linspace(1, 0, len(wave))
        wave = wave * envelope * 0.3
        
        wave = np.int16(wave * 32767)
        stereo_wave = np.column_stack((wave, wave))
        
        return pygame.sndarray.make_sound(stereo_wave)
    
    def _generate_damage_sound(self) -> pygame.mixer.Sound:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–≤—É–∫–∞ —É—Ä–æ–Ω–∞"""
        sample_rate = 22050
        duration = 0.3
        
        samples = int(sample_rate * duration)
        t = np.linspace(0, duration, samples)
        
        # –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç–æ–Ω —Å —à—É–º–æ–º
        freq_start = 400
        freq_end = 100
        freq = np.linspace(freq_start, freq_end, samples)
        
        wave = np.sin(2 * np.pi * freq * t)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º
        noise = np.random.uniform(-0.2, 0.2, samples)
        wave = wave * 0.7 + noise * 0.3
        
        # –ó–∞—Ç—É—Ö–∞–Ω–∏–µ
        envelope = np.linspace(1, 0, samples)
        wave = wave * envelope * 0.5
        
        wave = np.int16(wave * 32767)
        stereo_wave = np.column_stack((wave, wave))
        
        return pygame.sndarray.make_sound(stereo_wave)
    
    def _generate_heal_sound(self) -> pygame.mixer.Sound:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–≤—É–∫–∞ –ª–µ—á–µ–Ω–∏—è"""
        sample_rate = 22050
        duration = 0.3
        
        # –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç–æ–Ω
        samples = int(sample_rate * duration)
        t = np.linspace(0, duration, samples)
        
        freq_start = 300
        freq_end = 600
        freq = np.linspace(freq_start, freq_end, samples)
        
        wave = np.sin(2 * np.pi * freq * t)
        
        # –ó–∞—Ç—É—Ö–∞–Ω–∏–µ
        envelope = np.linspace(0.5, 1, samples)
        wave = wave * envelope * 0.3
        
        wave = np.int16(wave * 32767)
        stereo_wave = np.column_stack((wave, wave))
        
        return pygame.sndarray.make_sound(stereo_wave)
    
    def _generate_discover_sound(self) -> pygame.mixer.Sound:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–≤—É–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"""
        sample_rate = 22050
        duration = 0.25
        
        # –ë—ã—Å—Ç—Ä–∞—è –∞—Ä–ø–µ–¥–∂–∏–æ –≤–≤–µ—Ä—Ö
        freqs = [500, 700, 900, 1100]
        samples_per_note = int(sample_rate * duration / len(freqs))
        
        wave = np.array([])
        for freq in freqs:
            t = np.linspace(0, duration / len(freqs), samples_per_note)
            note = np.sin(2 * np.pi * freq * t)
            wave = np.concatenate([wave, note])
        
        # –ó–∞—Ç—É—Ö–∞–Ω–∏–µ
        envelope = np.linspace(1, 0, len(wave))
        wave = wave * envelope * 0.25
        
        wave = np.int16(wave * 32767)
        stereo_wave = np.column_stack((wave, wave))
        
        return pygame.sndarray.make_sound(stereo_wave)
    
    def _generate_trap_sound(self) -> pygame.mixer.Sound:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–≤—É–∫–∞ –ª–æ–≤—É—à–∫–∏"""
        sample_rate = 22050
        duration = 0.4
        
        samples = int(sample_rate * duration)
        t = np.linspace(0, duration, samples)
        
        # –†–µ–∑–∫–∏–π –∑–≤—É–∫ —Å –≤–∏–±—Ä–∞—Ü–∏–µ–π
        freq = 200
        wave = np.sin(2 * np.pi * freq * t)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–±—Ä–∞—Ü–∏—é
        vibrato = np.sin(2 * np.pi * 10 * t) * 0.3
        wave = wave * (1 + vibrato)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º
        noise = np.random.uniform(-0.3, 0.3, samples)
        wave = wave * 0.6 + noise * 0.4
        
        # –ó–∞—Ç—É—Ö–∞–Ω–∏–µ
        envelope = np.linspace(1, 0, samples)
        wave = wave * envelope * 0.6
        
        wave = np.int16(wave * 32767)
        stereo_wave = np.column_stack((wave, wave))
        
        return pygame.sndarray.make_sound(stereo_wave)
    
    def play_sound(self, sound_name: str) -> None:
        """
        –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫
        
        Args:
            sound_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–≤—É–∫–∞
        """
        if not self.sfx_enabled:
            return
        
        if sound_name in self.sounds:
            sound = self.sounds[sound_name]
            sound.set_volume(self.sfx_volume)
            sound.play()
    
    def start_music(self) -> None:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É"""
        if not self.music_enabled or self.music_playing:
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –º–µ–ª–æ–¥–∏—é
        self._generate_and_play_music()
        self.music_playing = True
    
    def _generate_and_play_music(self) -> None:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏"""
        sample_rate = 22050
        duration = 8.0  # 8 —Å–µ–∫—É–Ω–¥, –±—É–¥–µ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞—Ç—å—Å—è
        
        samples = int(sample_rate * duration)
        t = np.linspace(0, duration, samples)
        
        # –ü—Ä–æ—Å—Ç–∞—è –º–µ–ª–æ–¥–∏—è (–ø–µ–Ω—Ç–∞—Ç–æ–Ω–∏–∫–∞)
        notes = [262, 294, 330, 392, 440]  # C, D, E, G, A
        pattern = [0, 2, 4, 2, 3, 1, 0, 4]  # –ü–∞—Ç—Ç–µ—Ä–Ω –Ω–æ—Ç
        
        wave = np.zeros(samples)
        note_duration = duration / len(pattern)
        
        for i, note_idx in enumerate(pattern):
            start = int(i * note_duration * sample_rate)
            end = int((i + 1) * note_duration * sample_rate)
            
            freq = notes[note_idx]
            note_t = t[start:end] - t[start]
            note_wave = np.sin(2 * np.pi * freq * note_t)
            
            # –û–≥–∏–±–∞—é—â–∞—è –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ—Ç—ã
            envelope = np.concatenate([
                np.linspace(0, 1, len(note_wave) // 10),
                np.ones(len(note_wave) - len(note_wave) // 10 - len(note_wave) // 5),
                np.linspace(1, 0, len(note_wave) // 5)
            ])
            
            wave[start:end] = note_wave * envelope
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        wave = wave * 0.15  # –¢–∏—Ö–∞—è —Ñ–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞
        
        wave = np.int16(wave * 32767)
        stereo_wave = np.column_stack((wave, wave))
        
        music = pygame.sndarray.make_sound(stereo_wave)
        music.set_volume(self.music_volume)
        music.play(loops=-1)  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    
    def stop_music(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º—É–∑—ã–∫—É"""
        pygame.mixer.stop()
        self.music_playing = False
    
    def toggle_sfx(self) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã"""
        self.sfx_enabled = not self.sfx_enabled
        print(f"üîä –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã: {'–í–ö–õ' if self.sfx_enabled else '–í–´–ö–õ'}")
    
    def toggle_music(self) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É"""
        self.music_enabled = not self.music_enabled
        if self.music_enabled:
            self.start_music()
        else:
            self.stop_music()
        print(f"üéµ –ú—É–∑—ã–∫–∞: {'–í–ö–õ' if self.music_enabled else '–í–´–ö–õ'}")
