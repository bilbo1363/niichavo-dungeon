"""
–°–∏—Å—Ç–µ–º–∞ –±–æ—è
"""
import pygame
import random
from typing import Optional


class CombatSystem:
    """–°–∏—Å—Ç–µ–º–∞ –±–æ—è –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–æ–º –∏ –≤—Ä–∞–≥–∞–º–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        self.player_attack_cooldown = 0.0
        self.player_attack_delay = 0.5  # –°–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∞—Ç–∞–∫–∞–º–∏ –∏–≥—Ä–æ–∫–∞
        
        # –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        self.damage_numbers = []  # [(x, y, damage, timer, is_player)]
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º—É —á–∞—Å—Ç–∏—Ü (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑–≤–Ω–µ)
        self.particle_system = None
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ –ª–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑–≤–Ω–µ)
        self.message_log = None
        
    def update(self, dt: float) -> None:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        
        Args:
            dt: Delta time
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω –∞—Ç–∞–∫–∏ –∏–≥—Ä–æ–∫–∞
        self.player_attack_cooldown = max(0, self.player_attack_cooldown - dt)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —á–∏—Å–ª–∞ —É—Ä–æ–Ω–∞
        self.damage_numbers = [
            (x, y, dmg, timer - dt, is_player) 
            for x, y, dmg, timer, is_player in self.damage_numbers 
            if timer > 0
        ]
        
    def player_attack(self, player, level):
        """
        –ê—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞
        
        Args:
            player: –ò–≥—Ä–æ–∫
            level: –£—Ä–æ–≤–µ–Ω—å
            
        Returns:
            –°–ø–∏—Å–æ–∫ —É–±–∏—Ç—ã—Ö –≤—Ä–∞–≥–æ–≤ (–¥–ª—è –≤—ã–¥–∞—á–∏ –æ–ø—ã—Ç–∞)
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        if self.player_attack_cooldown > 0:
            return []
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –æ—Ä—É–∂–∏–µ
        if not player.inventory.equipped_weapon:
            print("‚ùå –ù–µ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è!")
            return []
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ç–∞–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è)
        attack_x = player.x
        attack_y = player.y
        
        # –ò—â–µ–º –≤—Ä–∞–≥–æ–≤ –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–µ—Ç–∫–∞—Ö
        directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]
        attacked = False
        killed_enemies = []  # –°–ø–∏—Å–æ–∫ —É–±–∏—Ç—ã—Ö –≤—Ä–∞–≥–æ–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ –æ–ø—ã—Ç–∞
        
        for dx, dy in directions:
            check_x = player.x + dx
            check_y = player.y + dy
            
            enemy = level.enemy_spawner.get_enemy_at(check_x, check_y)
            if enemy and not enemy.is_dead:
                # –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–Ω
                base_damage = player.inventory.equipped_weapon.damage
                damage = self._calculate_damage(base_damage)
                
                # –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
                is_dead = enemy.take_damage(damage)
                
                # –ï—Å–ª–∏ –≤—Ä–∞–≥ —É–º–µ—Ä - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —É–±–∏—Ç—ã—Ö
                if is_dead:
                    killed_enemies.append(enemy)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
                self._add_damage_number(check_x, check_y, damage)
                
                # –≠—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü
                if self.particle_system:
                    effect_x = check_x * 32 + 16
                    effect_y = check_y * 32 + 16
                    if is_dead:
                        # –ë–æ–ª—å—à–æ–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏
                        self.particle_system.emit(effect_x, effect_y, 30, "blood")
                    else:
                        # –ú–∞–ª–µ–Ω—å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏
                        self.particle_system.emit(effect_x, effect_y, 10, "blood")
                
                # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥
                if self.message_log:
                    if is_dead:
                        self.message_log.combat(f"–£–±–∏–ª–∏ {enemy.enemy_type.value}!")
                    else:
                        self.message_log.combat(f"–ê—Ç–∞–∫–æ–≤–∞–ª–∏ {enemy.enemy_type.value}: -{damage} HP")
                
                print(f"‚öîÔ∏è  –í—ã –∞—Ç–∞–∫–æ–≤–∞–ª–∏ {enemy.enemy_type.value} –∏ –Ω–∞–Ω–µ—Å–ª–∏ {damage} —É—Ä–æ–Ω–∞!")
                attacked = True
                
        if attacked:
            self.player_attack_cooldown = self.player_attack_delay
            return killed_enemies
        else:
            print("‚ùå –†—è–¥–æ–º –Ω–µ—Ç –≤—Ä–∞–≥–æ–≤!")
            return []
            
    def enemy_attack(self, enemy, player) -> None:
        """
        –ê—Ç–∞–∫–∞ –≤—Ä–∞–≥–∞
        
        Args:
            enemy: –í—Ä–∞–≥
            player: –ò–≥—Ä–æ–∫
        """
        # –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–Ω
        damage = self._calculate_damage(enemy.stats.damage)
        
        # –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –∏–≥—Ä–æ–∫—É
        player.stats.health -= damage
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        self._add_damage_number(player.x, player.y, damage, is_player=True)
        
        # –≠—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü
        if self.particle_system:
            effect_x = player.x * 32 + 16
            effect_y = player.y * 32 + 16
            self.particle_system.emit(effect_x, effect_y, 8, "blood")
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥
        if self.message_log:
            self.message_log.combat(f"{enemy.enemy_type.value.capitalize()} –∞—Ç–∞–∫–æ–≤–∞–ª! -{damage} HP")
        
        print(f"üí• {enemy.enemy_type.value.capitalize()} –∞—Ç–∞–∫–æ–≤–∞–ª –≤–∞—Å! –£—Ä–æ–Ω: {damage}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—Ä—Ç—å –∏–≥—Ä–æ–∫–∞
        if player.stats.health <= 0:
            player.stats.health = 0
            print("üíÄ –í–´ –ü–û–ì–ò–ë–õ–ò!")
            
    def _calculate_damage(self, base_damage: int) -> int:
        """
        –í—ã—á–∏—Å–ª–∏—Ç—å —É—Ä–æ–Ω —Å —É—á—ë—Ç–æ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        
        Args:
            base_damage: –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω
            
        Returns:
            –ò—Ç–æ–≥–æ–≤—ã–π —É—Ä–æ–Ω
        """
        # ¬±20% –≤–∞—Ä–∏–∞—Ü–∏—è
        variation = random.uniform(0.8, 1.2)
        return max(1, int(base_damage * variation))
        
    def _add_damage_number(self, x: int, y: int, damage: int, is_player: bool = False) -> None:
        """
        –î–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —É—Ä–æ–Ω–∞
        
        Args:
            x: –ü–æ–∑–∏—Ü–∏—è X
            y: –ü–æ–∑–∏—Ü–∏—è Y
            damage: –£—Ä–æ–Ω
            is_player: –£—Ä–æ–Ω –ø–æ –∏–≥—Ä–æ–∫—É
        """
        self.damage_numbers.append((x, y, damage, 1.0, is_player))
        
    def render_damage_numbers(self, screen: pygame.Surface, camera_x: int, camera_y: int) -> None:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —á–∏—Å–µ–ª —É—Ä–æ–Ω–∞
        
        Args:
            screen: –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            camera_x: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã X
            camera_y: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã Y
        """
        font = pygame.font.Font(None, 32)
        
        for x, y, damage, timer, is_player in self.damage_numbers:
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            screen_x = x * 32 - camera_x + 16
            screen_y = y * 32 - camera_y - int(timer * 20)  # –ü–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –≤–≤–µ—Ä—Ö
            
            # –¶–≤–µ—Ç (–∫—Ä–∞—Å–Ω—ã–π –¥–ª—è –∏–≥—Ä–æ–∫–∞, –±–µ–ª—ã–π –¥–ª—è –≤—Ä–∞–≥–æ–≤)
            color = (255, 100, 100) if is_player else (255, 255, 255)
            
            # –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            alpha = int(255 * timer)
            
            # –†–µ–Ω–¥–µ—Ä–∏–º —Ç–µ–∫—Å—Ç
            text = font.render(f"-{damage}", True, color)
            text.set_alpha(alpha)
            screen.blit(text, (screen_x, screen_y))


if __name__ == "__main__":
    # –¢–µ—Å—Ç –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    combat = CombatSystem()
    print("–ë–æ–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –¢–µ—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —É—Ä–æ–Ω–∞
    for i in range(5):
        damage = combat._calculate_damage(10)
        print(f"–£—Ä–æ–Ω {i+1}: {damage}")
