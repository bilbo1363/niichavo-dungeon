"""
–ö–ª–∞—Å—Å –∏–≥—Ä–æ–∫–∞
"""
import pygame
from dataclasses import dataclass
from ..items.inventory import Inventory
from ..items.item import ItemDatabase
from ..graphics.player_animation import PlayerAnimation


@dataclass
class PlayerStats:
    """–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞"""
    health: int = 100
    max_health: int = 100
    endurance: int = 100
    max_endurance: int = 100
    thirst: int = 100
    clarity: int = 100  # –î–ª—è –º–∞–≥–∏–∏


class Player:
    """–ö–ª–∞—Å—Å –∏–≥—Ä–æ–∫–∞"""
    
    def __init__(self, x: int, y: int):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞
        
        Args:
            x: –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è X (–≤ –∫–ª–µ—Ç–∫–∞—Ö)
            y: –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è Y (–≤ –∫–ª–µ—Ç–∫–∞—Ö)
        """
        # –ü–æ–∑–∏—Ü–∏—è –Ω–∞ —Å–µ—Ç–∫–µ
        self.x = x
        self.y = y
        
        # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        self.stats = PlayerStats()
        
        # –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
        self.inventory = Inventory(max_slots=20)
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        self.item_db = ItemDatabase()
        
        # –†—é–∫–∑–∞–∫ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è–º–∏)
        self.backpack = []
        
        # –°—á—ë—Ç—á–∏–∫ —à–∞–≥–æ–≤
        self.steps = 0
        
        # –õ–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ Game)
        self.message_log = None
        
        # –î–∞—ë–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        self._give_starting_items()
        
        # –í–∏–∑—É–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.color = (0, 255, 0)  # –ó–µ–ª–µ–Ω—ã–π (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        self.size = 32  # –†–∞–∑–º–µ—Ä —Å–ø—Ä–∞–π—Ç–∞
        
        # –ê–Ω–∏–º–∞—Ü–∏—è
        self.animation = PlayerAnimation(tile_size=32)
        self.last_dx = 0
        self.last_dy = 0
        
        print(f"üë§ –ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ({x}, {y})")
        
    def _give_starting_items(self):
        """–í—ã–¥–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã"""
        # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ—Ä—É–∂–∏–µ
        self.inventory.add_item(self.item_db.get_item("rusty_pipe"))
        
        # –°—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏
        self.inventory.add_item(self.item_db.get_item("bandage"), 3)
        self.inventory.add_item(self.item_db.get_item("energy_drink"), 2)
        
        print("üì¶ –ü–æ–ª—É—á–µ–Ω—ã —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã")
        
    def move(self, dx: int, dy: int, level=None) -> bool:
        """
        –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        
        Args:
            dx: –°–º–µ—â–µ–Ω–∏–µ –ø–æ X
            dy: –°–º–µ—â–µ–Ω–∏–µ –ø–æ Y
            level: –£—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–ª–∏–∑–∏–π
            
        Returns:
            True –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        new_x = self.x + dx
        new_y = self.y + dy
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —É—Ä–æ–≤–µ–Ω—å - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏
        if level:
            if not level.is_walkable(new_x, new_y):
                return False
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è
        self.x = new_x
        self.y = new_y
        self.steps += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        self.last_dx = dx
        self.last_dy = dy
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—ã –∫–∞–∂–¥—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤
        if self.steps % 5 == 0:
            self.update_stats()
            
        return True
        
    def update_stats(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–∏ —Ö–æ–¥—å–±–µ"""
        # –£–º–µ–Ω—å—à–∞–µ–º –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å
        self.stats.endurance = max(0, self.stats.endurance - 1)
        
        # –ï—Å–ª–∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –Ω–∞ –Ω—É–ª–µ - —Ç–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –±—ã—Å—Ç—Ä–µ–µ
        if self.stats.endurance == 0:
            # –ü—Ä–∏ –Ω—É–ª–µ–≤–æ–π –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏ —Ç–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∫–∞–∂–¥—ã–µ 10 —à–∞–≥–æ–≤
            if self.steps % 10 == 0:
                self.stats.health = max(0, self.stats.health - 2)
                if self.steps % 20 == 0:  # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑
                    print("‚ö†Ô∏è –í—ã –∏—Å—Ç–æ—â–µ–Ω—ã! –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –Ω–∞ –Ω—É–ª–µ!")
                    if self.message_log:
                        self.message_log.warning("‚ö†Ô∏è –í—ã –∏—Å—Ç–æ—â–µ–Ω—ã! –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –Ω–∞ –Ω—É–ª–µ!")
        else:
            # –û–±—ã—á–Ω–∞—è –ø–æ—Ç–µ—Ä—è –∑–¥–æ—Ä–æ–≤—å—è –∫–∞–∂–¥—ã–µ 25 —à–∞–≥–æ–≤
            if self.steps % 25 == 0:
                self.stats.health = max(0, self.stats.health - 1)
            
    def take_damage(self, amount: int) -> None:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
        
        Args:
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–Ω–∞
        """
        self.stats.health = max(0, self.stats.health - amount)
        if self.stats.health == 0:
            print("üíÄ –ò–≥—Ä–æ–∫ –ø–æ–≥–∏–±!")
            
    def heal(self, amount: int) -> None:
        """
        –õ–µ—á–µ–Ω–∏–µ
        
        Args:
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
        """
        self.stats.health = min(
            self.stats.max_health,
            self.stats.health + amount
        )
        
    def update(self, dt: float, is_moving: bool = False) -> None:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        
        Args:
            dt: Delta time
            is_moving: –î–≤–∏–≥–∞–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        self.animation.update(dt, is_moving, self.last_dx, self.last_dy)
        
    def render(self, screen: pygame.Surface, camera_x: int = 0, camera_y: int = 0) -> None:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–∞
        
        Args:
            screen: –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            camera_x: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ X
            camera_y: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ Y
        """
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        screen_x = self.x * self.size - camera_x
        screen_y = self.y * self.size - camera_y
        
        # –†–∏—Å—É–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        self.animation.render(screen, screen_x, screen_y)


if __name__ == "__main__":
    # –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∞ Player
    player = Player(10, 10)
    print(f"–ü–æ–∑–∏—Ü–∏—è: ({player.x}, {player.y})")
    print(f"–ó–¥–æ—Ä–æ–≤—å–µ: {player.stats.health}/{player.stats.max_health}")
    
    # –¢–µ—Å—Ç –¥–≤–∏–∂–µ–Ω–∏—è
    player.move(1, 0)
    print(f"–ü–æ—Å–ª–µ –¥–≤–∏–∂–µ–Ω–∏—è: ({player.x}, {player.y})")
    print(f"–®–∞–≥–æ–≤: {player.steps}")
