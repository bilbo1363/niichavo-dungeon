"""
–°–∏—Å—Ç–µ–º–∞ —Å–ø–∞–≤–Ω–∞ –≤—Ä–∞–≥–æ–≤
"""
import random
from typing import List
from .enemy import Enemy, EnemyType


class EnemySpawner:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤—Ä–∞–≥–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω—è—Ö"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        self.enemies: List[Enemy] = []
        
    def spawn_enemies(self, level, floor_number: int) -> None:
        """
        –°–æ–∑–¥–∞—Ç—å –≤—Ä–∞–≥–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å
            floor_number: –ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞
        """
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã—Ö –≤—Ä–∞–≥–æ–≤
        self.enemies.clear()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–∞–≥–æ–≤ (–±–æ–ª—å—à–µ –Ω–∞ –≥–ª—É–±–æ–∫–∏—Ö —ç—Ç–∞–∂–∞—Ö)
        enemy_count = min(2 + floor_number // 3, 8)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –≤—Ä–∞–≥–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —ç—Ç–∞–∂–∞
        possible_types = self._get_enemy_types_for_floor(floor_number)
        
        spawned = 0
        attempts = 0
        max_attempts = enemy_count * 20
        
        while spawned < enemy_count and attempts < max_attempts:
            attempts += 1
            
            # –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
            x = random.randint(1, level.width - 2)
            y = random.randint(1, level.height - 2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ–ª
            if level.get_tile(x, y) != level.TILE_FLOOR:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –Ω–∞ –≤—Ö–æ–¥–µ/–≤—ã—Ö–æ–¥–µ
            if (x, y) == level.entrance_pos or (x, y) == level.exit_pos:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –≤—Ö–æ–¥—É
            if level.entrance_pos:
                entrance_x, entrance_y = level.entrance_pos
                distance = abs(x - entrance_x) + abs(y - entrance_y)
                if distance < 5:  # –ú–∏–Ω–∏–º—É–º 5 –∫–ª–µ—Ç–æ–∫ –æ—Ç –≤—Ö–æ–¥–∞
                    continue
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –∑–∞–Ω—è—Ç–æ –¥—Ä—É–≥–∏–º –≤—Ä–∞–≥–æ–º
            if any(e.x == x and e.y == y and not e.is_dead for e in self.enemies):
                continue
                
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –≤—Ä–∞–≥–∞
            enemy_type = random.choice(possible_types)
            
            # –°–æ–∑–¥–∞—ë–º –≤—Ä–∞–≥–∞
            enemy = Enemy(enemy_type, x, y)
            self.enemies.append(enemy)
            spawned += 1
            
        print(f"üëπ –°–æ–∑–¥–∞–Ω–æ {spawned} –≤—Ä–∞–≥–æ–≤ –Ω–∞ —ç—Ç–∞–∂–µ {floor_number}")
        
    def _get_enemy_types_for_floor(self, floor_number: int) -> List[EnemyType]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã –≤—Ä–∞–≥–æ–≤ –¥–ª—è —ç—Ç–∞–∂–∞
        
        Args:
            floor_number: –ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –≤—Ä–∞–≥–æ–≤
        """
        types = []
        
        # –ö—Ä—ã—Å—ã –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–∂–∞—Ö
        types.append(EnemyType.RAT)
        
        # –ó–æ–º–±–∏ —Å 3 —ç—Ç–∞–∂–∞
        if floor_number >= 3:
            types.extend([EnemyType.ZOMBIE, EnemyType.ZOMBIE])  # –ß–∞—â–µ
            
        # –ü—Ä–∏–∑—Ä–∞–∫–∏ —Å 8 —ç—Ç–∞–∂–∞
        if floor_number >= 8:
            types.append(EnemyType.GHOST)
            
        # –ú—É—Ç–∞–Ω—Ç—ã —Å 15 —ç—Ç–∞–∂–∞
        if floor_number >= 15:
            types.append(EnemyType.MUTANT)
            
        return types
        
    def update_all(self, dt: float, player_x: int, player_y: int, level) -> List[Enemy]:
        """
        –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤
        
        Args:
            dt: Delta time
            player_x: –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ X
            player_y: –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ Y
            level: –£—Ä–æ–≤–µ–Ω—å
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤—Ä–∞–≥–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –∞—Ç–∞–∫—É—é—Ç
        """
        attacking_enemies = []
        
        for enemy in self.enemies:
            if enemy.is_dead:
                continue
                
            action = enemy.update(dt, player_x, player_y, level)
            if action == "attack":
                attacking_enemies.append(enemy)
                
        return attacking_enemies
        
    def render_all(self, screen, camera_x: int = 0, camera_y: int = 0, fog_of_war=None) -> None:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤
        
        Args:
            screen: –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            camera_x: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ X
            camera_y: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ Y
            fog_of_war: –¢—É–º–∞–Ω –≤–æ–π–Ω—ã
        """
        for enemy in self.enemies:
            enemy.render(screen, camera_x, camera_y, fog_of_war)
            
    def get_enemy_at(self, x: int, y: int) -> Enemy:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–∞–≥–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏
        
        Args:
            x: –ü–æ–∑–∏—Ü–∏—è X
            y: –ü–æ–∑–∏—Ü–∏—è Y
            
        Returns:
            –í—Ä–∞–≥ –∏–ª–∏ None
        """
        for enemy in self.enemies:
            if not enemy.is_dead and enemy.x == x and enemy.y == y:
                return enemy
        return None
        
    def get_alive_count(self) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤—ã—Ö –≤—Ä–∞–≥–æ–≤
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        """
        return sum(1 for e in self.enemies if not e.is_dead)
        
    def clear(self) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤"""
        self.enemies.clear()


if __name__ == "__main__":
    # –¢–µ—Å—Ç —Å–ø–∞–≤–Ω–µ—Ä–∞
    spawner = EnemySpawner()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –≤—Ä–∞–≥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç—Ç–∞–∂–µ–π
    for floor in [1, 5, 10, 15, 20]:
        types = spawner._get_enemy_types_for_floor(floor)
        print(f"\n–≠—Ç–∞–∂ {floor}: {[t.value for t in types]}")
