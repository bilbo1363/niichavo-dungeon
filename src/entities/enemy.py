"""
–°–∏—Å—Ç–µ–º–∞ –≤—Ä–∞–≥–æ–≤
"""
import pygame
import random
from dataclasses import dataclass
from enum import Enum
from typing import Optional, Tuple


class EnemyType(Enum):
    """–¢–∏–ø—ã –≤—Ä–∞–≥–æ–≤"""
    RAT = "rat"                 # –ö—Ä—ã—Å–∞ (—Å–ª–∞–±—ã–π)
    ZOMBIE = "zombie"           # –ó–æ–º–±–∏ (—Å—Ä–µ–¥–Ω–∏–π)
    GHOST = "ghost"             # –ü—Ä–∏–∑—Ä–∞–∫ (—Å–∏–ª—å–Ω—ã–π)
    MUTANT = "mutant"           # –ú—É—Ç–∞–Ω—Ç (–æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π)


@dataclass
class EnemyStats:
    """–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤—Ä–∞–≥–∞"""
    health: int = 30
    max_health: int = 30
    damage: int = 5
    speed: float = 0.5          # –°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è (–∫–ª–µ—Ç–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É)
    detection_range: int = 8    # –î–∞–ª—å–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
    attack_range: int = 1       # –î–∞–ª—å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏


class Enemy:
    """–ö–ª–∞—Å—Å –≤—Ä–∞–≥–∞"""
    
    def __init__(self, enemy_type: EnemyType, x: int, y: int):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–∞–≥–∞
        
        Args:
            enemy_type: –¢–∏–ø –≤—Ä–∞–≥–∞
            x: –ü–æ–∑–∏—Ü–∏—è X
            y: –ü–æ–∑–∏—Ü–∏—è Y
        """
        self.enemy_type = enemy_type
        self.x = x
        self.y = y
        
        # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        self.stats = self._get_stats_for_type(enemy_type)
        
        # AI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.state = "idle"  # idle, patrol, chase, attack
        self.target_x: Optional[int] = None
        self.target_y: Optional[int] = None
        
        # –ü–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.patrol_points = []
        self.current_patrol_index = 0
        
        # –¢–∞–π–º–µ—Ä—ã
        self.move_cooldown = 0.0
        self.attack_cooldown = 0.0
        self.attack_delay = 1.0  # –°–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∞—Ç–∞–∫–∞–º–∏
        
        # –í–∏–∑—É–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.color = self._get_color_for_type(enemy_type)
        self.size = 32
        
        # –§–ª–∞–≥–∏
        self.is_dead = False
        self.aggro = False  # –ê–≥—Ä–µ—Å—Å–∏–≤–µ–Ω –ª–∏ –≤—Ä–∞–≥
        
    def _get_stats_for_type(self, enemy_type: EnemyType) -> EnemyStats:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –≤—Ä–∞–≥–∞
        
        Args:
            enemy_type: –¢–∏–ø –≤—Ä–∞–≥–∞
            
        Returns:
            –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        """
        stats_map = {
            EnemyType.RAT: EnemyStats(
                health=20, max_health=20, damage=3, speed=1.0, 
                detection_range=6, attack_range=1
            ),
            EnemyType.ZOMBIE: EnemyStats(
                health=50, max_health=50, damage=8, speed=0.5, 
                detection_range=10, attack_range=1
            ),
            EnemyType.GHOST: EnemyStats(
                health=30, max_health=30, damage=12, speed=0.8, 
                detection_range=12, attack_range=2
            ),
            EnemyType.MUTANT: EnemyStats(
                health=80, max_health=80, damage=15, speed=0.6, 
                detection_range=15, attack_range=1
            ),
        }
        return stats_map.get(enemy_type, EnemyStats())
    
    def get_xp_reward(self) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –æ–ø—ã—Ç–∞ –∑–∞ —É–±–∏–π—Å—Ç–≤–æ –≤—Ä–∞–≥–∞
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞
        """
        xp_map = {
            EnemyType.RAT: 10,      # –°–ª–∞–±—ã–π –≤—Ä–∞–≥
            EnemyType.ZOMBIE: 20,   # –°—Ä–µ–¥–Ω–∏–π –≤—Ä–∞–≥
            EnemyType.GHOST: 35,    # –°–∏–ª—å–Ω—ã–π –≤—Ä–∞–≥
            EnemyType.MUTANT: 50,   # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –≤—Ä–∞–≥
        }
        return xp_map.get(self.enemy_type, 5)
        
    def _get_color_for_type(self, enemy_type: EnemyType) -> Tuple[int, int, int]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Ç–∏–ø–∞ –≤—Ä–∞–≥–∞
        
        Args:
            enemy_type: –¢–∏–ø –≤—Ä–∞–≥–∞
            
        Returns:
            RGB —Ü–≤–µ—Ç
        """
        color_map = {
            EnemyType.RAT: (139, 69, 19),      # –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π
            EnemyType.ZOMBIE: (100, 150, 100), # –ó–µ–ª—ë–Ω—ã–π
            EnemyType.GHOST: (200, 200, 255),  # –ì–æ–ª—É–±–æ–π
            EnemyType.MUTANT: (200, 50, 50),   # –ö—Ä–∞—Å–Ω—ã–π
        }
        return color_map.get(enemy_type, (255, 0, 255))
        
    def update(self, dt: float, player_x: int, player_y: int, level) -> Optional[str]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–∞–≥–∞
        
        Args:
            dt: Delta time
            player_x: –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ X
            player_y: –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ Y
            level: –£—Ä–æ–≤–µ–Ω—å
            
        Returns:
            –î–µ–π—Å—Ç–≤–∏–µ ("attack" –µ—Å–ª–∏ –∞—Ç–∞–∫—É–µ—Ç)
        """
        if self.is_dead:
            return None
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä—ã
        self.move_cooldown = max(0, self.move_cooldown - dt)
        self.attack_cooldown = max(0, self.attack_cooldown - dt)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –¥–æ –∏–≥—Ä–æ–∫–∞
        distance = abs(self.x - player_x) + abs(self.y - player_y)
        
        # AI –ª–æ–≥–∏–∫–∞
        if distance <= self.stats.attack_range:
            # –ê—Ç–∞–∫–∞
            self.state = "attack"
            if self.attack_cooldown <= 0:
                self.attack_cooldown = self.attack_delay
                return "attack"
                
        elif distance <= self.stats.detection_range:
            # –ü—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
            self.state = "chase"
            self.aggro = True
            self.target_x = player_x
            self.target_y = player_y
            
            # –î–≤–∏–≥–∞–µ–º—Å—è –∫ –∏–≥—Ä–æ–∫—É
            if self.move_cooldown <= 0:
                self._move_towards_target(level)
                self.move_cooldown = 1.0 / self.stats.speed
                
        elif self.aggro:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã
            self.state = "chase"
            if self.move_cooldown <= 0:
                self._move_towards_target(level)
                self.move_cooldown = 1.0 / self.stats.speed
                
        else:
            # –ü–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ–π
            self.state = "patrol"
            if self.move_cooldown <= 0 and random.random() < 0.3:
                self._patrol_move(level)
                self.move_cooldown = 1.0 / self.stats.speed
                
        return None
        
    def _move_towards_target(self, level) -> bool:
        """
        –î–≤–∏–≥–∞—Ç—å—Å—è –∫ —Ü–µ–ª–∏
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å
            
        Returns:
            True –µ—Å–ª–∏ —Å–¥–≤–∏–Ω—É–ª—Å—è
        """
        if self.target_x is None or self.target_y is None:
            return False
            
        # –ü—Ä–æ—Å—Ç–æ–π AI - –¥–≤–∏–≥–∞–µ–º—Å—è –ø–æ –æ–¥–Ω–æ–π –æ—Å–∏ –∑–∞ —Ä–∞–∑
        dx = 0
        dy = 0
        
        if self.x < self.target_x:
            dx = 1
        elif self.x > self.target_x:
            dx = -1
        elif self.y < self.target_y:
            dy = 1
        elif self.y > self.target_y:
            dy = -1
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏—é
        new_x = self.x + dx
        new_y = self.y + dy
        
        if level.is_walkable(new_x, new_y):
            self.x = new_x
            self.y = new_y
            return True
            
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –¥–≤–∏–≥–∞—Ç—å—Å—è –ø—Ä—è–º–æ, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é –æ—Å—å
        if dx != 0:
            if self.y < self.target_y and level.is_walkable(self.x, self.y + 1):
                self.y += 1
                return True
            elif self.y > self.target_y and level.is_walkable(self.x, self.y - 1):
                self.y -= 1
                return True
        elif dy != 0:
            if self.x < self.target_x and level.is_walkable(self.x + 1, self.y):
                self.x += 1
                return True
            elif self.x > self.target_x and level.is_walkable(self.x - 1, self.y):
                self.x -= 1
                return True
                
        return False
        
    def _patrol_move(self, level) -> bool:
        """
        –°–ª—É—á–∞–π–Ω–æ–µ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å
            
        Returns:
            True –µ—Å–ª–∏ —Å–¥–≤–∏–Ω—É–ª—Å—è
        """
        # –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        random.shuffle(directions)
        
        for dx, dy in directions:
            new_x = self.x + dx
            new_y = self.y + dy
            
            if level.is_walkable(new_x, new_y):
                self.x = new_x
                self.y = new_y
                return True
                
        return False
        
    def take_damage(self, damage: int) -> bool:
        """
        –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–Ω
        
        Args:
            damage: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–Ω–∞
            
        Returns:
            True –µ—Å–ª–∏ –≤—Ä–∞–≥ —É–º–µ—Ä
        """
        self.stats.health -= damage
        self.aggro = True  # –°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º
        
        if self.stats.health <= 0:
            self.stats.health = 0
            self.is_dead = True
            print(f"üíÄ {self.enemy_type.value.capitalize()} —É–±–∏—Ç!")
            return True
            
        return False
        
    def render(self, screen: pygame.Surface, camera_x: int = 0, camera_y: int = 0, fog_of_war=None) -> None:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Ä–∞–≥–∞
        
        Args:
            screen: –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            camera_x: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ X
            camera_y: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ Y
            fog_of_war: –¢—É–º–∞–Ω –≤–æ–π–Ω—ã
        """
        if self.is_dead:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
        if fog_of_war and not fog_of_war.is_visible(self.x, self.y):
            return
            
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        screen_x = self.x * self.size - camera_x
        screen_y = self.y * self.size - camera_y
        
        # –†–∏—Å—É–µ–º –≤—Ä–∞–≥–∞
        pygame.draw.circle(
            screen,
            self.color,
            (screen_x + self.size // 2, screen_y + self.size // 2),
            self.size // 3
        )
        
        # –ö–æ–Ω—Ç—É—Ä
        pygame.draw.circle(
            screen,
            (255, 255, 255),
            (screen_x + self.size // 2, screen_y + self.size // 2),
            self.size // 3,
            1
        )
        
        # –ü–æ–ª–æ—Å–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        if self.stats.health < self.stats.max_health:
            bar_width = self.size
            bar_height = 4
            bar_x = screen_x
            bar_y = screen_y - 8
            
            # –§–æ–Ω
            pygame.draw.rect(screen, (100, 0, 0), (bar_x, bar_y, bar_width, bar_height))
            
            # –ó–¥–æ—Ä–æ–≤—å–µ
            health_width = int(bar_width * (self.stats.health / self.stats.max_health))
            pygame.draw.rect(screen, (0, 255, 0), (bar_x, bar_y, health_width, bar_height))


if __name__ == "__main__":
    # –¢–µ—Å—Ç –≤—Ä–∞–≥–∞
    enemy = Enemy(EnemyType.ZOMBIE, 10, 10)
    print(f"–í—Ä–∞–≥: {enemy.enemy_type.value}")
    print(f"–ó–¥–æ—Ä–æ–≤—å–µ: {enemy.stats.health}/{enemy.stats.max_health}")
    print(f"–£—Ä–æ–Ω: {enemy.stats.damage}")
    print(f"–°–∫–æ—Ä–æ—Å—Ç—å: {enemy.stats.speed}")
    
    # –¢–µ—Å—Ç —É—Ä–æ–Ω–∞
    enemy.take_damage(20)
    print(f"–ü–æ—Å–ª–µ —É—Ä–æ–Ω–∞: {enemy.stats.health}/{enemy.stats.max_health}")
