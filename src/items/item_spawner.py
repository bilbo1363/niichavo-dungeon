"""
–°–∏—Å—Ç–µ–º–∞ —Å–ø–∞–≤–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω—è—Ö
"""
import random
from typing import List, Tuple, Optional
from .item import Item, ItemDatabase, ItemType, ItemRarity
import pygame


class ItemSpawn:
    """–ü—Ä–µ–¥–º–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–µ"""
    
    def __init__(self, item: Item, x: int, y: int):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
        
        Args:
            item: –ü—Ä–µ–¥–º–µ—Ç
            x: –ü–æ–∑–∏—Ü–∏—è X
            y: –ü–æ–∑–∏—Ü–∏—è Y
        """
        self.item = item
        self.x = x
        self.y = y
        self.picked_up = False
        
    def render(self, screen: pygame.Surface, camera_x: int = 0, camera_y: int = 0, fog_of_war=None) -> None:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        
        Args:
            screen: –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            camera_x: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ X
            camera_y: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ Y
            fog_of_war: –¢—É–º–∞–Ω –≤–æ–π–Ω—ã
        """
        if self.picked_up:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
        if fog_of_war and not fog_of_war.is_visible(self.x, self.y):
            return
            
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        tile_size = 32
        screen_x = self.x * tile_size - camera_x + tile_size // 2
        screen_y = self.y * tile_size - camera_y + tile_size // 2
        
        # –¶–≤–µ—Ç –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
        color = self.item.get_rarity_color()
        
        # –†–∏—Å—É–µ–º –ø—Ä–µ–¥–º–µ—Ç –∫–∞–∫ –∫–≤–∞–¥—Ä–∞—Ç
        size = 8
        pygame.draw.rect(
            screen,
            color,
            (screen_x - size, screen_y - size, size * 2, size * 2)
        )
        
        # –ö–æ–Ω—Ç—É—Ä
        pygame.draw.rect(
            screen,
            (255, 255, 255),
            (screen_x - size, screen_y - size, size * 2, size * 2),
            1
        )


class ItemSpawner:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω—è—Ö"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        self.item_db = ItemDatabase()
        self.spawned_items: List[ItemSpawn] = []
        
    def spawn_random_items(self, level, floor_number: int, count: int = 3) -> None:
        """
        –°–æ–∑–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å
            floor_number: –ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –º–æ–≥—É—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–∂–µ
        possible_items = self._get_possible_items(floor_number)
        
        if not possible_items:
            return
            
        spawned = 0
        attempts = 0
        max_attempts = count * 10
        
        while spawned < count and attempts < max_attempts:
            attempts += 1
            
            # –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
            x = random.randint(1, level.width - 2)
            y = random.randint(1, level.height - 2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ–ª –∏ –Ω–µ –∑–∞–Ω—è—Ç–æ
            if level.get_tile(x, y) != level.TILE_FLOOR:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –Ω–∞ –≤—Ö–æ–¥–µ/–≤—ã—Ö–æ–¥–µ
            if (x, y) == level.entrance_pos or (x, y) == level.exit_pos:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –∑–∞–Ω—è—Ç–æ –¥—Ä—É–≥–∏–º –ø—Ä–µ–¥–º–µ—Ç–æ–º
            if any(item.x == x and item.y == y and not item.picked_up for item in self.spawned_items):
                continue
                
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
            item_id = random.choice(possible_items)
            item = self.item_db.get_item(item_id)
            
            if item:
                item_spawn = ItemSpawn(item, x, y)
                self.spawned_items.append(item_spawn)
                spawned += 1
                
        print(f"üì¶ –°–æ–∑–¥–∞–Ω–æ {spawned} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —ç—Ç–∞–∂–µ {floor_number}")
        
    def _get_possible_items(self, floor_number: int) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–∞–∂–∞
        
        Args:
            floor_number: –ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ ID –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        """
        items = []
        
        # –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã)
        items.extend(["bandage", "energy_drink", "coffee"])
        
        # –ï–î–ê (—á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è)
        food_items = ["bread", "canned_food", "apple", "water_bottle", "chocolate"]
        items.extend(random.sample(food_items, k=min(3, len(food_items))))
        
        # –ë–æ–ª–µ–µ —Ä–µ–¥–∫–∞—è –µ–¥–∞
        if random.random() < 0.4:
            items.append("dried_meat")
        if random.random() < 0.3:
            items.append("protein_bar")
        if random.random() < 0.2:
            items.append("hot_meal")
        
        # –ù–∞–ø–∏—Ç–∫–∏
        if random.random() < 0.5:
            items.append("tea")
        if random.random() < 0.4:
            items.append("juice")
        
        # –ê–ø—Ç–µ—á–∫–∏ —Ä–µ–∂–µ
        if random.random() < 0.3:
            items.append("medkit")
            
        # –û—Ä—É–∂–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–ª—É–±–∏–Ω—ã
        if floor_number <= 5:
            items.extend(["rusty_pipe", "crowbar"])
        elif floor_number <= 10:
            items.extend(["crowbar", "fire_axe"])
        else:
            items.extend(["fire_axe"])
            
        # –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ –≥–ª—É–±–æ–∫–∏—Ö —ç—Ç–∞–∂–∞—Ö
        if floor_number >= 10:
            if random.random() < 0.1:
                items.append("flashlight")
            if random.random() < 0.05:
                items.append("master_key")
                
        return items
        
    def check_pickup(self, player_x: int, player_y: int, player, manual: bool = False) -> Optional[Item]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
        
        Args:
            player_x: –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ X
            player_y: –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ Y
            player: –ò–≥—Ä–æ–∫
            manual: –ï—Å–ª–∏ True, –ø–æ–¥–±–æ—Ä —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–ª–∞–≤–∏—à–∏
            
        Returns:
            –ü–æ–¥–Ω—è—Ç—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ None
        """
        for item_spawn in self.spawned_items:
            if item_spawn.picked_up:
                continue
                
            if item_spawn.x == player_x and item_spawn.y == player_y:
                # –ï—Å–ª–∏ manual=True, –Ω–µ –ø–æ–¥–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                if not manual:
                    return None
                
                # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
                if player.inventory.add_item(item_spawn.item):
                    item_spawn.picked_up = True
                    return item_spawn.item
                else:
                    print("‚ùå –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω!")
                    
        return None
    
    def has_item_at(self, x: int, y: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏
        
        Args:
            x: –ü–æ–∑–∏—Ü–∏—è X
            y: –ü–æ–∑–∏—Ü–∏—è Y
            
        Returns:
            True –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç
        """
        for item_spawn in self.spawned_items:
            if not item_spawn.picked_up and item_spawn.x == x and item_spawn.y == y:
                return True
        return False
        
    def render_all(self, screen: pygame.Surface, camera_x: int = 0, camera_y: int = 0, fog_of_war=None) -> None:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        
        Args:
            screen: –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            camera_x: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ X
            camera_y: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ Y
            fog_of_war: –¢—É–º–∞–Ω –≤–æ–π–Ω—ã
        """
        for item_spawn in self.spawned_items:
            item_spawn.render(screen, camera_x, camera_y, fog_of_war)
            
    def clear(self) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã"""
        self.spawned_items.clear()
    
    def spawn_dropped_item(self, item: Item, x: int, y: int, quantity: int = 1) -> None:
        """
        –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤—ã–±—Ä–æ—à–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–µ
        
        Args:
            item: –ü—Ä–µ–¥–º–µ—Ç
            x: –ü–æ–∑–∏—Ü–∏—è X
            y: –ü–æ–∑–∏—Ü–∏—è Y
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–¥–ª—è —Å—Ç–∞–∫–∞—é—â–∏—Ö—Å—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤)
        """
        # –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞
        from copy import deepcopy
        dropped_item = deepcopy(item)
        
        # –°–æ–∑–¥–∞—ë–º —Å–ø–∞–≤–Ω –Ω–∞ –∫–∞—Ä—Ç–µ
        item_spawn = ItemSpawn(dropped_item, x, y)
        self.spawned_items.append(item_spawn)
        
        print(f"üìç –ü—Ä–µ–¥–º–µ—Ç —Ä–∞–∑–º–µ—â—ë–Ω –Ω–∞ –∫–∞—Ä—Ç–µ: {item.name} x{quantity} –Ω–∞ ({x}, {y})")


if __name__ == "__main__":
    # –¢–µ—Å—Ç —Å–ø–∞–≤–Ω–µ—Ä–∞
    spawner = ItemSpawner()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç—Ç–∞–∂–µ–π
    for floor in [1, 5, 10, 15, 20]:
        items = spawner._get_possible_items(floor)
        print(f"\n–≠—Ç–∞–∂ {floor}: {items}")
