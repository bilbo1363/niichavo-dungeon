"""
–°–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
"""
from typing import Optional, List, Tuple
from .item import Item, ItemType


class InventorySlot:
    """–°–ª–æ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
    
    def __init__(self, item: Optional[Item] = None, quantity: int = 1):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ—Ç–∞
        
        Args:
            item: –ü—Ä–µ–¥–º–µ—Ç
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        """
        self.item = item
        self.quantity = quantity
        
    def is_empty(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—É—Å—Ç –ª–∏ —Å–ª–æ—Ç"""
        return self.item is None
        
    def can_add(self, item: Item, amount: int = 1) -> bool:
        """
        –ú–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–ª–æ—Ç
        
        Args:
            item: –ü—Ä–µ–¥–º–µ—Ç
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            
        Returns:
            True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
        """
        if self.is_empty():
            return True
            
        if self.item.id == item.id and self.item.stackable:
            return self.quantity + amount <= self.item.max_stack
            
        return False
        
    def add(self, item: Item, amount: int = 1) -> int:
        """
        –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–ª–æ—Ç
        
        Args:
            item: –ü—Ä–µ–¥–º–µ—Ç
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        """
        if self.is_empty():
            self.item = item
            self.quantity = amount
            return amount
            
        if self.item.id == item.id and self.item.stackable:
            space = self.item.max_stack - self.quantity
            added = min(space, amount)
            self.quantity += added
            return added
            
        return 0
        
    def remove(self, amount: int = 1) -> int:
        """
        –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ª–æ—Ç–∞
        
        Args:
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        """
        if self.is_empty():
            return 0
            
        removed = min(self.quantity, amount)
        self.quantity -= removed
        
        if self.quantity <= 0:
            self.item = None
            self.quantity = 0
            
        return removed


class Inventory:
    """–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞"""
    
    def __init__(self, max_slots: int = 20):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        
        Args:
            max_slots: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤
        """
        self.max_slots = max_slots
        self.slots: List[InventorySlot] = [InventorySlot() for _ in range(max_slots)]
        
        # –≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ
        self.equipped_weapon: Optional[Item] = None
        
        print(f"üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å–æ–∑–¥–∞–Ω: {max_slots} —Å–ª–æ—Ç–æ–≤")
        
    def add_item(self, item: Item, quantity: int = 1) -> bool:
        """
        –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        
        Args:
            item: –ü—Ä–µ–¥–º–µ—Ç
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            
        Returns:
            True –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        remaining = quantity
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ø–∫–∏
        if item.stackable:
            print(f"üîç –ò—â–µ–º —Å—Ç–∞–∫ –¥–ª—è: {item.name} (id={item.id}, stackable={item.stackable}, max={item.max_stack})")
            for slot in self.slots:
                if not slot.is_empty():
                    print(f"   –°–ª–æ—Ç: {slot.item.name} (id={slot.item.id}, –∫–æ–ª-–≤–æ={slot.quantity}/{slot.item.max_stack})")
                    if slot.item.id == item.id:
                        print(f"   ‚úÖ ID —Å–æ–≤–ø–∞–¥–∞—é—Ç! –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞–∫")
                        added = slot.add(item, remaining)
                        remaining -= added
                        if remaining <= 0:
                            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {item.name} x{quantity}")
                            return True
                    else:
                        print(f"   ‚ùå ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: '{slot.item.id}' != '{item.id}'")
                        
        # –ó–∞—Ç–µ–º –∏—â–µ–º –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã
        for slot in self.slots:
            if slot.is_empty():
                added = slot.add(item, remaining)
                remaining -= added
                if remaining <= 0:
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {item.name} x{quantity}")
                    return True
                    
        if remaining < quantity:
            print(f"‚ö†Ô∏è  –î–æ–±–∞–≤–ª–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ: {item.name} x{quantity - remaining}")
            return False
        else:
            print(f"‚ùå –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω! –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å: {item.name}")
            return False
            
    def remove_item(self, item_id: str, quantity: int = 1) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        
        Args:
            item_id: ID –ø—Ä–µ–¥–º–µ—Ç–∞
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            
        Returns:
            True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        remaining = quantity
        
        for slot in self.slots:
            if not slot.is_empty() and slot.item.id == item_id:
                removed = slot.remove(remaining)
                remaining -= removed
                if remaining <= 0:
                    return True
                    
        return remaining < quantity
        
    def get_item_count(self, item_id: str) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        
        Args:
            item_id: ID –ø—Ä–µ–¥–º–µ—Ç–∞
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        """
        count = 0
        for slot in self.slots:
            if not slot.is_empty() and slot.item.id == item_id:
                count += slot.quantity
        return count
        
    def has_item(self, item_id: str, quantity: int = 1) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        
        Args:
            item_id: ID –ø—Ä–µ–¥–º–µ—Ç–∞
            quantity: –¢—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            
        Returns:
            True –µ—Å–ª–∏ –µ—Å—Ç—å
        """
        return self.get_item_count(item_id) >= quantity
        
    def use_item(self, slot_index: int, player) -> bool:
        """
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ª–æ—Ç–∞
        
        Args:
            slot_index: –ò–Ω–¥–µ–∫—Å —Å–ª–æ—Ç–∞
            player: –ò–≥—Ä–æ–∫
            
        Returns:
            True –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if slot_index < 0 or slot_index >= self.max_slots:
            return False
            
        slot = self.slots[slot_index]
        if slot.is_empty():
            return False
            
        item = slot.item
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–º–µ—Ç
        if item.use(player):
            # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
            if item.item_type == ItemType.CONSUMABLE:
                slot.remove(1)
            return True
            
        return False
        
    def equip_weapon(self, slot_index: int) -> bool:
        """
        –≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ä—É–∂–∏–µ –∏–∑ —Å–ª–æ—Ç–∞
        
        Args:
            slot_index: –ò–Ω–¥–µ–∫—Å —Å–ª–æ—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if slot_index < 0 or slot_index >= self.max_slots:
            return False
            
        slot = self.slots[slot_index]
        if slot.is_empty():
            return False
            
        item = slot.item
        if item.item_type != ItemType.WEAPON:
            print(f"‚ùå {item.name} - –Ω–µ –æ—Ä—É–∂–∏–µ!")
            return False
            
        # –°–Ω–∏–º–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ—Ä—É–∂–∏–µ
        if self.equipped_weapon:
            self.add_item(self.equipped_weapon)
            
        # –≠–∫–∏–ø–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ
        self.equipped_weapon = item
        slot.remove(1)
        print(f"‚öîÔ∏è  –≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ: {item.name} ({item.damage} —É—Ä–æ–Ω–∞)")
        return True
        
    def unequip_weapon(self) -> bool:
        """
        –°–Ω—è—Ç—å –æ—Ä—É–∂–∏–µ
        
        Returns:
            True –µ—Å–ª–∏ —Å–Ω—è—Ç–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.equipped_weapon:
            print("‚ùå –û—Ä—É–∂–∏–µ –Ω–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ!")
            return False
            
        weapon = self.equipped_weapon
        if self.add_item(weapon):
            self.equipped_weapon = None
            print(f"‚úÖ –°–Ω—è—Ç–æ: {weapon.name}")
            return True
        else:
            print("‚ùå –ù–µ—Ç –º–µ—Å—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!")
            return False
    
    def drop_item(self, slot_index: int, quantity: int = 1) -> Optional[Tuple[Item, int]]:
        """
        –í—ã–±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ª–æ—Ç–∞
        
        Args:
            slot_index: –ò–Ω–¥–µ–∫—Å —Å–ª–æ—Ç–∞
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤—ã–±—Ä–æ—Å–∞
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–ø—Ä–µ–¥–º–µ—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ) –∏–ª–∏ None
        """
        if slot_index < 0 or slot_index >= self.max_slots:
            return None
            
        slot = self.slots[slot_index]
        if slot.is_empty():
            return None
        
        item = slot.item
        actual_quantity = min(quantity, slot.quantity)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ—Ç–∞
        slot.remove(actual_quantity)
        
        print(f"üóëÔ∏è  –í—ã–±—Ä–æ—à–µ–Ω–æ: {item.name} x{actual_quantity}")
        return (item, actual_quantity)
            
    def get_total_weight(self) -> float:
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π –≤–µ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        
        Returns:
            –í–µ—Å
        """
        weight = 0.0
        for slot in self.slots:
            if not slot.is_empty():
                weight += slot.item.weight * slot.quantity
                
        if self.equipped_weapon:
            weight += self.equipped_weapon.weight
            
        return weight
        
    def get_items_by_type(self, item_type: ItemType) -> List[Tuple[int, InventorySlot]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ —Ç–∏–ø—É
        
        Args:
            item_type: –¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ (–∏–Ω–¥–µ–∫—Å, —Å–ª–æ—Ç)
        """
        items = []
        for i, slot in enumerate(self.slots):
            if not slot.is_empty() and slot.item.item_type == item_type:
                items.append((i, slot))
        return items
        
    def print_inventory(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
        print("\nüéí –ò–ù–í–ï–ù–¢–ê–†–¨:")
        
        if self.equipped_weapon:
            print(f"‚öîÔ∏è  –û—Ä—É–∂–∏–µ: {self.equipped_weapon.name} ({self.equipped_weapon.damage} —É—Ä–æ–Ω–∞)")
        else:
            print("‚öîÔ∏è  –û—Ä—É–∂–∏–µ: –Ω–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ")
            
        print(f"\n–í–µ—Å: {self.get_total_weight():.1f} –∫–≥")
        print("\n–ü—Ä–µ–¥–º–µ—Ç—ã:")
        
        has_items = False
        for i, slot in enumerate(self.slots):
            if not slot.is_empty():
                has_items = True
                quantity_str = f" x{slot.quantity}" if slot.quantity > 1 else ""
                print(f"  [{i}] {slot.item.name}{quantity_str}")
                
        if not has_items:
            print("  (–ø—É—Å—Ç–æ)")


if __name__ == "__main__":
    # –¢–µ—Å—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    from .item import ItemDatabase
    
    db = ItemDatabase()
    inventory = Inventory(max_slots=10)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
    inventory.add_item(db.get_item("rusty_pipe"))
    inventory.add_item(db.get_item("bandage"), 5)
    inventory.add_item(db.get_item("coffee"), 3)
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    inventory.print_inventory()
    
    # –≠–∫–∏–ø–∏—Ä—É–µ–º –æ—Ä—É–∂–∏–µ
    inventory.equip_weapon(0)
    
    # –í—ã–≤–æ–¥–∏–º —Å–Ω–æ–≤–∞
    inventory.print_inventory()
