"""
GUI –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
"""
import pygame
from typing import Optional, Tuple


class InventoryUI:
    """–í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
    
    def __init__(self, screen_width: int, screen_height: int):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
        
        Args:
            screen_width: –®–∏—Ä–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞
            screen_height: –í—ã—Å–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞
        """
        self.screen_width = screen_width
        self.screen_height = screen_height
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫–Ω–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        self.width = 600
        self.height = 500
        self.x = (screen_width - self.width) // 2
        self.y = (screen_height - self.height) // 2
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–æ—Ç–æ–≤
        self.slot_size = 50
        self.slot_padding = 5
        self.slots_per_row = 5
        
        # –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç
        self.selected_slot: Optional[int] = None
        
        # –®—Ä–∏—Ñ—Ç—ã
        self.font = pygame.font.Font(None, 24)
        self.small_font = pygame.font.Font(None, 18)
        
    def render_inventory(self, screen: pygame.Surface, inventory) -> None:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        
        Args:
            screen: –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            inventory: –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
        """
        # –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
        overlay = pygame.Surface((self.screen_width, self.screen_height))
        overlay.set_alpha(180)
        overlay.fill((0, 0, 0))
        screen.blit(overlay, (0, 0))
        
        # –û–∫–Ω–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        pygame.draw.rect(screen, (40, 40, 40), (self.x, self.y, self.width, self.height))
        pygame.draw.rect(screen, (100, 100, 100), (self.x, self.y, self.width, self.height), 3)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = self.font.render("üéí –ò–ù–í–ï–ù–¢–ê–†–¨", True, (255, 255, 255))
        screen.blit(title, (self.x + 20, self.y + 15))
        
        # –≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ
        weapon_y = self.y + 60
        weapon_text = self.small_font.render("–û—Ä—É–∂–∏–µ:", True, (200, 200, 200))
        screen.blit(weapon_text, (self.x + 20, weapon_y))
        
        if inventory.equipped_weapon:
            weapon_name = self.small_font.render(
                f"{inventory.equipped_weapon.name} ({inventory.equipped_weapon.damage} —É—Ä–æ–Ω–∞)",
                True,
                inventory.equipped_weapon.get_rarity_color()
            )
            screen.blit(weapon_name, (self.x + 100, weapon_y))
        else:
            no_weapon = self.small_font.render("–Ω–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ", True, (150, 150, 150))
            screen.blit(no_weapon, (self.x + 100, weapon_y))
        
        # –°–ª–æ—Ç—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        slots_y = self.y + 100
        for i, slot in enumerate(inventory.slots):
            row = i // self.slots_per_row
            col = i % self.slots_per_row
            
            slot_x = self.x + 20 + col * (self.slot_size + self.slot_padding)
            slot_y = slots_y + row * (self.slot_size + self.slot_padding)
            
            # –†–∞–º–∫–∞ —Å–ª–æ—Ç–∞
            color = (100, 100, 100)
            if self.selected_slot == i:
                color = (255, 255, 0)
            elif not slot.is_empty():
                color = (150, 150, 150)
                
            pygame.draw.rect(screen, color, (slot_x, slot_y, self.slot_size, self.slot_size), 2)
            
            # –ü—Ä–µ–¥–º–µ—Ç –≤ —Å–ª–æ—Ç–µ
            if not slot.is_empty():
                # –¶–≤–µ—Ç –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
                item_color = slot.item.get_rarity_color()
                pygame.draw.rect(
                    screen,
                    item_color,
                    (slot_x + 5, slot_y + 5, self.slot_size - 10, self.slot_size - 10)
                )
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                if slot.quantity > 1:
                    qty_text = self.small_font.render(str(slot.quantity), True, (255, 255, 255))
                    screen.blit(qty_text, (slot_x + 5, slot_y + 5))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ
        if self.selected_slot is not None and self.selected_slot < len(inventory.slots):
            slot = inventory.slots[self.selected_slot]
            if not slot.is_empty():
                info_y = slots_y + 250
                
                # –ù–∞–∑–≤–∞–Ω–∏–µ
                name_text = self.font.render(slot.item.name, True, slot.item.get_rarity_color())
                screen.blit(name_text, (self.x + 20, info_y))
                
                # –û–ø–∏—Å–∞–Ω–∏–µ
                desc_text = self.small_font.render(slot.item.description, True, (200, 200, 200))
                screen.blit(desc_text, (self.x + 20, info_y + 30))
                
                # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                stats_y = info_y + 60
                if slot.item.damage > 0:
                    dmg = self.small_font.render(f"–£—Ä–æ–Ω: {slot.item.damage}", True, (255, 100, 100))
                    screen.blit(dmg, (self.x + 20, stats_y))
                    stats_y += 20
                    
                if slot.item.heal_amount > 0:
                    heal = self.small_font.render(f"–õ–µ—á–µ–Ω–∏–µ: +{slot.item.heal_amount} HP", True, (100, 255, 100))
                    screen.blit(heal, (self.x + 20, stats_y))
                    stats_y += 20
                    
                if slot.item.endurance_amount > 0:
                    end = self.small_font.render(f"–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: +{slot.item.endurance_amount}", True, (100, 200, 255))
                    screen.blit(end, (self.x + 20, stats_y))
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∏
        hint_y = self.y + self.height - 80
        hints = [
            "–°—Ç—Ä–µ–ª–∫–∏ - –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞",
            "Enter - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å/—ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å",
            "D - –≤—ã–±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç",
            "I –∏–ª–∏ ESC - –∑–∞–∫—Ä—ã—Ç—å"
        ]
        for i, hint in enumerate(hints):
            hint_text = self.small_font.render(hint, True, (150, 150, 150))
            screen.blit(hint_text, (self.x + 20, hint_y + i * 20))
    
    def handle_input(self, event: pygame.event.Event, inventory, player=None) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ pygame
            inventory: –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
            
        Returns:
            True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        """
        if event.type == pygame.KEYDOWN:
            # –ó–∞–∫—Ä—ã—Ç—å
            if event.key in [pygame.K_i, pygame.K_ESCAPE]:
                return True
                
            # –í—ã–±–æ—Ä —Å–ª–æ—Ç–∞
            if event.key == pygame.K_RIGHT:
                if self.selected_slot is None:
                    self.selected_slot = 0
                else:
                    self.selected_slot = (self.selected_slot + 1) % inventory.max_slots
                    
            elif event.key == pygame.K_LEFT:
                if self.selected_slot is None:
                    self.selected_slot = 0
                else:
                    self.selected_slot = (self.selected_slot - 1) % inventory.max_slots
                    
            elif event.key == pygame.K_DOWN:
                if self.selected_slot is None:
                    self.selected_slot = 0
                else:
                    self.selected_slot = (self.selected_slot + self.slots_per_row) % inventory.max_slots
                    
            elif event.key == pygame.K_UP:
                if self.selected_slot is None:
                    self.selected_slot = 0
                else:
                    self.selected_slot = (self.selected_slot - self.slots_per_row) % inventory.max_slots
                    
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
            elif event.key == pygame.K_RETURN:
                if self.selected_slot is not None and player is not None:
                    slot = inventory.slots[self.selected_slot]
                    if not slot.is_empty():
                        from ..items.item import ItemType
                        
                        # –≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ä—É–∂–∏–µ
                        if slot.item.item_type == ItemType.WEAPON:
                            inventory.equip_weapon(self.selected_slot)
                        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫
                        elif slot.item.item_type == ItemType.CONSUMABLE:
                            inventory.use_item(self.selected_slot, player)
            
            # –í—ã–±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç (–∫–ª–∞–≤–∏—à–∞ D - Drop)
            elif event.key == pygame.K_d:
                if self.selected_slot is not None:
                    slot = inventory.slots[self.selected_slot]
                    if not slot.is_empty():
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–æ—à–µ–Ω–Ω–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ
                        # –ò–≥—Ä–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ –∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–µ
                        dropped = inventory.drop_item(self.selected_slot, 1)
                        if dropped and player is not None:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ
                            if not hasattr(player, '_dropped_items'):
                                player._dropped_items = []
                            player._dropped_items.append(dropped)
                            
        return False


if __name__ == "__main__":
    # –¢–µ—Å—Ç UI
    pygame.init()
    screen = pygame.display.set_mode((1200, 800))
    
    from ..items.inventory import Inventory
    from ..items.item import ItemDatabase
    
    db = ItemDatabase()
    inventory = Inventory()
    inventory.add_item(db.get_item("rusty_pipe"))
    inventory.add_item(db.get_item("bandage"), 5)
    
    ui = InventoryUI(1200, 800)
    
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if ui.handle_input(event, inventory):
                running = False
                
        screen.fill((0, 0, 0))
        ui.render_inventory(screen, inventory)
        pygame.display.flip()
        
    pygame.quit()
