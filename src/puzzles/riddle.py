"""
–°–∏—Å—Ç–µ–º–∞ –∑–∞–≥–∞–¥–æ–∫
"""
from dataclasses import dataclass
from typing import Optional, List
import random


@dataclass
class Riddle:
    """–ö–ª–∞—Å—Å –∑–∞–≥–∞–¥–∫–∏"""
    
    question: str
    answer: str
    x: int
    y: int
    solved: bool = False
    reward_description: str = "–ó–Ω–∞–Ω–∏–µ"
    
    def render(self, screen, camera_x: int = 0, camera_y: int = 0, fog_of_war=None) -> None:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥–∞–¥–∫–∏ –Ω–∞ —Å—Ç–µ–Ω–µ
        
        Args:
            screen: –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            camera_x: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ X
            camera_y: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ Y
            fog_of_war: –¢—É–º–∞–Ω –≤–æ–π–Ω—ã
        """
        import pygame
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
        if fog_of_war and not fog_of_war.is_visible(self.x, self.y):
            return
            
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        tile_size = 32
        screen_x = self.x * tile_size - camera_x
        screen_y = self.y * tile_size - camera_y
        
        if self.solved:
            # –†–µ—à—ë–Ω–Ω–∞—è –∑–∞–≥–∞–¥–∫–∞ - —Å–µ—Ä–∞—è —Å –≥–∞–ª–æ—á–∫–æ–π
            font = pygame.font.Font(None, 48)
            text = font.render("‚úì", True, (150, 150, 150))  # –°–µ—Ä—ã–π
            text_rect = text.get_rect(center=(screen_x + tile_size // 2, screen_y + tile_size // 2))
            
            # –°–µ—Ä—ã–π —Ñ–æ–Ω
            pygame.draw.circle(
                screen,
                (60, 60, 60),  # –¢—ë–º–Ω–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
                (screen_x + tile_size // 2, screen_y + tile_size // 2),
                16
            )
            
            # –ì–∞–ª–æ—á–∫–∞
            screen.blit(text, text_rect)
        else:
            # –ù–µ—Ä–µ—à—ë–Ω–Ω–∞—è –∑–∞–≥–∞–¥–∫–∞ - –∂—ë–ª—Ç—ã–π –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞
            font = pygame.font.Font(None, 48)
            text = font.render("?", True, (255, 255, 0))  # –ñ—ë–ª—Ç—ã–π
            text_rect = text.get_rect(center=(screen_x + tile_size // 2, screen_y + tile_size // 2))
            
            # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ñ–æ–Ω
            pygame.draw.circle(
                screen,
                (100, 50, 150),  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ñ–æ–Ω
                (screen_x + tile_size // 2, screen_y + tile_size // 2),
                16
            )
            
            # –ó–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞
            screen.blit(text, text_rect)
    
    def check_answer(self, player_answer: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç –∏–≥—Ä–æ–∫–∞
        
        Args:
            player_answer: –û—Ç–≤–µ—Ç –∏–≥—Ä–æ–∫–∞
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        """
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç—ã (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
        normalized_answer = player_answer.strip().lower()
        normalized_correct = self.answer.strip().lower()
        
        if normalized_answer == normalized_correct:
            self.solved = True
            print(f"\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ó–∞–≥–∞–¥–∫–∞ —Ä–µ—à–µ–Ω–∞!")
            print(f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {self.reward_description}")
            return True
        else:
            print(f"\n‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return False


class RiddleGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–≥–∞–¥–æ–∫"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        # –ë–∞–Ω–∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≥–∞–¥–æ–∫
        self.math_riddles = [
            {
                "question": "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 7 √ó 8?",
                "answer": "56",
                "reward": "+10 HP"
            },
            {
                "question": "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –§–∏–±–æ–Ω–∞—á—á–∏: 1, 1, 2, 3, 5, 8, 13, ?",
                "answer": "21",
                "reward": "+5 –Ø—Å–Ω–æ—Å—Ç—å"
            },
            {
                "question": "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 2x + 5 = 17. –ß–µ–º—É —Ä–∞–≤–µ–Ω x?",
                "answer": "6",
                "reward": "+15 –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å"
            },
            {
                "question": "–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–Ω–µ–π —É –∫—É–±–∞?",
                "answer": "6",
                "reward": "+10 HP"
            },
            {
                "question": "–ü—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ 11?",
                "answer": "13",
                "reward": "+5 –Ø—Å–Ω–æ—Å—Ç—å"
            },
            {
                "question": "–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –∏–∑ 144?",
                "answer": "12",
                "reward": "+10 HP"
            },
            {
                "question": "–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ –ø—Ä—è–º–æ–º —É–≥–ª–µ?",
                "answer": "90",
                "reward": "+15 –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å"
            },
            {
                "question": "–ß–∏—Å–ª–æ œÄ (–ø–∏) –æ–∫—Ä—É–≥–ª—ë–Ω–Ω–æ–µ –¥–æ —Å–æ—Ç—ã—Ö?",
                "answer": "3.14",
                "reward": "+5 –Ø—Å–Ω–æ—Å—Ç—å"
            },
            {
                "question": "2 –≤ —Å—Ç–µ–ø–µ–Ω–∏ 5 = ?",
                "answer": "32",
                "reward": "+10 HP"
            },
            {
                "question": "–§–∞–∫—Ç–æ—Ä–∏–∞–ª 5 (5!) = ?",
                "answer": "120",
                "reward": "+20 HP"
            },
        ]
        
        # –ë–∞–Ω–∫ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–≥–∞–¥–æ–∫
        self.logic_riddles = [
            {
                "question": "–£ –æ—Ç—Ü–∞ –ú—ç—Ä–∏ –ø—è—Ç—å –¥–æ—á–µ—Ä–µ–π: –ß–∞—á–∞, –ß–µ—á–µ, –ß–∏—á–∏, –ß–æ—á–æ. –ö–∞–∫ –∑–æ–≤—É—Ç –ø—è—Ç—É—é?",
                "answer": "–º—ç—Ä–∏",
                "reward": "+10 –Ø—Å–Ω–æ—Å—Ç—å"
            },
            {
                "question": "–ß—Ç–æ —Ç—è–∂–µ–ª–µ–µ: –∫–∏–ª–æ–≥—Ä–∞–º–º –≤–∞—Ç—ã –∏–ª–∏ –∫–∏–ª–æ–≥—Ä–∞–º–º –∂–µ–ª–µ–∑–∞?",
                "answer": "–æ–¥–∏–Ω–∞–∫–æ–≤–æ",
                "reward": "+5 –Ø—Å–Ω–æ—Å—Ç—å"
            },
            {
                "question": "–°–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ –≤ –≥–æ–¥—É –∏–º–µ—é—Ç 28 –¥–Ω–µ–π?",
                "answer": "12",
                "reward": "+10 HP"
            },
        ]
        
        print("üß© –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–≥–∞–¥–æ–∫ —Å–æ–∑–¥–∞–Ω")
        
    def generate_riddle(self, x: int, y: int, seed: int = None) -> Riddle:
        """
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–∞–¥–∫—É
        
        Args:
            x: –ü–æ–∑–∏—Ü–∏—è X
            y: –ü–æ–∑–∏—Ü–∏—è Y
            seed: Seed –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
            
        Returns:
            –ó–∞–≥–∞–¥–∫–∞
        """
        if seed is not None:
            random.seed(seed)
            
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–≥–∞–¥–∫—É
        all_riddles = self.math_riddles + self.logic_riddles
        riddle_data = random.choice(all_riddles)
        
        riddle = Riddle(
            question=riddle_data["question"],
            answer=riddle_data["answer"],
            x=x,
            y=y,
            reward_description=riddle_data["reward"]
        )
        
        print(f"üìú –ó–∞–≥–∞–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ ({x}, {y})")
        
        return riddle


class RiddleManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≥–∞–¥–æ–∫ –Ω–∞ —É—Ä–æ–≤–Ω–µ"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.riddles: List[Riddle] = []
        self.generator = RiddleGenerator()
        
    def add_riddle(self, riddle: Riddle) -> None:
        """
        –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–∞–¥–∫—É
        
        Args:
            riddle: –ó–∞–≥–∞–¥–∫–∞
        """
        self.riddles.append(riddle)
        
    def spawn_riddle(self, x: int, y: int, seed: int = None) -> Riddle:
        """
        –°–æ–∑–¥–∞—Ç—å –∑–∞–≥–∞–¥–∫—É –Ω–∞ —Å—Ç–µ–Ω–µ
        
        Args:
            x: –ü–æ–∑–∏—Ü–∏—è X
            y: –ü–æ–∑–∏—Ü–∏—è Y
            seed: Seed –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
            
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–≥–∞–¥–∫–∞
        """
        riddle = self.generator.generate_riddle(x, y, seed)
        self.add_riddle(riddle)
        return riddle
        
    def get_riddle_at(self, x: int, y: int) -> Optional[Riddle]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–∞–¥–∫—É –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏
        
        Args:
            x: –ü–æ–∑–∏—Ü–∏—è X
            y: –ü–æ–∑–∏—Ü–∏—è Y
            
        Returns:
            –ó–∞–≥–∞–¥–∫–∞ –∏–ª–∏ None (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–∂–µ —Ä–µ—à—ë–Ω–Ω—ã–µ –∑–∞–≥–∞–¥–∫–∏)
        """
        for riddle in self.riddles:
            if riddle.x == x and riddle.y == y:
                return riddle
        return None
        
    def get_unsolved_count(self) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–≥–∞–¥–æ–∫
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–≥–∞–¥–æ–∫
        """
        return sum(1 for riddle in self.riddles if not riddle.solved)
        
    def get_solved_count(self) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–≥–∞–¥–æ–∫
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–≥–∞–¥–æ–∫
        """
        return sum(1 for riddle in self.riddles if riddle.solved)
        
    def render(self, screen, camera_x: int = 0, camera_y: int = 0, fog_of_war=None) -> None:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–≥–∞–¥–æ–∫
        
        Args:
            screen: –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            camera_x: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ X
            camera_y: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ Y
            fog_of_war: –¢—É–º–∞–Ω –≤–æ–π–Ω—ã
        """
        for riddle in self.riddles:
            riddle.render(screen, camera_x, camera_y, fog_of_war)


if __name__ == "__main__":
    # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∑–∞–≥–∞–¥–æ–∫
    manager = RiddleManager()
    
    # –°–æ–∑–¥–∞—ë–º –∑–∞–≥–∞–¥–∫—É
    riddle = manager.spawn_riddle(10, 10, seed=42)
    print(f"\n–í–æ–ø—Ä–æ—Å: {riddle.question}")
    print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {riddle.answer}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    riddle.check_answer("999")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    riddle.check_answer(riddle.answer)
    
    print(f"\n–†–µ—à–µ–Ω–æ –∑–∞–≥–∞–¥–æ–∫: {manager.get_solved_count()}")
    print(f"–ù–µ—Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–≥–∞–¥–æ–∫: {manager.get_unsolved_count()}")
