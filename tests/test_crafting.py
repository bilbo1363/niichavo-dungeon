"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫—Ä–∞—Ñ—Ç–∞
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.systems.crafting import (
    Recipe, RecipeCategory, CraftingDifficulty,
    CraftingSystem, CraftingResult
)
from src.systems.recipe_presets import (
    create_workbench_recipes, create_laboratory_recipes,
    create_all_recipes
)


def test_recipe_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞"""
    recipe = Recipe(
        id="test_recipe",
        name="–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç",
        description="–û–ø–∏—Å–∞–Ω–∏–µ",
        category=RecipeCategory.TOOLS,
        required_station="workbench",
        required_station_tier=1,
        ingredients={"wood": 2},
        result_item="test_item",
    )
    
    assert recipe.id == "test_recipe"
    assert recipe.category == RecipeCategory.TOOLS
    assert recipe.ingredients["wood"] == 2
    print("‚úÖ test_recipe_creation –ø—Ä–æ–π–¥–µ–Ω")


def test_can_craft():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫—Ä–∞—Ñ—Ç–∞"""
    recipe = Recipe(
        id="iron_sword",
        name="–ñ–µ–ª–µ–∑–Ω—ã–π –º–µ—á",
        description="–ú–µ—á",
        category=RecipeCategory.WEAPONS,
        required_station="workbench",
        required_station_tier=2,
        required_level=5,
        ingredients={"iron_ingot": 3, "wooden_stick": 1},
        result_item="iron_sword",
    )
    
    # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤
    inventory = {"iron_ingot": 3, "wooden_stick": 1}
    assert recipe.can_craft(5, inventory, "workbench", 2)
    
    # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Ä–æ–≤–Ω—è
    assert not recipe.can_craft(3, inventory, "workbench", 2)
    
    # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ tier —Å—Ç–∞–Ω—Ü–∏–∏
    assert not recipe.can_craft(5, inventory, "workbench", 1)
    
    # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤
    inventory_low = {"iron_ingot": 1}
    assert not recipe.can_craft(5, inventory_low, "workbench", 2)
    
    print("‚úÖ test_can_craft –ø—Ä–æ–π–¥–µ–Ω")


def test_crafting_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫—Ä–∞—Ñ—Ç–∞"""
    system = CraftingSystem()
    
    recipe = Recipe(
        id="test_item",
        name="–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç",
        description="–û–ø–∏—Å–∞–Ω–∏–µ",
        category=RecipeCategory.TOOLS,
        required_station="workbench",
        ingredients={"wood": 1},
        result_item="test_item",
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç
    system.add_recipe(recipe)
    assert system.get_recipe("test_item") is not None
    
    # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç
    system.unlock_recipe("test_item")
    assert "test_item" in system.unlocked_recipes
    
    print("‚úÖ test_crafting_system –ø—Ä–æ–π–¥–µ–Ω")


def test_craft_item_success():
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∫—Ä–∞—Ñ—Ç–∞"""
    system = CraftingSystem()
    
    recipe = Recipe(
        id="wooden_stick",
        name="–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –ø–∞–ª–∫–∞",
        description="–ü–∞–ª–∫–∞",
        category=RecipeCategory.MATERIALS,
        required_station="workbench",
        ingredients={"wood": 1},
        result_item="wooden_stick",
        result_count=4,
        success_chance=1.0,  # 100% —É—Å–ø–µ—Ö
    )
    
    system.add_recipe(recipe)
    system.unlock_recipe("wooden_stick")
    
    inventory = {"wood": 5}
    result = system.craft_item(
        "wooden_stick",
        player_level=1,
        player_inventory=inventory,
        station_id="workbench",
        station_tier=1
    )
    
    assert result.success
    assert result.result_item == "wooden_stick"
    assert result.result_count == 4
    assert inventory["wood"] == 4  # –ü–æ—Ç—Ä–∞—á–µ–Ω–æ 1
    
    print("‚úÖ test_craft_item_success –ø—Ä–æ–π–¥–µ–Ω")


def test_craft_item_not_unlocked():
    """–¢–µ—Å—Ç –∫—Ä–∞—Ñ—Ç–∞ –Ω–µ—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞"""
    system = CraftingSystem()
    
    recipe = Recipe(
        id="test_item",
        name="–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç",
        description="–û–ø–∏—Å–∞–Ω–∏–µ",
        category=RecipeCategory.TOOLS,
        required_station="workbench",
        ingredients={"wood": 1},
        result_item="test_item",
    )
    
    system.add_recipe(recipe)
    # –ù–ï —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç
    
    inventory = {"wood": 5}
    result = system.craft_item(
        "test_item",
        player_level=1,
        player_inventory=inventory,
        station_id="workbench",
        station_tier=1
    )
    
    assert not result.success
    assert "–Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" in result.message
    
    print("‚úÖ test_craft_item_not_unlocked –ø—Ä–æ–π–¥–µ–Ω")


def test_craft_with_quality_bonus():
    """–¢–µ—Å—Ç –∫—Ä–∞—Ñ—Ç–∞ —Å –±–æ–Ω—É—Å–æ–º –∫–∞—á–µ—Å—Ç–≤–∞"""
    system = CraftingSystem()
    
    recipe = Recipe(
        id="iron_sword",
        name="–ñ–µ–ª–µ–∑–Ω—ã–π –º–µ—á",
        description="–ú–µ—á",
        category=RecipeCategory.WEAPONS,
        required_station="workbench",
        ingredients={"iron_ingot": 3},
        result_item="iron_sword",
        success_chance=1.0,
        quality_bonus_item="iron_sword_sharp",
        quality_bonus_chance=1.0,  # 100% –±–æ–Ω—É—Å –¥–ª—è —Ç–µ—Å—Ç–∞
    )
    
    system.add_recipe(recipe)
    system.unlock_recipe("iron_sword")
    
    inventory = {"iron_ingot": 10}
    result = system.craft_item(
        "iron_sword",
        player_level=5,
        player_inventory=inventory,
        station_id="workbench",
        station_tier=2,
        quality_bonus=0.0
    )
    
    assert result.success
    assert result.bonus_item == "iron_sword_sharp"
    assert result.bonus_count == 1
    
    print("‚úÖ test_craft_with_quality_bonus –ø—Ä–æ–π–¥–µ–Ω")


def test_get_recipes_for_station():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏"""
    system = create_all_recipes()
    
    # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    system.unlock_recipe("wooden_stick")
    system.unlock_recipe("iron_sword")
    system.unlock_recipe("healing_potion_basic")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –≤–µ—Ä—Å—Ç–∞–∫–∞ tier 1
    workbench_recipes = system.get_recipes_for_station("workbench", 1)
    assert len(workbench_recipes) == 1  # –¢–æ–ª—å–∫–æ wooden_stick
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –≤–µ—Ä—Å—Ç–∞–∫–∞ tier 2
    workbench_recipes_t2 = system.get_recipes_for_station("workbench", 2)
    assert len(workbench_recipes_t2) == 2  # wooden_stick + iron_sword
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
    lab_recipes = system.get_recipes_for_station("laboratory", 1)
    assert len(lab_recipes) == 1  # healing_potion_basic
    
    print("‚úÖ test_get_recipes_for_station –ø—Ä–æ–π–¥–µ–Ω")


def test_recipe_serialization():
    """–¢–µ—Å—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞"""
    recipe = Recipe(
        id="test_recipe",
        name="–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç",
        description="–û–ø–∏—Å–∞–Ω–∏–µ",
        category=RecipeCategory.TOOLS,
        required_station="workbench",
        ingredients={"wood": 2},
        result_item="test_item",
    )
    
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º
    data = recipe.to_dict()
    
    # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º
    restored = Recipe.from_dict(data)
    
    assert restored.id == recipe.id
    assert restored.category == recipe.category
    assert restored.ingredients == recipe.ingredients
    
    print("‚úÖ test_recipe_serialization –ø—Ä–æ–π–¥–µ–Ω")


def test_system_serialization():
    """–¢–µ—Å—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    system = CraftingSystem()
    
    recipe = Recipe(
        id="test_item",
        name="–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç",
        description="–û–ø–∏—Å–∞–Ω–∏–µ",
        category=RecipeCategory.TOOLS,
        required_station="workbench",
        ingredients={"wood": 1},
        result_item="test_item",
    )
    
    system.add_recipe(recipe)
    system.unlock_recipe("test_item")
    
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º
    data = system.to_dict()
    
    # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º
    restored = CraftingSystem.from_dict(data)
    
    assert len(restored.recipes) == len(system.recipes)
    assert len(restored.unlocked_recipes) == len(system.unlocked_recipes)
    assert "test_item" in restored.unlocked_recipes
    
    print("‚úÖ test_system_serialization –ø—Ä–æ–π–¥–µ–Ω")


def test_all_preset_recipes():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    system = create_all_recipes()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ—Ü–µ–ø—Ç—ã —Å–æ–∑–¥–∞–Ω—ã
    assert len(system.recipes) > 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –≤–µ—Ä—Å—Ç–∞–∫–∞
    workbench_recipes = create_workbench_recipes()
    assert len(workbench_recipes) > 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
    lab_recipes = create_laboratory_recipes()
    assert len(lab_recipes) > 0
    
    print("‚úÖ test_all_preset_recipes –ø—Ä–æ–π–¥–µ–Ω")


def run_all_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∫—Ä–∞—Ñ—Ç–∞...\n")
    
    test_recipe_creation()
    test_can_craft()
    test_crafting_system()
    test_craft_item_success()
    test_craft_item_not_unlocked()
    test_craft_with_quality_bonus()
    test_get_recipes_for_station()
    test_recipe_serialization()
    test_system_serialization()
    test_all_preset_recipes()
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n")


if __name__ == "__main__":
    run_all_tests()
