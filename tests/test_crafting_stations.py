"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫—Ä–∞—Ñ—Ç-—Å—Ç–∞–Ω—Ü–∏–π
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.objects.crafting_stations import (
    CraftingStation, StationType, StationCategory,
    StationUpgrade, StationManager
)
from src.objects.station_presets import (
    create_workbench, create_laboratory, create_alchemy_table,
    create_magic_circle, create_aldan_terminal, create_all_stations
)


def test_station_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏"""
    station = CraftingStation(
        id="test_station",
        station_type=StationType.WORKBENCH,
        category=StationCategory.BASIC,
        name="–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞–Ω—Ü–∏—è",
        description="–û–ø–∏—Å–∞–Ω–∏–µ",
    )
    
    assert station.id == "test_station"
    assert station.station_type == StationType.WORKBENCH
    assert station.current_tier == 1
    assert not station.is_unlocked
    print("‚úÖ test_station_creation –ø—Ä–æ–π–¥–µ–Ω")


def test_station_upgrade():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏"""
    station = create_workbench()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    assert station.current_tier == 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —É–ª—É—á—à–∏—Ç—å (—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏)
    player_inventory = {
        "iron_ingot": 10,
        "wooden_plank": 20,
        "rope": 5,
    }
    assert station.can_upgrade(5, player_inventory, 500)
    
    # –£–ª—É—á—à–∞–µ–º
    success = station.upgrade()
    assert success
    assert station.current_tier == 2
    
    print("‚úÖ test_station_upgrade –ø—Ä–æ–π–¥–µ–Ω")


def test_cannot_upgrade_without_requirements():
    """–¢–µ—Å—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è –±–µ–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    station = create_workbench()
    
    # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    player_inventory = {"iron_ingot": 1}
    assert not station.can_upgrade(5, player_inventory, 500)
    
    # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥
    player_inventory = {
        "iron_ingot": 10,
        "wooden_plank": 20,
        "rope": 5,
    }
    assert not station.can_upgrade(5, player_inventory, 100)
    
    # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    assert not station.can_upgrade(1, player_inventory, 500)
    
    print("‚úÖ test_cannot_upgrade_without_requirements –ø—Ä–æ–π–¥–µ–Ω")


def test_crafting_speed_bonus():
    """–¢–µ—Å—Ç –±–æ–Ω—É—Å–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∫—Ä–∞—Ñ—Ç–∞"""
    station = create_workbench()
    
    # Tier 1: –Ω–µ—Ç –±–æ–Ω—É—Å–∞
    assert station.get_crafting_speed_multiplier() == 1.0
    
    # –£–ª—É—á—à–∞–µ–º –¥–æ Tier 2
    station.current_tier = 2
    # Tier 2: +20% —Å–∫–æ—Ä–æ—Å—Ç–∏
    assert abs(station.get_crafting_speed_multiplier() - 1.2) < 0.01
    
    # –£–ª—É—á—à–∞–µ–º –¥–æ Tier 3
    station.current_tier = 3
    # Tier 3: +20% + +30% = +50% —Å–∫–æ—Ä–æ—Å—Ç–∏
    assert abs(station.get_crafting_speed_multiplier() - 1.5) < 0.01
    
    print("‚úÖ test_crafting_speed_bonus –ø—Ä–æ–π–¥–µ–Ω")


def test_quality_bonus():
    """–¢–µ—Å—Ç –±–æ–Ω—É—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
    station = create_workbench()
    
    # Tier 1: –Ω–µ—Ç –±–æ–Ω—É—Å–∞
    assert station.get_quality_bonus() == 0.0
    
    # Tier 2: +10% –∫–∞—á–µ—Å—Ç–≤–∞
    station.current_tier = 2
    assert abs(station.get_quality_bonus() - 0.1) < 0.01
    
    # Tier 3: +10% + +15% = +25% –∫–∞—á–µ—Å—Ç–≤–∞
    station.current_tier = 3
    assert abs(station.get_quality_bonus() - 0.25) < 0.01
    
    print("‚úÖ test_quality_bonus –ø—Ä–æ–π–¥–µ–Ω")


def test_unlocked_recipes():
    """–¢–µ—Å—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    station = create_workbench()
    
    # Tier 1: 4 —Ä–µ—Ü–µ–ø—Ç–∞
    recipes = station.get_unlocked_recipes()
    assert len(recipes) == 4
    assert "wooden_stick" in recipes
    
    # Tier 2: 4 + 4 = 8 —Ä–µ—Ü–µ–ø—Ç–æ–≤
    station.current_tier = 2
    recipes = station.get_unlocked_recipes()
    assert len(recipes) == 8
    assert "iron_sword" in recipes
    
    # Tier 3: 8 + 4 = 12 —Ä–µ—Ü–µ–ø—Ç–æ–≤
    station.current_tier = 3
    recipes = station.get_unlocked_recipes()
    assert len(recipes) == 12
    assert "steel_sword" in recipes
    
    print("‚úÖ test_unlocked_recipes –ø—Ä–æ–π–¥–µ–Ω")


def test_station_manager():
    """–¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–π"""
    manager = StationManager()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω—Ü–∏—é
    workbench = create_workbench()
    manager.add_station(workbench)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞–Ω—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞
    assert manager.get_station("workbench") is not None
    assert len(manager.get_unlocked_stations()) == 1
    
    # –î–æ–±–∞–≤–ª—è–µ–º –µ—â—ë —Å—Ç–∞–Ω—Ü–∏—é
    lab = create_laboratory()
    manager.add_station(lab)
    
    # –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
    assert len(manager.get_unlocked_stations()) == 1
    
    # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é
    manager.unlock_station("laboratory")
    assert len(manager.get_unlocked_stations()) == 2
    
    print("‚úÖ test_station_manager –ø—Ä–æ–π–¥–µ–Ω")


def test_all_stations_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π"""
    manager = create_all_stations()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã
    assert len(manager.stations) == 5
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —Å—Ç–∞–Ω—Ü–∏–π
    assert manager.get_station("workbench") is not None
    assert manager.get_station("laboratory") is not None
    assert manager.get_station("alchemy_table") is not None
    assert manager.get_station("magic_circle") is not None
    assert manager.get_station("aldan_terminal") is not None
    
    # –¢–æ–ª—å–∫–æ –≤–µ—Ä—Å—Ç–∞–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    assert len(manager.get_unlocked_stations()) == 1
    
    print("‚úÖ test_all_stations_creation –ø—Ä–æ–π–¥–µ–Ω")


def test_station_serialization():
    """–¢–µ—Å—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–Ω—Ü–∏–∏"""
    station = create_workbench()
    station.current_tier = 2
    
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º
    data = station.to_dict()
    
    # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º
    restored = CraftingStation.from_dict(data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º
    assert restored.id == station.id
    assert restored.station_type == station.station_type
    assert restored.current_tier == station.current_tier
    assert len(restored.upgrades) == len(station.upgrades)
    
    print("‚úÖ test_station_serialization –ø—Ä–æ–π–¥–µ–Ω")


def test_manager_serialization():
    """–¢–µ—Å—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    manager = create_all_stations()
    manager.unlock_station("laboratory")
    
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º
    data = manager.to_dict()
    
    # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º
    restored = StationManager.from_dict(data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º
    assert len(restored.stations) == len(manager.stations)
    assert len(restored.unlocked_stations) == len(manager.unlocked_stations)
    assert "laboratory" in restored.unlocked_stations
    
    print("‚úÖ test_manager_serialization –ø—Ä–æ–π–¥–µ–Ω")


def run_all_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫—Ä–∞—Ñ—Ç-—Å—Ç–∞–Ω—Ü–∏–π...\n")
    
    test_station_creation()
    test_station_upgrade()
    test_cannot_upgrade_without_requirements()
    test_crafting_speed_bonus()
    test_quality_bonus()
    test_unlocked_recipes()
    test_station_manager()
    test_all_stations_creation()
    test_station_serialization()
    test_manager_serialization()
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n")


if __name__ == "__main__":
    run_all_tests()
